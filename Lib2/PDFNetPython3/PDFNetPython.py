# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PDFNetPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PDFNetPython')
    _PDFNetPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PDFNetPython', [dirname(__file__)])
        except ImportError:
            import _PDFNetPython
            return _PDFNetPython
        try:
            _mod = imp.load_module('_PDFNetPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PDFNetPython = swig_import_helper()
    del swig_import_helper
else:
    import _PDFNetPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PDFNetPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PDFNetPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PDFNetPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PDFNetPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PDFNetPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PDFNetPython.SwigPyIterator_copy(self)

    def next(self):
        return _PDFNetPython.SwigPyIterator_next(self)

    def __next__(self):
        return _PDFNetPython.SwigPyIterator___next__(self)

    def previous(self):
        return _PDFNetPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PDFNetPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PDFNetPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PDFNetPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PDFNetPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PDFNetPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PDFNetPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PDFNetPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PDFNetPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorDouble___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorDouble_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorDouble_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorDouble_empty(self)

    def size(self):
        return _PDFNetPython.VectorDouble_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorDouble_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorDouble_begin(self)

    def end(self):
        return _PDFNetPython.VectorDouble_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorDouble_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorDouble_rend(self)

    def clear(self):
        return _PDFNetPython.VectorDouble_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorDouble_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorDouble_front(self)

    def back(self):
        return _PDFNetPython.VectorDouble_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorDouble_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorDouble_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _PDFNetPython.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorObj, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorObj_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorObj___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorObj___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorObj___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorObj___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorObj___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorObj___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorObj___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorObj___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorObj___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorObj_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorObj_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorObj_empty(self)

    def size(self):
        return _PDFNetPython.VectorObj_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorObj_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorObj_begin(self)

    def end(self):
        return _PDFNetPython.VectorObj_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorObj_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorObj_rend(self)

    def clear(self):
        return _PDFNetPython.VectorObj_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorObj_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorObj_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorObj_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorObj_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorObj_front(self)

    def back(self):
        return _PDFNetPython.VectorObj_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorObj_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorObj_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorObj_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorObj_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorObj_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorObj
    __del__ = lambda self: None
VectorObj_swigregister = _PDFNetPython.VectorObj_swigregister
VectorObj_swigregister(VectorObj)

class VectorPage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPage, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorPage_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorPage___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorPage___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorPage___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorPage___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorPage___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorPage___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorPage___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorPage___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorPage___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorPage_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorPage_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorPage_empty(self)

    def size(self):
        return _PDFNetPython.VectorPage_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorPage_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorPage_begin(self)

    def end(self):
        return _PDFNetPython.VectorPage_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorPage_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorPage_rend(self)

    def clear(self):
        return _PDFNetPython.VectorPage_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorPage_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorPage_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorPage_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorPage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorPage_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorPage_front(self)

    def back(self):
        return _PDFNetPython.VectorPage_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorPage_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorPage_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorPage_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorPage_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorPage_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorPage
    __del__ = lambda self: None
VectorPage_swigregister = _PDFNetPython.VectorPage_swigregister
VectorPage_swigregister(VectorPage)

class VectorUChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorUChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorUChar___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorUChar___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorUChar___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorUChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorUChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorUChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorUChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorUChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorUChar___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorUChar_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorUChar_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorUChar_empty(self)

    def size(self):
        return _PDFNetPython.VectorUChar_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorUChar_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorUChar_begin(self)

    def end(self):
        return _PDFNetPython.VectorUChar_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorUChar_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorUChar_rend(self)

    def clear(self):
        return _PDFNetPython.VectorUChar_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorUChar_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorUChar_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorUChar_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorUChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorUChar_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorUChar_front(self)

    def back(self):
        return _PDFNetPython.VectorUChar_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorUChar_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorUChar_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorUChar_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorUChar_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorUChar_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorUChar
    __del__ = lambda self: None
VectorUChar_swigregister = _PDFNetPython.VectorUChar_swigregister
VectorUChar_swigregister(VectorUChar)

class VectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorChar___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorChar___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorChar___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorChar___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorChar_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorChar_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorChar_empty(self)

    def size(self):
        return _PDFNetPython.VectorChar_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorChar_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorChar_begin(self)

    def end(self):
        return _PDFNetPython.VectorChar_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorChar_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorChar_rend(self)

    def clear(self):
        return _PDFNetPython.VectorChar_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorChar_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorChar_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorChar_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorChar_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorChar_front(self)

    def back(self):
        return _PDFNetPython.VectorChar_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorChar_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorChar_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorChar_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorChar_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorChar_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorChar
    __del__ = lambda self: None
VectorChar_swigregister = _PDFNetPython.VectorChar_swigregister
VectorChar_swigregister(VectorChar)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorInt___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorInt___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorInt___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorInt_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorInt_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorInt_empty(self)

    def size(self):
        return _PDFNetPython.VectorInt_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorInt_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorInt_begin(self)

    def end(self):
        return _PDFNetPython.VectorInt_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorInt_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorInt_rend(self)

    def clear(self):
        return _PDFNetPython.VectorInt_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorInt_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorInt_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorInt_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorInt_front(self)

    def back(self):
        return _PDFNetPython.VectorInt_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorInt_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorInt_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _PDFNetPython.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorString___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorString___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorString___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorString_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorString_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorString_empty(self)

    def size(self):
        return _PDFNetPython.VectorString_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorString_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorString_begin(self)

    def end(self):
        return _PDFNetPython.VectorString_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorString_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorString_rend(self)

    def clear(self):
        return _PDFNetPython.VectorString_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorString_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorString_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorString_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorString_front(self)

    def back(self):
        return _PDFNetPython.VectorString_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorString_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorString_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorString_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorString_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _PDFNetPython.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorRedaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRedaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRedaction, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorRedaction_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorRedaction___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorRedaction___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorRedaction___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorRedaction___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorRedaction___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorRedaction___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorRedaction___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorRedaction___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorRedaction___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorRedaction_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorRedaction_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorRedaction_empty(self)

    def size(self):
        return _PDFNetPython.VectorRedaction_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorRedaction_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorRedaction_begin(self)

    def end(self):
        return _PDFNetPython.VectorRedaction_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorRedaction_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorRedaction_rend(self)

    def clear(self):
        return _PDFNetPython.VectorRedaction_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorRedaction_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorRedaction_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorRedaction_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorRedaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorRedaction_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorRedaction_front(self)

    def back(self):
        return _PDFNetPython.VectorRedaction_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorRedaction_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorRedaction_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorRedaction_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorRedaction_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorRedaction_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorRedaction
    __del__ = lambda self: None
VectorRedaction_swigregister = _PDFNetPython.VectorRedaction_swigregister
VectorRedaction_swigregister(VectorRedaction)

class VectorQuadPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorQuadPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorQuadPoint, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorQuadPoint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorQuadPoint___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorQuadPoint___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorQuadPoint___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorQuadPoint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorQuadPoint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorQuadPoint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorQuadPoint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorQuadPoint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorQuadPoint___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorQuadPoint_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorQuadPoint_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorQuadPoint_empty(self)

    def size(self):
        return _PDFNetPython.VectorQuadPoint_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorQuadPoint_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorQuadPoint_begin(self)

    def end(self):
        return _PDFNetPython.VectorQuadPoint_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorQuadPoint_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorQuadPoint_rend(self)

    def clear(self):
        return _PDFNetPython.VectorQuadPoint_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorQuadPoint_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorQuadPoint_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorQuadPoint_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorQuadPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorQuadPoint_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorQuadPoint_front(self)

    def back(self):
        return _PDFNetPython.VectorQuadPoint_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorQuadPoint_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorQuadPoint_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorQuadPoint_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorQuadPoint_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorQuadPoint_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorQuadPoint
    __del__ = lambda self: None
VectorQuadPoint_swigregister = _PDFNetPython.VectorQuadPoint_swigregister
VectorQuadPoint_swigregister(VectorQuadPoint)

class VectorSeparation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorSeparation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorSeparation, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorSeparation_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorSeparation___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorSeparation___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorSeparation___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorSeparation___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorSeparation___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorSeparation___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorSeparation___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorSeparation___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorSeparation___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorSeparation_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorSeparation_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorSeparation_empty(self)

    def size(self):
        return _PDFNetPython.VectorSeparation_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorSeparation_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorSeparation_begin(self)

    def end(self):
        return _PDFNetPython.VectorSeparation_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorSeparation_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorSeparation_rend(self)

    def clear(self):
        return _PDFNetPython.VectorSeparation_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorSeparation_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorSeparation_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorSeparation_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorSeparation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorSeparation_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorSeparation_front(self)

    def back(self):
        return _PDFNetPython.VectorSeparation_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorSeparation_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorSeparation_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorSeparation_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorSeparation_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorSeparation_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorSeparation
    __del__ = lambda self: None
VectorSeparation_swigregister = _PDFNetPython.VectorSeparation_swigregister
VectorSeparation_swigregister(VectorSeparation)

class VectorDisallowedChange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDisallowedChange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDisallowedChange, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorDisallowedChange_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorDisallowedChange___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorDisallowedChange___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorDisallowedChange___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorDisallowedChange___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorDisallowedChange___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorDisallowedChange___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorDisallowedChange___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorDisallowedChange___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorDisallowedChange___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorDisallowedChange_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorDisallowedChange_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorDisallowedChange_empty(self)

    def size(self):
        return _PDFNetPython.VectorDisallowedChange_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorDisallowedChange_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorDisallowedChange_begin(self)

    def end(self):
        return _PDFNetPython.VectorDisallowedChange_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorDisallowedChange_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorDisallowedChange_rend(self)

    def clear(self):
        return _PDFNetPython.VectorDisallowedChange_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorDisallowedChange_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorDisallowedChange_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorDisallowedChange_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorDisallowedChange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorDisallowedChange_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorDisallowedChange_front(self)

    def back(self):
        return _PDFNetPython.VectorDisallowedChange_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorDisallowedChange_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorDisallowedChange_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorDisallowedChange_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorDisallowedChange_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorDisallowedChange_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorDisallowedChange
    __del__ = lambda self: None
VectorDisallowedChange_swigregister = _PDFNetPython.VectorDisallowedChange_swigregister
VectorDisallowedChange_swigregister(VectorDisallowedChange)

class VectorAnnot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorAnnot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorAnnot, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorAnnot_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorAnnot___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorAnnot___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorAnnot___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorAnnot___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorAnnot___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorAnnot___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorAnnot___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorAnnot___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorAnnot___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorAnnot_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorAnnot_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorAnnot_empty(self)

    def size(self):
        return _PDFNetPython.VectorAnnot_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorAnnot_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorAnnot_begin(self)

    def end(self):
        return _PDFNetPython.VectorAnnot_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorAnnot_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorAnnot_rend(self)

    def clear(self):
        return _PDFNetPython.VectorAnnot_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorAnnot_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorAnnot_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorAnnot_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorAnnot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorAnnot_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorAnnot_front(self)

    def back(self):
        return _PDFNetPython.VectorAnnot_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorAnnot_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorAnnot_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorAnnot_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorAnnot_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorAnnot_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorAnnot
    __del__ = lambda self: None
VectorAnnot_swigregister = _PDFNetPython.VectorAnnot_swigregister
VectorAnnot_swigregister(VectorAnnot)

class VectorX509Extension(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorX509Extension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorX509Extension, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorX509Extension_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorX509Extension___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorX509Extension___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorX509Extension___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorX509Extension___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorX509Extension___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorX509Extension___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorX509Extension___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorX509Extension___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorX509Extension___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorX509Extension_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorX509Extension_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorX509Extension_empty(self)

    def size(self):
        return _PDFNetPython.VectorX509Extension_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorX509Extension_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorX509Extension_begin(self)

    def end(self):
        return _PDFNetPython.VectorX509Extension_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorX509Extension_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorX509Extension_rend(self)

    def clear(self):
        return _PDFNetPython.VectorX509Extension_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorX509Extension_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorX509Extension_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorX509Extension_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorX509Extension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorX509Extension_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorX509Extension_front(self)

    def back(self):
        return _PDFNetPython.VectorX509Extension_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorX509Extension_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorX509Extension_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorX509Extension_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorX509Extension_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorX509Extension_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorX509Extension
    __del__ = lambda self: None
VectorX509Extension_swigregister = _PDFNetPython.VectorX509Extension_swigregister
VectorX509Extension_swigregister(VectorX509Extension)

class VectorX509Certificate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorX509Certificate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorX509Certificate, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorX509Certificate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorX509Certificate___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorX509Certificate___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorX509Certificate___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorX509Certificate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorX509Certificate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorX509Certificate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorX509Certificate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorX509Certificate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorX509Certificate___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorX509Certificate_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorX509Certificate_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorX509Certificate_empty(self)

    def size(self):
        return _PDFNetPython.VectorX509Certificate_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorX509Certificate_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorX509Certificate_begin(self)

    def end(self):
        return _PDFNetPython.VectorX509Certificate_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorX509Certificate_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorX509Certificate_rend(self)

    def clear(self):
        return _PDFNetPython.VectorX509Certificate_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorX509Certificate_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorX509Certificate_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorX509Certificate_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorX509Certificate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorX509Certificate_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorX509Certificate_front(self)

    def back(self):
        return _PDFNetPython.VectorX509Certificate_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorX509Certificate_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorX509Certificate_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorX509Certificate_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorX509Certificate_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorX509Certificate_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorX509Certificate
    __del__ = lambda self: None
VectorX509Certificate_swigregister = _PDFNetPython.VectorX509Certificate_swigregister
VectorX509Certificate_swigregister(VectorX509Certificate)

class VectorX501AttributeTypeAndValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorX501AttributeTypeAndValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorX501AttributeTypeAndValue, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorX501AttributeTypeAndValue___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_empty(self)

    def size(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_begin(self)

    def end(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_rend(self)

    def clear(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorX501AttributeTypeAndValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_front(self)

    def back(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorX501AttributeTypeAndValue_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorX501AttributeTypeAndValue
    __del__ = lambda self: None
VectorX501AttributeTypeAndValue_swigregister = _PDFNetPython.VectorX501AttributeTypeAndValue_swigregister
VectorX501AttributeTypeAndValue_swigregister(VectorX501AttributeTypeAndValue)

class VectorByteRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorByteRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorByteRange, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorByteRange_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorByteRange___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorByteRange___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorByteRange___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorByteRange___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorByteRange___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorByteRange___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorByteRange___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorByteRange___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorByteRange___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorByteRange_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorByteRange_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorByteRange_empty(self)

    def size(self):
        return _PDFNetPython.VectorByteRange_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorByteRange_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorByteRange_begin(self)

    def end(self):
        return _PDFNetPython.VectorByteRange_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorByteRange_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorByteRange_rend(self)

    def clear(self):
        return _PDFNetPython.VectorByteRange_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorByteRange_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorByteRange_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorByteRange_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorByteRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorByteRange_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorByteRange_front(self)

    def back(self):
        return _PDFNetPython.VectorByteRange_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorByteRange_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorByteRange_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorByteRange_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorByteRange_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorByteRange_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorByteRange
    __del__ = lambda self: None
VectorByteRange_swigregister = _PDFNetPython.VectorByteRange_swigregister
VectorByteRange_swigregister(VectorByteRange)

class VectorVectorX509Certificate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorX509Certificate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorX509Certificate, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PDFNetPython.VectorVectorX509Certificate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PDFNetPython.VectorVectorX509Certificate___nonzero__(self)

    def __bool__(self):
        return _PDFNetPython.VectorVectorX509Certificate___bool__(self)

    def __len__(self):
        return _PDFNetPython.VectorVectorX509Certificate___len__(self)

    def __getslice__(self, i, j):
        return _PDFNetPython.VectorVectorX509Certificate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PDFNetPython.VectorVectorX509Certificate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PDFNetPython.VectorVectorX509Certificate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PDFNetPython.VectorVectorX509Certificate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PDFNetPython.VectorVectorX509Certificate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PDFNetPython.VectorVectorX509Certificate___setitem__(self, *args)

    def pop(self):
        return _PDFNetPython.VectorVectorX509Certificate_pop(self)

    def append(self, x):
        return _PDFNetPython.VectorVectorX509Certificate_append(self, x)

    def empty(self):
        return _PDFNetPython.VectorVectorX509Certificate_empty(self)

    def size(self):
        return _PDFNetPython.VectorVectorX509Certificate_size(self)

    def swap(self, v):
        return _PDFNetPython.VectorVectorX509Certificate_swap(self, v)

    def begin(self):
        return _PDFNetPython.VectorVectorX509Certificate_begin(self)

    def end(self):
        return _PDFNetPython.VectorVectorX509Certificate_end(self)

    def rbegin(self):
        return _PDFNetPython.VectorVectorX509Certificate_rbegin(self)

    def rend(self):
        return _PDFNetPython.VectorVectorX509Certificate_rend(self)

    def clear(self):
        return _PDFNetPython.VectorVectorX509Certificate_clear(self)

    def get_allocator(self):
        return _PDFNetPython.VectorVectorX509Certificate_get_allocator(self)

    def pop_back(self):
        return _PDFNetPython.VectorVectorX509Certificate_pop_back(self)

    def erase(self, *args):
        return _PDFNetPython.VectorVectorX509Certificate_erase(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_VectorVectorX509Certificate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PDFNetPython.VectorVectorX509Certificate_push_back(self, x)

    def front(self):
        return _PDFNetPython.VectorVectorX509Certificate_front(self)

    def back(self):
        return _PDFNetPython.VectorVectorX509Certificate_back(self)

    def assign(self, n, x):
        return _PDFNetPython.VectorVectorX509Certificate_assign(self, n, x)

    def resize(self, *args):
        return _PDFNetPython.VectorVectorX509Certificate_resize(self, *args)

    def insert(self, *args):
        return _PDFNetPython.VectorVectorX509Certificate_insert(self, *args)

    def reserve(self, n):
        return _PDFNetPython.VectorVectorX509Certificate_reserve(self, n)

    def capacity(self):
        return _PDFNetPython.VectorVectorX509Certificate_capacity(self)
    __swig_destroy__ = _PDFNetPython.delete_VectorVectorX509Certificate
    __del__ = lambda self: None
VectorVectorX509Certificate_swigregister = _PDFNetPython.VectorVectorX509Certificate_swigregister
VectorVectorX509Certificate_swigregister(VectorVectorX509Certificate)

class Selection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Selection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Selection, name)
    __repr__ = _swig_repr

    def GetPageNum(self):
        return _PDFNetPython.Selection_GetPageNum(self)

    def GetQuads(self):
        return _PDFNetPython.Selection_GetQuads(self)

    def GetAsUnicode(self):
        return _PDFNetPython.Selection_GetAsUnicode(self)

    def GetAsHtml(self):
        return _PDFNetPython.Selection_GetAsHtml(self)
    __swig_destroy__ = _PDFNetPython.delete_Selection
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PDFNetPython.new_Selection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Selection_swigregister = _PDFNetPython.Selection_swigregister
Selection_swigregister(Selection)

class Callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Callback, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Callback:
            _self = None
        else:
            _self = self
        this = _PDFNetPython.new_Callback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Callback
    __del__ = lambda self: None

    def RenderBeginEventProc(self):
        return _PDFNetPython.Callback_RenderBeginEventProc(self)
    if _newclass:
        StaticRenderBeginEventProc = staticmethod(_PDFNetPython.Callback_StaticRenderBeginEventProc)
    else:
        StaticRenderBeginEventProc = _PDFNetPython.Callback_StaticRenderBeginEventProc

    def RenderFinishEventProc(self, cancelled):
        return _PDFNetPython.Callback_RenderFinishEventProc(self, cancelled)
    if _newclass:
        StaticRenderFinishEventProc = staticmethod(_PDFNetPython.Callback_StaticRenderFinishEventProc)
    else:
        StaticRenderFinishEventProc = _PDFNetPython.Callback_StaticRenderFinishEventProc

    def ErrorReportProc(self, message):
        return _PDFNetPython.Callback_ErrorReportProc(self, message)
    if _newclass:
        StaticErrorReportProc = staticmethod(_PDFNetPython.Callback_StaticErrorReportProc)
    else:
        StaticErrorReportProc = _PDFNetPython.Callback_StaticErrorReportProc

    def CurrentPageProc(self, current_page, num_pages):
        return _PDFNetPython.Callback_CurrentPageProc(self, current_page, num_pages)
    if _newclass:
        StaticCurrentPageProc = staticmethod(_PDFNetPython.Callback_StaticCurrentPageProc)
    else:
        StaticCurrentPageProc = _PDFNetPython.Callback_StaticCurrentPageProc

    def JavaScriptEventProc(self, event_type, json):
        return _PDFNetPython.Callback_JavaScriptEventProc(self, event_type, json)
    if _newclass:
        StaticJavaScriptEventProc = staticmethod(_PDFNetPython.Callback_StaticJavaScriptEventProc)
    else:
        StaticJavaScriptEventProc = _PDFNetPython.Callback_StaticJavaScriptEventProc

    def CurrentZoomProc(self, curr_zoom_proc):
        return _PDFNetPython.Callback_CurrentZoomProc(self, curr_zoom_proc)
    if _newclass:
        StaticCurrentZoomProc = staticmethod(_PDFNetPython.Callback_StaticCurrentZoomProc)
    else:
        StaticCurrentZoomProc = _PDFNetPython.Callback_StaticCurrentZoomProc

    def ConnectionErrorProc(self, message, error_code, switch_to_demo):
        return _PDFNetPython.Callback_ConnectionErrorProc(self, message, error_code, switch_to_demo)
    if _newclass:
        StaticConnectionErrorProc = staticmethod(_PDFNetPython.Callback_StaticConnectionErrorProc)
    else:
        StaticConnectionErrorProc = _PDFNetPython.Callback_StaticConnectionErrorProc

    def ThumbAsyncHandler(self, page_num, was_thumb_found, thumb_buf, thumb_width, thumb_height):
        return _PDFNetPython.Callback_ThumbAsyncHandler(self, page_num, was_thumb_found, thumb_buf, thumb_width, thumb_height)
    if _newclass:
        StaticThumbAsyncHandler = staticmethod(_PDFNetPython.Callback_StaticThumbAsyncHandler)
    else:
        StaticThumbAsyncHandler = _PDFNetPython.Callback_StaticThumbAsyncHandler

    def RequestRenderInWorkerThread(self):
        return _PDFNetPython.Callback_RequestRenderInWorkerThread(self)
    if _newclass:
        StaticRequestRenderInWorkerThread = staticmethod(_PDFNetPython.Callback_StaticRequestRenderInWorkerThread)
    else:
        StaticRequestRenderInWorkerThread = _PDFNetPython.Callback_StaticRequestRenderInWorkerThread

    def FindTextHandler(self, success, selection):
        return _PDFNetPython.Callback_FindTextHandler(self, success, selection)
    if _newclass:
        StaticFindTextHandler = staticmethod(_PDFNetPython.Callback_StaticFindTextHandler)
    else:
        StaticFindTextHandler = _PDFNetPython.Callback_StaticFindTextHandler

    def CreateTileProc(self, buffer, originX, originY, width, height, pagNum, cellNumber, finalRender, predictionRender, tilesRemaining, firstTile, canvasWidth, canvasHeight, cellSideLength, cellPerRow, cellPerCol, thumbnailId):
        return _PDFNetPython.Callback_CreateTileProc(self, buffer, originX, originY, width, height, pagNum, cellNumber, finalRender, predictionRender, tilesRemaining, firstTile, canvasWidth, canvasHeight, cellSideLength, cellPerRow, cellPerCol, thumbnailId)
    if _newclass:
        StaticCreateTileProc = staticmethod(_PDFNetPython.Callback_StaticCreateTileProc)
    else:
        StaticCreateTileProc = _PDFNetPython.Callback_StaticCreateTileProc

    def AnnotBitmapProc(self, operation_type, buffer, width, height, stride, page_num, annot_index, annot_key, x_in_page, y_in_page, x_offset, y_offset, remaining_tiles, sequence_number, x_page_size, y_page_size):
        return _PDFNetPython.Callback_AnnotBitmapProc(self, operation_type, buffer, width, height, stride, page_num, annot_index, annot_key, x_in_page, y_in_page, x_offset, y_offset, remaining_tiles, sequence_number, x_page_size, y_page_size)
    if _newclass:
        StaticAnnotBitmapProc = staticmethod(_PDFNetPython.Callback_StaticAnnotBitmapProc)
    else:
        StaticAnnotBitmapProc = _PDFNetPython.Callback_StaticAnnotBitmapProc

    def DeluxeCreateTileProc(self, buffer, width, height, stride, page_num, x_page_loc, y_page_loc, zoomed_page_width, zoomed_page_height, tile_id, x_in_page, y_in_page, canvas_id, remaining_tiles, tile_type, sequence_number):
        return _PDFNetPython.Callback_DeluxeCreateTileProc(self, buffer, width, height, stride, page_num, x_page_loc, y_page_loc, zoomed_page_width, zoomed_page_height, tile_id, x_in_page, y_in_page, canvas_id, remaining_tiles, tile_type, sequence_number)
    if _newclass:
        StaticDeluxeCreateTileProc = staticmethod(_PDFNetPython.Callback_StaticDeluxeCreateTileProc)
    else:
        StaticDeluxeCreateTileProc = _PDFNetPython.Callback_StaticDeluxeCreateTileProc

    def RemoveTileProc(self, canvasNumber, cellNumber, thumbnailId, sequenceNumber):
        return _PDFNetPython.Callback_RemoveTileProc(self, canvasNumber, cellNumber, thumbnailId, sequenceNumber)
    if _newclass:
        StaticRemoveTileProc = staticmethod(_PDFNetPython.Callback_StaticRemoveTileProc)
    else:
        StaticRemoveTileProc = _PDFNetPython.Callback_StaticRemoveTileProc

    def PartDownloadedProc(self, dlType, doc, pageNum, objNum, message):
        return _PDFNetPython.Callback_PartDownloadedProc(self, dlType, doc, pageNum, objNum, message)
    if _newclass:
        StaticPartDownloadedProc = staticmethod(_PDFNetPython.Callback_StaticPartDownloadedProc)
    else:
        StaticPartDownloadedProc = _PDFNetPython.Callback_StaticPartDownloadedProc
    def __disown__(self):
        self.this.disown()
        _PDFNetPython.disown_Callback(self)
        return weakref_proxy(self)
Callback_swigregister = _PDFNetPython.Callback_swigregister
Callback_swigregister(Callback)

def Callback_StaticRenderBeginEventProc(data):
    return _PDFNetPython.Callback_StaticRenderBeginEventProc(data)
Callback_StaticRenderBeginEventProc = _PDFNetPython.Callback_StaticRenderBeginEventProc

def Callback_StaticRenderFinishEventProc(data, cancelled):
    return _PDFNetPython.Callback_StaticRenderFinishEventProc(data, cancelled)
Callback_StaticRenderFinishEventProc = _PDFNetPython.Callback_StaticRenderFinishEventProc

def Callback_StaticErrorReportProc(message, data):
    return _PDFNetPython.Callback_StaticErrorReportProc(message, data)
Callback_StaticErrorReportProc = _PDFNetPython.Callback_StaticErrorReportProc

def Callback_StaticCurrentPageProc(current_page, num_pages, data):
    return _PDFNetPython.Callback_StaticCurrentPageProc(current_page, num_pages, data)
Callback_StaticCurrentPageProc = _PDFNetPython.Callback_StaticCurrentPageProc

def Callback_StaticJavaScriptEventProc(event_type, json, data):
    return _PDFNetPython.Callback_StaticJavaScriptEventProc(event_type, json, data)
Callback_StaticJavaScriptEventProc = _PDFNetPython.Callback_StaticJavaScriptEventProc

def Callback_StaticCurrentZoomProc(curr_zoom_proc, data):
    return _PDFNetPython.Callback_StaticCurrentZoomProc(curr_zoom_proc, data)
Callback_StaticCurrentZoomProc = _PDFNetPython.Callback_StaticCurrentZoomProc

def Callback_StaticConnectionErrorProc(message, error_code, switch_to_demo, data):
    return _PDFNetPython.Callback_StaticConnectionErrorProc(message, error_code, switch_to_demo, data)
Callback_StaticConnectionErrorProc = _PDFNetPython.Callback_StaticConnectionErrorProc

def Callback_StaticThumbAsyncHandler(page_num, was_thumb_found, thumb_buf, thumb_width, thumb_height, custom_data):
    return _PDFNetPython.Callback_StaticThumbAsyncHandler(page_num, was_thumb_found, thumb_buf, thumb_width, thumb_height, custom_data)
Callback_StaticThumbAsyncHandler = _PDFNetPython.Callback_StaticThumbAsyncHandler

def Callback_StaticRequestRenderInWorkerThread(custom_data):
    return _PDFNetPython.Callback_StaticRequestRenderInWorkerThread(custom_data)
Callback_StaticRequestRenderInWorkerThread = _PDFNetPython.Callback_StaticRequestRenderInWorkerThread

def Callback_StaticFindTextHandler(success, selection, custom_data):
    return _PDFNetPython.Callback_StaticFindTextHandler(success, selection, custom_data)
Callback_StaticFindTextHandler = _PDFNetPython.Callback_StaticFindTextHandler

def Callback_StaticCreateTileProc(customData, buffer, originX, originY, width, height, pageNum, cellNumber, finalRender, predictionRender, tilesRemaining, firstTile, canvasWidth, canvasHeight, cellSideLength, cellPerRow, cellPerCol, thumbnailId):
    return _PDFNetPython.Callback_StaticCreateTileProc(customData, buffer, originX, originY, width, height, pageNum, cellNumber, finalRender, predictionRender, tilesRemaining, firstTile, canvasWidth, canvasHeight, cellSideLength, cellPerRow, cellPerCol, thumbnailId)
Callback_StaticCreateTileProc = _PDFNetPython.Callback_StaticCreateTileProc

def Callback_StaticAnnotBitmapProc(me, operation_type, buffer, width, height, stride, page_num, annot_index, annot_key, x_in_page, y_in_page, x_offset, y_offset, remaining_tiles, sequence_number, x_page_size, y_page_size):
    return _PDFNetPython.Callback_StaticAnnotBitmapProc(me, operation_type, buffer, width, height, stride, page_num, annot_index, annot_key, x_in_page, y_in_page, x_offset, y_offset, remaining_tiles, sequence_number, x_page_size, y_page_size)
Callback_StaticAnnotBitmapProc = _PDFNetPython.Callback_StaticAnnotBitmapProc

def Callback_StaticDeluxeCreateTileProc(me, buffer, width, height, stride, page_num, x_page_loc, y_page_loc, zoomed_page_width, zoomed_page_height, tile_id, x_in_page, y_in_page, canvas_id, remaining_tiles, tile_type, sequence_number):
    return _PDFNetPython.Callback_StaticDeluxeCreateTileProc(me, buffer, width, height, stride, page_num, x_page_loc, y_page_loc, zoomed_page_width, zoomed_page_height, tile_id, x_in_page, y_in_page, canvas_id, remaining_tiles, tile_type, sequence_number)
Callback_StaticDeluxeCreateTileProc = _PDFNetPython.Callback_StaticDeluxeCreateTileProc

def Callback_StaticRemoveTileProc(customData, canvasNumber, cellNumber, thumbnailId, sequenceNumber):
    return _PDFNetPython.Callback_StaticRemoveTileProc(customData, canvasNumber, cellNumber, thumbnailId, sequenceNumber)
Callback_StaticRemoveTileProc = _PDFNetPython.Callback_StaticRemoveTileProc

def Callback_StaticPartDownloadedProc(dlType, doc, pageNum, objNum, message, customData):
    return _PDFNetPython.Callback_StaticPartDownloadedProc(dlType, doc, pageNum, objNum, message, customData)
Callback_StaticPartDownloadedProc = _PDFNetPython.Callback_StaticPartDownloadedProc

class SignatureHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureHandler, name)
    __repr__ = _swig_repr

    def GetName(self):
        return _PDFNetPython.SignatureHandler_GetName(self)

    def AppendData(self, data):
        return _PDFNetPython.SignatureHandler_AppendData(self, data)

    def Reset(self):
        return _PDFNetPython.SignatureHandler_Reset(self)

    def CreateSignature(self):
        return _PDFNetPython.SignatureHandler_CreateSignature(self)

    def Clone(self):
        return _PDFNetPython.SignatureHandler_Clone(self)
    __swig_destroy__ = _PDFNetPython.delete_SignatureHandler
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == SignatureHandler:
            _self = None
        else:
            _self = self
        this = _PDFNetPython.new_SignatureHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _PDFNetPython.disown_SignatureHandler(self)
        return weakref_proxy(self)
SignatureHandler_swigregister = _PDFNetPython.SignatureHandler_swigregister
SignatureHandler_swigregister(SignatureHandler)

class TRN_matrix2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_matrix2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_matrix2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_a"] = _PDFNetPython.TRN_matrix2d_m_a_set
    __swig_getmethods__["m_a"] = _PDFNetPython.TRN_matrix2d_m_a_get
    if _newclass:
        m_a = _swig_property(_PDFNetPython.TRN_matrix2d_m_a_get, _PDFNetPython.TRN_matrix2d_m_a_set)
    __swig_setmethods__["m_b"] = _PDFNetPython.TRN_matrix2d_m_b_set
    __swig_getmethods__["m_b"] = _PDFNetPython.TRN_matrix2d_m_b_get
    if _newclass:
        m_b = _swig_property(_PDFNetPython.TRN_matrix2d_m_b_get, _PDFNetPython.TRN_matrix2d_m_b_set)
    __swig_setmethods__["m_c"] = _PDFNetPython.TRN_matrix2d_m_c_set
    __swig_getmethods__["m_c"] = _PDFNetPython.TRN_matrix2d_m_c_get
    if _newclass:
        m_c = _swig_property(_PDFNetPython.TRN_matrix2d_m_c_get, _PDFNetPython.TRN_matrix2d_m_c_set)
    __swig_setmethods__["m_d"] = _PDFNetPython.TRN_matrix2d_m_d_set
    __swig_getmethods__["m_d"] = _PDFNetPython.TRN_matrix2d_m_d_get
    if _newclass:
        m_d = _swig_property(_PDFNetPython.TRN_matrix2d_m_d_get, _PDFNetPython.TRN_matrix2d_m_d_set)
    __swig_setmethods__["m_h"] = _PDFNetPython.TRN_matrix2d_m_h_set
    __swig_getmethods__["m_h"] = _PDFNetPython.TRN_matrix2d_m_h_get
    if _newclass:
        m_h = _swig_property(_PDFNetPython.TRN_matrix2d_m_h_get, _PDFNetPython.TRN_matrix2d_m_h_set)
    __swig_setmethods__["m_v"] = _PDFNetPython.TRN_matrix2d_m_v_set
    __swig_getmethods__["m_v"] = _PDFNetPython.TRN_matrix2d_m_v_get
    if _newclass:
        m_v = _swig_property(_PDFNetPython.TRN_matrix2d_m_v_get, _PDFNetPython.TRN_matrix2d_m_v_set)

    def __init__(self):
        this = _PDFNetPython.new_TRN_matrix2d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TRN_matrix2d
    __del__ = lambda self: None
TRN_matrix2d_swigregister = _PDFNetPython.TRN_matrix2d_swigregister
TRN_matrix2d_swigregister(TRN_matrix2d)

class TRN_byterange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_byterange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_byterange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_offset"] = _PDFNetPython.TRN_byterange_m_offset_set
    __swig_getmethods__["m_offset"] = _PDFNetPython.TRN_byterange_m_offset_get
    if _newclass:
        m_offset = _swig_property(_PDFNetPython.TRN_byterange_m_offset_get, _PDFNetPython.TRN_byterange_m_offset_set)
    __swig_setmethods__["m_size"] = _PDFNetPython.TRN_byterange_m_size_set
    __swig_getmethods__["m_size"] = _PDFNetPython.TRN_byterange_m_size_get
    if _newclass:
        m_size = _swig_property(_PDFNetPython.TRN_byterange_m_size_get, _PDFNetPython.TRN_byterange_m_size_set)

    def __init__(self):
        this = _PDFNetPython.new_TRN_byterange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TRN_byterange
    __del__ = lambda self: None
TRN_byterange_swigregister = _PDFNetPython.TRN_byterange_swigregister
TRN_byterange_swigregister(TRN_byterange)

class TRN_rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x1"] = _PDFNetPython.TRN_rect_x1_set
    __swig_getmethods__["x1"] = _PDFNetPython.TRN_rect_x1_get
    if _newclass:
        x1 = _swig_property(_PDFNetPython.TRN_rect_x1_get, _PDFNetPython.TRN_rect_x1_set)
    __swig_setmethods__["y1"] = _PDFNetPython.TRN_rect_y1_set
    __swig_getmethods__["y1"] = _PDFNetPython.TRN_rect_y1_get
    if _newclass:
        y1 = _swig_property(_PDFNetPython.TRN_rect_y1_get, _PDFNetPython.TRN_rect_y1_set)
    __swig_setmethods__["x2"] = _PDFNetPython.TRN_rect_x2_set
    __swig_getmethods__["x2"] = _PDFNetPython.TRN_rect_x2_get
    if _newclass:
        x2 = _swig_property(_PDFNetPython.TRN_rect_x2_get, _PDFNetPython.TRN_rect_x2_set)
    __swig_setmethods__["y2"] = _PDFNetPython.TRN_rect_y2_set
    __swig_getmethods__["y2"] = _PDFNetPython.TRN_rect_y2_get
    if _newclass:
        y2 = _swig_property(_PDFNetPython.TRN_rect_y2_get, _PDFNetPython.TRN_rect_y2_set)
    __swig_setmethods__["mp_rect"] = _PDFNetPython.TRN_rect_mp_rect_set
    __swig_getmethods__["mp_rect"] = _PDFNetPython.TRN_rect_mp_rect_get
    if _newclass:
        mp_rect = _swig_property(_PDFNetPython.TRN_rect_mp_rect_get, _PDFNetPython.TRN_rect_mp_rect_set)

    def __init__(self):
        this = _PDFNetPython.new_TRN_rect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TRN_rect
    __del__ = lambda self: None
TRN_rect_swigregister = _PDFNetPython.TRN_rect_swigregister
TRN_rect_swigregister(TRN_rect)

class TRN_date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_date, name)
    __repr__ = _swig_repr
    __swig_setmethods__["year"] = _PDFNetPython.TRN_date_year_set
    __swig_getmethods__["year"] = _PDFNetPython.TRN_date_year_get
    if _newclass:
        year = _swig_property(_PDFNetPython.TRN_date_year_get, _PDFNetPython.TRN_date_year_set)
    __swig_setmethods__["month"] = _PDFNetPython.TRN_date_month_set
    __swig_getmethods__["month"] = _PDFNetPython.TRN_date_month_get
    if _newclass:
        month = _swig_property(_PDFNetPython.TRN_date_month_get, _PDFNetPython.TRN_date_month_set)
    __swig_setmethods__["day"] = _PDFNetPython.TRN_date_day_set
    __swig_getmethods__["day"] = _PDFNetPython.TRN_date_day_get
    if _newclass:
        day = _swig_property(_PDFNetPython.TRN_date_day_get, _PDFNetPython.TRN_date_day_set)
    __swig_setmethods__["hour"] = _PDFNetPython.TRN_date_hour_set
    __swig_getmethods__["hour"] = _PDFNetPython.TRN_date_hour_get
    if _newclass:
        hour = _swig_property(_PDFNetPython.TRN_date_hour_get, _PDFNetPython.TRN_date_hour_set)
    __swig_setmethods__["minute"] = _PDFNetPython.TRN_date_minute_set
    __swig_getmethods__["minute"] = _PDFNetPython.TRN_date_minute_get
    if _newclass:
        minute = _swig_property(_PDFNetPython.TRN_date_minute_get, _PDFNetPython.TRN_date_minute_set)
    __swig_setmethods__["second"] = _PDFNetPython.TRN_date_second_set
    __swig_getmethods__["second"] = _PDFNetPython.TRN_date_second_get
    if _newclass:
        second = _swig_property(_PDFNetPython.TRN_date_second_get, _PDFNetPython.TRN_date_second_set)
    __swig_setmethods__["UT"] = _PDFNetPython.TRN_date_UT_set
    __swig_getmethods__["UT"] = _PDFNetPython.TRN_date_UT_get
    if _newclass:
        UT = _swig_property(_PDFNetPython.TRN_date_UT_get, _PDFNetPython.TRN_date_UT_set)
    __swig_setmethods__["UT_hour"] = _PDFNetPython.TRN_date_UT_hour_set
    __swig_getmethods__["UT_hour"] = _PDFNetPython.TRN_date_UT_hour_get
    if _newclass:
        UT_hour = _swig_property(_PDFNetPython.TRN_date_UT_hour_get, _PDFNetPython.TRN_date_UT_hour_set)
    __swig_setmethods__["UT_minutes"] = _PDFNetPython.TRN_date_UT_minutes_set
    __swig_getmethods__["UT_minutes"] = _PDFNetPython.TRN_date_UT_minutes_get
    if _newclass:
        UT_minutes = _swig_property(_PDFNetPython.TRN_date_UT_minutes_get, _PDFNetPython.TRN_date_UT_minutes_set)
    __swig_setmethods__["mp_obj"] = _PDFNetPython.TRN_date_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython.TRN_date_mp_obj_get
    if _newclass:
        mp_obj = _swig_property(_PDFNetPython.TRN_date_mp_obj_get, _PDFNetPython.TRN_date_mp_obj_set)

    def __init__(self):
        this = _PDFNetPython.new_TRN_date()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TRN_date
    __del__ = lambda self: None
TRN_date_swigregister = _PDFNetPython.TRN_date_swigregister
TRN_date_swigregister(TRN_date)

class TRN_chardata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_chardata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_chardata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["char_code"] = _PDFNetPython.TRN_chardata_char_code_set
    __swig_getmethods__["char_code"] = _PDFNetPython.TRN_chardata_char_code_get
    if _newclass:
        char_code = _swig_property(_PDFNetPython.TRN_chardata_char_code_get, _PDFNetPython.TRN_chardata_char_code_set)
    __swig_setmethods__["x"] = _PDFNetPython.TRN_chardata_x_set
    __swig_getmethods__["x"] = _PDFNetPython.TRN_chardata_x_get
    if _newclass:
        x = _swig_property(_PDFNetPython.TRN_chardata_x_get, _PDFNetPython.TRN_chardata_x_set)
    __swig_setmethods__["y"] = _PDFNetPython.TRN_chardata_y_set
    __swig_getmethods__["y"] = _PDFNetPython.TRN_chardata_y_get
    if _newclass:
        y = _swig_property(_PDFNetPython.TRN_chardata_y_get, _PDFNetPython.TRN_chardata_y_set)
    __swig_setmethods__["char_data"] = _PDFNetPython.TRN_chardata_char_data_set
    __swig_getmethods__["char_data"] = _PDFNetPython.TRN_chardata_char_data_get
    if _newclass:
        char_data = _swig_property(_PDFNetPython.TRN_chardata_char_data_get, _PDFNetPython.TRN_chardata_char_data_set)
    __swig_setmethods__["bytes"] = _PDFNetPython.TRN_chardata_bytes_set
    __swig_getmethods__["bytes"] = _PDFNetPython.TRN_chardata_bytes_get
    if _newclass:
        bytes = _swig_property(_PDFNetPython.TRN_chardata_bytes_get, _PDFNetPython.TRN_chardata_bytes_set)

    def __init__(self):
        this = _PDFNetPython.new_TRN_chardata()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TRN_chardata
    __del__ = lambda self: None
TRN_chardata_swigregister = _PDFNetPython.TRN_chardata_swigregister
TRN_chardata_swigregister(TRN_chardata)

class TRN_point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _PDFNetPython.TRN_point_x_set
    __swig_getmethods__["x"] = _PDFNetPython.TRN_point_x_get
    if _newclass:
        x = _swig_property(_PDFNetPython.TRN_point_x_get, _PDFNetPython.TRN_point_x_set)
    __swig_setmethods__["y"] = _PDFNetPython.TRN_point_y_set
    __swig_getmethods__["y"] = _PDFNetPython.TRN_point_y_get
    if _newclass:
        y = _swig_property(_PDFNetPython.TRN_point_y_get, _PDFNetPython.TRN_point_y_set)

    def __init__(self):
        this = _PDFNetPython.new_TRN_point()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TRN_point
    __del__ = lambda self: None
TRN_point_swigregister = _PDFNetPython.TRN_point_swigregister
TRN_point_swigregister(TRN_point)

class TRN_quadpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRN_quadpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRN_quadpoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1x"] = _PDFNetPython.TRN_quadpoint_p1x_set
    __swig_getmethods__["p1x"] = _PDFNetPython.TRN_quadpoint_p1x_get
    if _newclass:
        p1x = _swig_property(_PDFNetPython.TRN_quadpoint_p1x_get, _PDFNetPython.TRN_quadpoint_p1x_set)
    __swig_setmethods__["p1y"] = _PDFNetPython.TRN_quadpoint_p1y_set
    __swig_getmethods__["p1y"] = _PDFNetPython.TRN_quadpoint_p1y_get
    if _newclass:
        p1y = _swig_property(_PDFNetPython.TRN_quadpoint_p1y_get, _PDFNetPython.TRN_quadpoint_p1y_set)
    __swig_setmethods__["p2x"] = _PDFNetPython.TRN_quadpoint_p2x_set
    __swig_getmethods__["p2x"] = _PDFNetPython.TRN_quadpoint_p2x_get
    if _newclass:
        p2x = _swig_property(_PDFNetPython.TRN_quadpoint_p2x_get, _PDFNetPython.TRN_quadpoint_p2x_set)
    __swig_setmethods__["p2y"] = _PDFNetPython.TRN_quadpoint_p2y_set
    __swig_getmethods__["p2y"] = _PDFNetPython.TRN_quadpoint_p2y_get
    if _newclass:
        p2y = _swig_property(_PDFNetPython.TRN_quadpoint_p2y_get, _PDFNetPython.TRN_quadpoint_p2y_set)
    __swig_setmethods__["p3x"] = _PDFNetPython.TRN_quadpoint_p3x_set
    __swig_getmethods__["p3x"] = _PDFNetPython.TRN_quadpoint_p3x_get
    if _newclass:
        p3x = _swig_property(_PDFNetPython.TRN_quadpoint_p3x_get, _PDFNetPython.TRN_quadpoint_p3x_set)
    __swig_setmethods__["p3y"] = _PDFNetPython.TRN_quadpoint_p3y_set
    __swig_getmethods__["p3y"] = _PDFNetPython.TRN_quadpoint_p3y_get
    if _newclass:
        p3y = _swig_property(_PDFNetPython.TRN_quadpoint_p3y_get, _PDFNetPython.TRN_quadpoint_p3y_set)
    __swig_setmethods__["p4x"] = _PDFNetPython.TRN_quadpoint_p4x_set
    __swig_getmethods__["p4x"] = _PDFNetPython.TRN_quadpoint_p4x_get
    if _newclass:
        p4x = _swig_property(_PDFNetPython.TRN_quadpoint_p4x_get, _PDFNetPython.TRN_quadpoint_p4x_set)
    __swig_setmethods__["p4y"] = _PDFNetPython.TRN_quadpoint_p4y_set
    __swig_getmethods__["p4y"] = _PDFNetPython.TRN_quadpoint_p4y_get
    if _newclass:
        p4y = _swig_property(_PDFNetPython.TRN_quadpoint_p4y_get, _PDFNetPython.TRN_quadpoint_p4y_set)

    def __init__(self):
        this = _PDFNetPython.new_TRN_quadpoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TRN_quadpoint
    __del__ = lambda self: None
TRN_quadpoint_swigregister = _PDFNetPython.TRN_quadpoint_swigregister
TRN_quadpoint_swigregister(TRN_quadpoint)

class Matrix2D(TRN_matrix2d):
    __swig_setmethods__ = {}
    for _s in [TRN_matrix2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2D, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_matrix2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_Matrix2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, a, b, c, d, h, v):
        return _PDFNetPython.Matrix2D_Set(self, a, b, c, d, h, v)

    def Concat(self, a, b, c, d, h, v):
        return _PDFNetPython.Matrix2D_Concat(self, a, b, c, d, h, v)

    def Multiply(self, m):
        return _PDFNetPython.Matrix2D_Multiply(self, m)

    def IsEquals(self, m):
        return _PDFNetPython.Matrix2D_IsEquals(self, m)

    def IsNotEquals(self, m):
        return _PDFNetPython.Matrix2D_IsNotEquals(self, m)

    def Mult(self, pt):
        return _PDFNetPython.Matrix2D_Mult(self, pt)

    def Inverse(self):
        return _PDFNetPython.Matrix2D_Inverse(self)

    def Translate(self, h, v):
        return _PDFNetPython.Matrix2D_Translate(self, h, v)

    def PreTranslate(self, h, v):
        return _PDFNetPython.Matrix2D_PreTranslate(self, h, v)

    def PostTranslate(self, h, v):
        return _PDFNetPython.Matrix2D_PostTranslate(self, h, v)

    def Scale(self, h, v):
        return _PDFNetPython.Matrix2D_Scale(self, h, v)
    if _newclass:
        ZeroMatrix = staticmethod(_PDFNetPython.Matrix2D_ZeroMatrix)
    else:
        ZeroMatrix = _PDFNetPython.Matrix2D_ZeroMatrix
    if _newclass:
        IdentityMatrix = staticmethod(_PDFNetPython.Matrix2D_IdentityMatrix)
    else:
        IdentityMatrix = _PDFNetPython.Matrix2D_IdentityMatrix
    if _newclass:
        RotationMatrix = staticmethod(_PDFNetPython.Matrix2D_RotationMatrix)
    else:
        RotationMatrix = _PDFNetPython.Matrix2D_RotationMatrix
    __swig_destroy__ = _PDFNetPython.delete_Matrix2D
    __del__ = lambda self: None
Matrix2D_swigregister = _PDFNetPython.Matrix2D_swigregister
Matrix2D_swigregister(Matrix2D)

def Matrix2D_ZeroMatrix():
    return _PDFNetPython.Matrix2D_ZeroMatrix()
Matrix2D_ZeroMatrix = _PDFNetPython.Matrix2D_ZeroMatrix

def Matrix2D_IdentityMatrix():
    return _PDFNetPython.Matrix2D_IdentityMatrix()
Matrix2D_IdentityMatrix = _PDFNetPython.Matrix2D_IdentityMatrix

def Matrix2D_RotationMatrix(angle):
    return _PDFNetPython.Matrix2D_RotationMatrix(angle)
Matrix2D_RotationMatrix = _PDFNetPython.Matrix2D_RotationMatrix

class GSChangesIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSChangesIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GSChangesIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_GSChangesIterator
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.GSChangesIterator_Destroy(self)

    def Next(self):
        return _PDFNetPython.GSChangesIterator_Next(self)

    def Current(self):
        return _PDFNetPython.GSChangesIterator_Current(self)

    def HasNext(self):
        return _PDFNetPython.GSChangesIterator_HasNext(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_GSChangesIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.GSChangesIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.GSChangesIterator_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.GSChangesIterator_mp_impl_get, _PDFNetPython.GSChangesIterator_mp_impl_set)
GSChangesIterator_swigregister = _PDFNetPython.GSChangesIterator_swigregister
GSChangesIterator_swigregister(GSChangesIterator)

class UInt32Iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Iterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_UInt32Iterator
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.UInt32Iterator_Destroy(self)

    def Next(self):
        return _PDFNetPython.UInt32Iterator_Next(self)

    def Current(self):
        return _PDFNetPython.UInt32Iterator_Current(self)

    def HasNext(self):
        return _PDFNetPython.UInt32Iterator_HasNext(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_UInt32Iterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.UInt32Iterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.UInt32Iterator_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.UInt32Iterator_mp_impl_get, _PDFNetPython.UInt32Iterator_mp_impl_set)
UInt32Iterator_swigregister = _PDFNetPython.UInt32Iterator_swigregister
UInt32Iterator_swigregister(UInt32Iterator)

class PageIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_PageIterator
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.PageIterator_Destroy(self)

    def Next(self):
        return _PDFNetPython.PageIterator_Next(self)

    def Current(self):
        return _PDFNetPython.PageIterator_Current(self)

    def HasNext(self):
        return _PDFNetPython.PageIterator_HasNext(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_PageIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.PageIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.PageIterator_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.PageIterator_mp_impl_get, _PDFNetPython.PageIterator_mp_impl_set)
PageIterator_swigregister = _PDFNetPython.PageIterator_swigregister
PageIterator_swigregister(PageIterator)

class FDFFieldIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDFFieldIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FDFFieldIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_FDFFieldIterator
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.FDFFieldIterator_Destroy(self)

    def Next(self):
        return _PDFNetPython.FDFFieldIterator_Next(self)

    def Current(self):
        return _PDFNetPython.FDFFieldIterator_Current(self)

    def HasNext(self):
        return _PDFNetPython.FDFFieldIterator_HasNext(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_FDFFieldIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.FDFFieldIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.FDFFieldIterator_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.FDFFieldIterator_mp_impl_get, _PDFNetPython.FDFFieldIterator_mp_impl_set)
FDFFieldIterator_swigregister = _PDFNetPython.FDFFieldIterator_swigregister
FDFFieldIterator_swigregister(FDFFieldIterator)

class FieldIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_FieldIterator
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.FieldIterator_Destroy(self)

    def Next(self):
        return _PDFNetPython.FieldIterator_Next(self)

    def Current(self):
        return _PDFNetPython.FieldIterator_Current(self)

    def HasNext(self):
        return _PDFNetPython.FieldIterator_HasNext(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_FieldIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.FieldIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.FieldIterator_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.FieldIterator_mp_impl_get, _PDFNetPython.FieldIterator_mp_impl_set)
FieldIterator_swigregister = _PDFNetPython.FieldIterator_swigregister
FieldIterator_swigregister(FieldIterator)

class CharIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_CharIterator
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.CharIterator_Destroy(self)

    def Next(self):
        return _PDFNetPython.CharIterator_Next(self)

    def Current(self):
        return _PDFNetPython.CharIterator_Current(self)

    def HasNext(self):
        return _PDFNetPython.CharIterator_HasNext(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_CharIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.CharIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.CharIterator_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.CharIterator_mp_impl_get, _PDFNetPython.CharIterator_mp_impl_set)
CharIterator_swigregister = _PDFNetPython.CharIterator_swigregister
CharIterator_swigregister(CharIterator)

class DigitalSignatureFieldIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DigitalSignatureFieldIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DigitalSignatureFieldIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_DigitalSignatureFieldIterator
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.DigitalSignatureFieldIterator_Destroy(self)

    def Next(self):
        return _PDFNetPython.DigitalSignatureFieldIterator_Next(self)

    def Current(self):
        return _PDFNetPython.DigitalSignatureFieldIterator_Current(self)

    def HasNext(self):
        return _PDFNetPython.DigitalSignatureFieldIterator_HasNext(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_DigitalSignatureFieldIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.DigitalSignatureFieldIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.DigitalSignatureFieldIterator_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.DigitalSignatureFieldIterator_mp_impl_get, _PDFNetPython.DigitalSignatureFieldIterator_mp_impl_set)
DigitalSignatureFieldIterator_swigregister = _PDFNetPython.DigitalSignatureFieldIterator_swigregister
DigitalSignatureFieldIterator_swigregister(DigitalSignatureFieldIterator)

class Filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_Filter
    __del__ = lambda self: None

    def __nonzero__(self):
        return _PDFNetPython.Filter___nonzero__(self)
    __bool__ = __nonzero__



    def AttachFilter(self, attach_filter):
        return _PDFNetPython.Filter_AttachFilter(self, attach_filter)

    def ReleaseAttachedFilter(self):
        return _PDFNetPython.Filter_ReleaseAttachedFilter(self)

    def GetAttachedFilter(self):
        return _PDFNetPython.Filter_GetAttachedFilter(self)

    def GetSourceFilter(self):
        return _PDFNetPython.Filter_GetSourceFilter(self)

    def GetName(self):
        return _PDFNetPython.Filter_GetName(self)

    def GetDecodeName(self):
        return _PDFNetPython.Filter_GetDecodeName(self)

    def Size(self):
        return _PDFNetPython.Filter_Size(self)

    def Consume(self, num_bytes):
        return _PDFNetPython.Filter_Consume(self, num_bytes)

    def Count(self):
        return _PDFNetPython.Filter_Count(self)

    def SetCount(self, new_count):
        return _PDFNetPython.Filter_SetCount(self, new_count)

    def SetStreamLength(self, bytes):
        return _PDFNetPython.Filter_SetStreamLength(self, bytes)

    def Flush(self):
        return _PDFNetPython.Filter_Flush(self)

    def FlushAll(self):
        return _PDFNetPython.Filter_FlushAll(self)

    def IsInputFilter(self):
        return _PDFNetPython.Filter_IsInputFilter(self)

    def CanSeek(self):
        return _PDFNetPython.Filter_CanSeek(self)
    e_begin = _PDFNetPython.Filter_e_begin
    e_end = _PDFNetPython.Filter_e_end
    e_cur = _PDFNetPython.Filter_e_cur

    def Seek(self, offset, origin):
        return _PDFNetPython.Filter_Seek(self, offset, origin)

    def Tell(self):
        return _PDFNetPython.Filter_Tell(self)

    def CreateInputIterator(self):
        return _PDFNetPython.Filter_CreateInputIterator(self)

    def GetFilePath(self):
        return _PDFNetPython.Filter_GetFilePath(self)

    def Destroy(self):
        return _PDFNetPython.Filter_Destroy(self)

    def WriteToFile(self, path, append):
        return _PDFNetPython.Filter_WriteToFile(self, path, append)
    __swig_setmethods__["m_impl"] = _PDFNetPython.Filter_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.Filter_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.Filter_m_impl_get, _PDFNetPython.Filter_m_impl_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_Filter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_owner"] = _PDFNetPython.Filter_m_owner_set
    __swig_getmethods__["m_owner"] = _PDFNetPython.Filter_m_owner_get
    if _newclass:
        m_owner = _swig_property(_PDFNetPython.Filter_m_owner_get, _PDFNetPython.Filter_m_owner_set)
Filter_swigregister = _PDFNetPython.Filter_swigregister
Filter_swigregister(Filter)

class ASCII85Encode(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASCII85Encode, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ASCII85Encode, name)
    __repr__ = _swig_repr

    def __init__(self, input_filter, line_width=72, buf_sz=256):
        this = _PDFNetPython.new_ASCII85Encode(input_filter, line_width, buf_sz)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_ASCII85Encode
    __del__ = lambda self: None
ASCII85Encode_swigregister = _PDFNetPython.ASCII85Encode_swigregister
ASCII85Encode_swigregister(ASCII85Encode)

class FilterReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_FilterReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_FilterReader
    __del__ = lambda self: None

    def Get(self):
        return _PDFNetPython.FilterReader_Get(self)

    def Peek(self):
        return _PDFNetPython.FilterReader_Peek(self)

    def Read(self, buf_size):
        return _PDFNetPython.FilterReader_Read(self, buf_size)

    def AttachFilter(self, filter):
        return _PDFNetPython.FilterReader_AttachFilter(self, filter)

    def GetAttachedFilter(self):
        return _PDFNetPython.FilterReader_GetAttachedFilter(self)

    def Seek(self, offset, origin):
        return _PDFNetPython.FilterReader_Seek(self, offset, origin)

    def Tell(self):
        return _PDFNetPython.FilterReader_Tell(self)

    def Count(self):
        return _PDFNetPython.FilterReader_Count(self)

    def Flush(self):
        return _PDFNetPython.FilterReader_Flush(self)

    def FlushAll(self):
        return _PDFNetPython.FilterReader_FlushAll(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython.FilterReader_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.FilterReader_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.FilterReader_m_impl_get, _PDFNetPython.FilterReader_m_impl_set)
FilterReader_swigregister = _PDFNetPython.FilterReader_swigregister
FilterReader_swigregister(FilterReader)

class FilterWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterWriter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_FilterWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_FilterWriter
    __del__ = lambda self: None

    def WriteUChar(self, ch):
        return _PDFNetPython.FilterWriter_WriteUChar(self, ch)

    def WriteInt16(self, num):
        return _PDFNetPython.FilterWriter_WriteInt16(self, num)

    def WriteUInt16(self, num):
        return _PDFNetPython.FilterWriter_WriteUInt16(self, num)

    def WriteInt32(self, num):
        return _PDFNetPython.FilterWriter_WriteInt32(self, num)

    def WriteUInt32(self, num):
        return _PDFNetPython.FilterWriter_WriteUInt32(self, num)

    def WriteInt64(self, num):
        return _PDFNetPython.FilterWriter_WriteInt64(self, num)

    def WriteUInt64(self, num):
        return _PDFNetPython.FilterWriter_WriteUInt64(self, num)

    def WriteString(self, *args):
        return _PDFNetPython.FilterWriter_WriteString(self, *args)

    def WriteFilter(self, reader):
        return _PDFNetPython.FilterWriter_WriteFilter(self, reader)

    def WriteLine(self, line, eol=0x0D):
        return _PDFNetPython.FilterWriter_WriteLine(self, line, eol)

    def WriteBuffer(self, buf):
        return _PDFNetPython.FilterWriter_WriteBuffer(self, buf)

    def AttachFilter(self, filter):
        return _PDFNetPython.FilterWriter_AttachFilter(self, filter)

    def GetAttachedFilter(self):
        return _PDFNetPython.FilterWriter_GetAttachedFilter(self)

    def Seek(self, offset, origin):
        return _PDFNetPython.FilterWriter_Seek(self, offset, origin)

    def Tell(self):
        return _PDFNetPython.FilterWriter_Tell(self)

    def Count(self):
        return _PDFNetPython.FilterWriter_Count(self)

    def Flush(self):
        return _PDFNetPython.FilterWriter_Flush(self)

    def FlushAll(self):
        return _PDFNetPython.FilterWriter_FlushAll(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython.FilterWriter_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.FilterWriter_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.FilterWriter_m_impl_get, _PDFNetPython.FilterWriter_m_impl_set)
FilterWriter_swigregister = _PDFNetPython.FilterWriter_swigregister
FilterWriter_swigregister(FilterWriter)

class FlateEncode(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlateEncode, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlateEncode, name)
    __repr__ = _swig_repr

    def __init__(self, input_filter, compression_level=-1, buf_sz=256):
        this = _PDFNetPython.new_FlateEncode(input_filter, compression_level, buf_sz)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_FlateEncode
    __del__ = lambda self: None
FlateEncode_swigregister = _PDFNetPython.FlateEncode_swigregister
FlateEncode_swigregister(FlateEncode)

class MappedFile(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MappedFile, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MappedFile, name)
    __repr__ = _swig_repr

    def __init__(self, filename):
        this = _PDFNetPython.new_MappedFile(filename)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, f):
        return _PDFNetPython.MappedFile___eq__(self, f)
    if _newclass:
        Equivalent = staticmethod(_PDFNetPython.MappedFile_Equivalent)
    else:
        Equivalent = _PDFNetPython.MappedFile_Equivalent

    def FileSize(self):
        return _PDFNetPython.MappedFile_FileSize(self)
    __swig_destroy__ = _PDFNetPython.delete_MappedFile
    __del__ = lambda self: None
MappedFile_swigregister = _PDFNetPython.MappedFile_swigregister
MappedFile_swigregister(MappedFile)

def MappedFile_Equivalent(ph1, ph2):
    return _PDFNetPython.MappedFile_Equivalent(ph1, ph2)
MappedFile_Equivalent = _PDFNetPython.MappedFile_Equivalent

class MemoryFilter(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryFilter, name)
    __repr__ = _swig_repr

    def __init__(self, buf_sz, is_input):
        this = _PDFNetPython.new_MemoryFilter(buf_sz, is_input)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetBuffer(self):
        return _PDFNetPython.MemoryFilter_GetBuffer(self)

    def SetAsInputFilter(self):
        return _PDFNetPython.MemoryFilter_SetAsInputFilter(self)
    __swig_destroy__ = _PDFNetPython.delete_MemoryFilter
    __del__ = lambda self: None
MemoryFilter_swigregister = _PDFNetPython.MemoryFilter_swigregister
MemoryFilter_swigregister(MemoryFilter)

class DictIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DictIterator, name)
    __repr__ = _swig_repr

    def Next(self):
        return _PDFNetPython.DictIterator_Next(self)

    def Key(self):
        return _PDFNetPython.DictIterator_Key(self)

    def Value(self):
        return _PDFNetPython.DictIterator_Value(self)

    def HasNext(self):
        return _PDFNetPython.DictIterator_HasNext(self)
    __swig_destroy__ = _PDFNetPython.delete_DictIterator
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.DictIterator_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_DictIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.DictIterator_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.DictIterator_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.DictIterator_mp_impl_get, _PDFNetPython.DictIterator_mp_impl_set)
DictIterator_swigregister = _PDFNetPython.DictIterator_swigregister
DictIterator_swigregister(DictIterator)

class SDFDoc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDFDoc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDFDoc, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_SDFDoc
    __del__ = lambda self: None

    def Close(self):
        return _PDFNetPython.SDFDoc_Close(self)

    def IsEncrypted(self):
        return _PDFNetPython.SDFDoc_IsEncrypted(self)

    def InitSecurityHandler(self):
        return _PDFNetPython.SDFDoc_InitSecurityHandler(self)

    def InitStdSecurityHandler(self, *args):
        return _PDFNetPython.SDFDoc_InitStdSecurityHandler(self, *args)

    def IsModified(self):
        return _PDFNetPython.SDFDoc_IsModified(self)

    def HasRepairedXRef(self):
        return _PDFNetPython.SDFDoc_HasRepairedXRef(self)

    def IsFullSaveRequired(self):
        return _PDFNetPython.SDFDoc_IsFullSaveRequired(self)

    def GetTrailer(self):
        return _PDFNetPython.SDFDoc_GetTrailer(self)

    def GetObj(self, obj_num):
        return _PDFNetPython.SDFDoc_GetObj(self, obj_num)

    def ImportObj(self, obj, deep_copy):
        return _PDFNetPython.SDFDoc_ImportObj(self, obj, deep_copy)

    def ImportObjs(self, *args):
        return _PDFNetPython.SDFDoc_ImportObjs(self, *args)

    def XRefSize(self):
        return _PDFNetPython.SDFDoc_XRefSize(self)

    def ClearMarks(self):
        return _PDFNetPython.SDFDoc_ClearMarks(self)
    e_incremental = _PDFNetPython.SDFDoc_e_incremental
    e_remove_unused = _PDFNetPython.SDFDoc_e_remove_unused
    e_hex_strings = _PDFNetPython.SDFDoc_e_hex_strings
    e_omit_xref = _PDFNetPython.SDFDoc_e_omit_xref
    e_linearized = _PDFNetPython.SDFDoc_e_linearized
    e_compatibility = _PDFNetPython.SDFDoc_e_compatibility

    def Save(self, *args):
        return _PDFNetPython.SDFDoc_Save(self, *args)

    def GetHeader(self):
        return _PDFNetPython.SDFDoc_GetHeader(self)

    def GetSecurityHandler(self):
        return _PDFNetPython.SDFDoc_GetSecurityHandler(self)

    def SetSecurityHandler(self, handler):
        return _PDFNetPython.SDFDoc_SetSecurityHandler(self, handler)

    def RemoveSecurity(self):
        return _PDFNetPython.SDFDoc_RemoveSecurity(self)

    def Swap(self, obj_num1, obj_num2):
        return _PDFNetPython.SDFDoc_Swap(self, obj_num1, obj_num2)

    def CreateIndirectName(self, name):
        return _PDFNetPython.SDFDoc_CreateIndirectName(self, name)

    def CreateIndirectArray(self):
        return _PDFNetPython.SDFDoc_CreateIndirectArray(self)

    def CreateIndirectBool(self, value):
        return _PDFNetPython.SDFDoc_CreateIndirectBool(self, value)

    def CreateIndirectDict(self):
        return _PDFNetPython.SDFDoc_CreateIndirectDict(self)

    def CreateIndirectNull(self):
        return _PDFNetPython.SDFDoc_CreateIndirectNull(self)

    def CreateIndirectNumber(self, value):
        return _PDFNetPython.SDFDoc_CreateIndirectNumber(self, value)

    def CreateIndirectString(self, *args):
        return _PDFNetPython.SDFDoc_CreateIndirectString(self, *args)

    def CreateIndirectStream(self, *args):
        return _PDFNetPython.SDFDoc_CreateIndirectStream(self, *args)

    def IsLinearized(self):
        return _PDFNetPython.SDFDoc_IsLinearized(self)

    def GetLinearizationDict(self):
        return _PDFNetPython.SDFDoc_GetLinearizationDict(self)

    def GetHintStream(self):
        return _PDFNetPython.SDFDoc_GetHintStream(self)

    def Lock(self):
        return _PDFNetPython.SDFDoc_Lock(self)

    def Unlock(self):
        return _PDFNetPython.SDFDoc_Unlock(self)

    def TryLock(self, milliseconds=0):
        return _PDFNetPython.SDFDoc_TryLock(self, milliseconds)

    def LockRead(self):
        return _PDFNetPython.SDFDoc_LockRead(self)

    def UnlockRead(self):
        return _PDFNetPython.SDFDoc_UnlockRead(self)

    def TryLockRead(self, milliseconds=0):
        return _PDFNetPython.SDFDoc_TryLockRead(self, milliseconds)

    def GetFileName(self):
        return _PDFNetPython.SDFDoc_GetFileName(self)

    def EnableDiskCaching(self, use_cache_flag):
        return _PDFNetPython.SDFDoc_EnableDiskCaching(self, use_cache_flag)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.SDFDoc_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.SDFDoc_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.SDFDoc_GetHandleInternal(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_SDFDoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_doc"] = _PDFNetPython.SDFDoc_mp_doc_set
    __swig_getmethods__["mp_doc"] = _PDFNetPython.SDFDoc_mp_doc_get
    if _newclass:
        mp_doc = _swig_property(_PDFNetPython.SDFDoc_mp_doc_get, _PDFNetPython.SDFDoc_mp_doc_set)
SDFDoc_swigregister = _PDFNetPython.SDFDoc_swigregister
SDFDoc_swigregister(SDFDoc)

def SDFDoc_CreateInternal(impl):
    return _PDFNetPython.SDFDoc_CreateInternal(impl)
SDFDoc_CreateInternal = _PDFNetPython.SDFDoc_CreateInternal

class NameTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NameTree, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.NameTree_Create)
    else:
        Create = _PDFNetPython.NameTree_Create
    if _newclass:
        Find = staticmethod(_PDFNetPython.NameTree_Find)
    else:
        Find = _PDFNetPython.NameTree_Find

    def __init__(self, *args):
        this = _PDFNetPython.new_NameTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsValid(self):
        return _PDFNetPython.NameTree_IsValid(self)

    def GetIterator(self, *args):
        return _PDFNetPython.NameTree_GetIterator(self, *args)

    def GetValue(self, key, key_sz):
        return _PDFNetPython.NameTree_GetValue(self, key, key_sz)

    def Put(self, key, key_sz, value):
        return _PDFNetPython.NameTree_Put(self, key, key_sz, value)

    def Erase(self, *args):
        return _PDFNetPython.NameTree_Erase(self, *args)

    def GetSDFObj(self):
        return _PDFNetPython.NameTree_GetSDFObj(self)
    __swig_destroy__ = _PDFNetPython.delete_NameTree
    __del__ = lambda self: None
NameTree_swigregister = _PDFNetPython.NameTree_swigregister
NameTree_swigregister(NameTree)

def NameTree_Create(doc, name):
    return _PDFNetPython.NameTree_Create(doc, name)
NameTree_Create = _PDFNetPython.NameTree_Create

def NameTree_Find(doc, name):
    return _PDFNetPython.NameTree_Find(doc, name)
NameTree_Find = _PDFNetPython.NameTree_Find

class NumberTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumberTree, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_NumberTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsValid(self):
        return _PDFNetPython.NumberTree_IsValid(self)

    def GetIterator(self, *args):
        return _PDFNetPython.NumberTree_GetIterator(self, *args)

    def GetValue(self, key):
        return _PDFNetPython.NumberTree_GetValue(self, key)

    def Put(self, key, value):
        return _PDFNetPython.NumberTree_Put(self, key, value)

    def Erase(self, *args):
        return _PDFNetPython.NumberTree_Erase(self, *args)

    def GetSDFObj(self):
        return _PDFNetPython.NumberTree_GetSDFObj(self)
    __swig_destroy__ = _PDFNetPython.delete_NumberTree
    __del__ = lambda self: None
NumberTree_swigregister = _PDFNetPython.NumberTree_swigregister
NumberTree_swigregister(NumberTree)

class Obj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Obj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Obj, name)
    __repr__ = _swig_repr
    e_null = _PDFNetPython.Obj_e_null
    e_bool = _PDFNetPython.Obj_e_bool
    e_number = _PDFNetPython.Obj_e_number
    e_name = _PDFNetPython.Obj_e_name
    e_string = _PDFNetPython.Obj_e_string
    e_dict = _PDFNetPython.Obj_e_dict
    e_array = _PDFNetPython.Obj_e_array
    e_stream = _PDFNetPython.Obj_e_stream

    def GetType(self):
        return _PDFNetPython.Obj_GetType(self)

    def IsBool(self):
        return _PDFNetPython.Obj_IsBool(self)

    def IsNumber(self):
        return _PDFNetPython.Obj_IsNumber(self)

    def IsNull(self):
        return _PDFNetPython.Obj_IsNull(self)

    def IsString(self):
        return _PDFNetPython.Obj_IsString(self)

    def IsName(self):
        return _PDFNetPython.Obj_IsName(self)

    def IsIndirect(self):
        return _PDFNetPython.Obj_IsIndirect(self)

    def IsContainer(self):
        return _PDFNetPython.Obj_IsContainer(self)

    def IsDict(self):
        return _PDFNetPython.Obj_IsDict(self)

    def IsArray(self):
        return _PDFNetPython.Obj_IsArray(self)

    def IsStream(self):
        return _PDFNetPython.Obj_IsStream(self)

    def GetDoc(self):
        return _PDFNetPython.Obj_GetDoc(self)

    def Write(self, stream):
        return _PDFNetPython.Obj_Write(self, stream)

    def Size(self):
        return _PDFNetPython.Obj_Size(self)

    def GetObjNum(self):
        return _PDFNetPython.Obj_GetObjNum(self)

    def GetGenNum(self):
        return _PDFNetPython.Obj_GetGenNum(self)

    def GetOffset(self):
        return _PDFNetPython.Obj_GetOffset(self)

    def IsFree(self):
        return _PDFNetPython.Obj_IsFree(self)

    def SetMark(self, mark):
        return _PDFNetPython.Obj_SetMark(self, mark)

    def IsMarked(self):
        return _PDFNetPython.Obj_IsMarked(self)

    def IsLoaded(self):
        return _PDFNetPython.Obj_IsLoaded(self)

    def IsValid(self):
        return _PDFNetPython.Obj_IsValid(self)

    def GetBool(self):
        return _PDFNetPython.Obj_GetBool(self)

    def SetBool(self, b):
        return _PDFNetPython.Obj_SetBool(self, b)

    def GetNumber(self):
        return _PDFNetPython.Obj_GetNumber(self)

    def SetNumber(self, n):
        return _PDFNetPython.Obj_SetNumber(self, n)

    def GetBuffer(self):
        return _PDFNetPython.Obj_GetBuffer(self)

    def GetRawBuffer(self):
        return _PDFNetPython.Obj_GetRawBuffer(self)

    def GetAsPDFText(self):
        return _PDFNetPython.Obj_GetAsPDFText(self)

    def SetString(self, *args):
        return _PDFNetPython.Obj_SetString(self, *args)

    def GetName(self):
        return _PDFNetPython.Obj_GetName(self)

    def SetName(self, name):
        return _PDFNetPython.Obj_SetName(self, name)

    def GetDictIterator(self):
        return _PDFNetPython.Obj_GetDictIterator(self)

    def Find(self, key):
        return _PDFNetPython.Obj_Find(self, key)

    def FindObj(self, key):
        return _PDFNetPython.Obj_FindObj(self, key)

    def Get(self, key):
        return _PDFNetPython.Obj_Get(self, key)

    def PutName(self, key, name):
        return _PDFNetPython.Obj_PutName(self, key, name)

    def PutArray(self, key):
        return _PDFNetPython.Obj_PutArray(self, key)

    def PutBool(self, key, value):
        return _PDFNetPython.Obj_PutBool(self, key, value)

    def PutDict(self, key):
        return _PDFNetPython.Obj_PutDict(self, key)

    def PutNumber(self, key, value):
        return _PDFNetPython.Obj_PutNumber(self, key, value)

    def PutString(self, *args):
        return _PDFNetPython.Obj_PutString(self, *args)

    def PutText(self, key, value):
        return _PDFNetPython.Obj_PutText(self, key, value)

    def PutNull(self, key):
        return _PDFNetPython.Obj_PutNull(self, key)

    def Put(self, key, obj):
        return _PDFNetPython.Obj_Put(self, key, obj)

    def PutRect(self, key, x1, y1, x2, y2):
        return _PDFNetPython.Obj_PutRect(self, key, x1, y1, x2, y2)

    def PutMatrix(self, key, value):
        return _PDFNetPython.Obj_PutMatrix(self, key, value)

    def Erase(self, *args):
        return _PDFNetPython.Obj_Erase(self, *args)

    def Rename(self, old_key, new_key):
        return _PDFNetPython.Obj_Rename(self, old_key, new_key)

    def GetAt(self, index):
        return _PDFNetPython.Obj_GetAt(self, index)

    def InsertName(self, pos, name):
        return _PDFNetPython.Obj_InsertName(self, pos, name)

    def InsertArray(self, pos):
        return _PDFNetPython.Obj_InsertArray(self, pos)

    def InsertBool(self, pos, value):
        return _PDFNetPython.Obj_InsertBool(self, pos, value)

    def InsertDict(self, pos):
        return _PDFNetPython.Obj_InsertDict(self, pos)

    def InsertNumber(self, pos, value):
        return _PDFNetPython.Obj_InsertNumber(self, pos, value)

    def InsertString(self, *args):
        return _PDFNetPython.Obj_InsertString(self, *args)

    def InsertText(self, pos, value):
        return _PDFNetPython.Obj_InsertText(self, pos, value)

    def InsertNull(self, pos):
        return _PDFNetPython.Obj_InsertNull(self, pos)

    def Insert(self, pos, obj):
        return _PDFNetPython.Obj_Insert(self, pos, obj)

    def InsertRect(self, pos, x1, y1, x2, y2):
        return _PDFNetPython.Obj_InsertRect(self, pos, x1, y1, x2, y2)

    def InsertMatrix(self, pos, value):
        return _PDFNetPython.Obj_InsertMatrix(self, pos, value)

    def PushBackName(self, name):
        return _PDFNetPython.Obj_PushBackName(self, name)

    def PushBackArray(self):
        return _PDFNetPython.Obj_PushBackArray(self)

    def PushBackBool(self, value):
        return _PDFNetPython.Obj_PushBackBool(self, value)

    def PushBackDict(self):
        return _PDFNetPython.Obj_PushBackDict(self)

    def PushBackNumber(self, value):
        return _PDFNetPython.Obj_PushBackNumber(self, value)

    def PushBackString(self, *args):
        return _PDFNetPython.Obj_PushBackString(self, *args)

    def PushBackText(self, value):
        return _PDFNetPython.Obj_PushBackText(self, value)

    def PushBackNull(self):
        return _PDFNetPython.Obj_PushBackNull(self)

    def PushBack(self, obj):
        return _PDFNetPython.Obj_PushBack(self, obj)

    def PushBackRect(self, x1, y1, x2, y2):
        return _PDFNetPython.Obj_PushBackRect(self, x1, y1, x2, y2)

    def PushBackMatrix(self, value):
        return _PDFNetPython.Obj_PushBackMatrix(self, value)

    def EraseAt(self, pos):
        return _PDFNetPython.Obj_EraseAt(self, pos)

    def GetRawStreamLength(self):
        return _PDFNetPython.Obj_GetRawStreamLength(self)

    def GetRawStream(self, decrypt):
        return _PDFNetPython.Obj_GetRawStream(self, decrypt)

    def GetDecodedStream(self):
        return _PDFNetPython.Obj_GetDecodedStream(self)

    def SetStreamData(self, *args):
        return _PDFNetPython.Obj_SetStreamData(self, *args)

    def __nonzero__(self):
        return _PDFNetPython.Obj___nonzero__(self)
    __bool__ = __nonzero__



    def IsEqual(self, to):
        return _PDFNetPython.Obj_IsEqual(self, to)

    def __eq__(self, to):
        return _PDFNetPython.Obj___eq__(self, to)

    def __lt__(self, to):
        return _PDFNetPython.Obj___lt__(self, to)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.Obj_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.Obj_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.Obj_GetHandleInternal(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Obj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython.Obj_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython.Obj_mp_obj_get
    if _newclass:
        mp_obj = _swig_property(_PDFNetPython.Obj_mp_obj_get, _PDFNetPython.Obj_mp_obj_set)
    __swig_destroy__ = _PDFNetPython.delete_Obj
    __del__ = lambda self: None
Obj_swigregister = _PDFNetPython.Obj_swigregister
Obj_swigregister(Obj)

def Obj_CreateInternal(impl):
    return _PDFNetPython.Obj_CreateInternal(impl)
Obj_CreateInternal = _PDFNetPython.Obj_CreateInternal

class ObjSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjSet, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_ObjSet
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PDFNetPython.new_ObjSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateName(self, name):
        return _PDFNetPython.ObjSet_CreateName(self, name)

    def CreateArray(self):
        return _PDFNetPython.ObjSet_CreateArray(self)

    def CreateBool(self, value):
        return _PDFNetPython.ObjSet_CreateBool(self, value)

    def CreateDict(self):
        return _PDFNetPython.ObjSet_CreateDict(self)

    def CreateNull(self):
        return _PDFNetPython.ObjSet_CreateNull(self)

    def CreateNumber(self, value):
        return _PDFNetPython.ObjSet_CreateNumber(self, value)

    def CreateString(self, value):
        return _PDFNetPython.ObjSet_CreateString(self, value)

    def CreateFromJson(self, value):
        return _PDFNetPython.ObjSet_CreateFromJson(self, value)

    def Destroy(self):
        return _PDFNetPython.ObjSet_Destroy(self)
ObjSet_swigregister = _PDFNetPython.ObjSet_swigregister
ObjSet_swigregister(ObjSet)

class SecurityHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityHandler, name)
    __repr__ = _swig_repr
    e_owner = _PDFNetPython.SecurityHandler_e_owner
    e_doc_open = _PDFNetPython.SecurityHandler_e_doc_open
    e_doc_modify = _PDFNetPython.SecurityHandler_e_doc_modify
    e_print = _PDFNetPython.SecurityHandler_e_print
    e_print_high = _PDFNetPython.SecurityHandler_e_print_high
    e_extract_content = _PDFNetPython.SecurityHandler_e_extract_content
    e_mod_annot = _PDFNetPython.SecurityHandler_e_mod_annot
    e_fill_forms = _PDFNetPython.SecurityHandler_e_fill_forms
    e_access_support = _PDFNetPython.SecurityHandler_e_access_support
    e_assemble_doc = _PDFNetPython.SecurityHandler_e_assemble_doc

    def GetPermission(self, p):
        return _PDFNetPython.SecurityHandler_GetPermission(self, p)

    def GetKeyLength(self):
        return _PDFNetPython.SecurityHandler_GetKeyLength(self)

    def GetEncryptionAlgorithmID(self):
        return _PDFNetPython.SecurityHandler_GetEncryptionAlgorithmID(self)

    def GetHandlerDocName(self):
        return _PDFNetPython.SecurityHandler_GetHandlerDocName(self)

    def IsModified(self):
        return _PDFNetPython.SecurityHandler_IsModified(self)

    def IsValid(self):
        return _PDFNetPython.SecurityHandler_IsValid(self)

    def SetModified(self, is_modified=True):
        return _PDFNetPython.SecurityHandler_SetModified(self, is_modified)
    e_RC4_40 = _PDFNetPython.SecurityHandler_e_RC4_40
    e_RC4_128 = _PDFNetPython.SecurityHandler_e_RC4_128
    e_AES = _PDFNetPython.SecurityHandler_e_AES
    e_AES_256 = _PDFNetPython.SecurityHandler_e_AES_256
    __swig_destroy__ = _PDFNetPython.delete_SecurityHandler
    __del__ = lambda self: None

    def ChangeUserPasswordASCII(self, password):
        return _PDFNetPython.SecurityHandler_ChangeUserPasswordASCII(self, password)

    def ChangeUserPassword(self, *args):
        return _PDFNetPython.SecurityHandler_ChangeUserPassword(self, *args)

    def GetUserPassword(self):
        return _PDFNetPython.SecurityHandler_GetUserPassword(self)

    def GetUserPasswordSize(self):
        return _PDFNetPython.SecurityHandler_GetUserPasswordSize(self)

    def ChangeMasterPasswordASCII(self, password):
        return _PDFNetPython.SecurityHandler_ChangeMasterPasswordASCII(self, password)

    def ChangeMasterPassword(self, *args):
        return _PDFNetPython.SecurityHandler_ChangeMasterPassword(self, *args)

    def GetMasterPassword(self):
        return _PDFNetPython.SecurityHandler_GetMasterPassword(self)

    def GetMasterPasswordSize(self):
        return _PDFNetPython.SecurityHandler_GetMasterPasswordSize(self)

    def SetPermission(self, perm, value):
        return _PDFNetPython.SecurityHandler_SetPermission(self, perm, value)

    def ChangeRevisionNumber(self, rev_num):
        return _PDFNetPython.SecurityHandler_ChangeRevisionNumber(self, rev_num)

    def SetEncryptMetadata(self, encrypt_metadata):
        return _PDFNetPython.SecurityHandler_SetEncryptMetadata(self, encrypt_metadata)

    def GetRevisionNumber(self):
        return _PDFNetPython.SecurityHandler_GetRevisionNumber(self)

    def IsUserPasswordRequired(self):
        return _PDFNetPython.SecurityHandler_IsUserPasswordRequired(self)

    def IsMasterPasswordRequired(self):
        return _PDFNetPython.SecurityHandler_IsMasterPasswordRequired(self)

    def IsAES(self, *args):
        return _PDFNetPython.SecurityHandler_IsAES(self, *args)

    def IsRC4(self):
        return _PDFNetPython.SecurityHandler_IsRC4(self)

    def __nonzero__(self):
        return _PDFNetPython.SecurityHandler___nonzero__(self)
    __bool__ = __nonzero__



    def AuthorizeFailed(self):
        return _PDFNetPython.SecurityHandler_AuthorizeFailed(self)

    def Authorize(self, p):
        return _PDFNetPython.SecurityHandler_Authorize(self, p)

    def GetAuthorizationData(self, req_opr):
        return _PDFNetPython.SecurityHandler_GetAuthorizationData(self, req_opr)

    def EditSecurityData(self, doc):
        return _PDFNetPython.SecurityHandler_EditSecurityData(self, doc)

    def FillEncryptDict(self, doc):
        return _PDFNetPython.SecurityHandler_FillEncryptDict(self, doc)

    def Clone(self, base):
        return _PDFNetPython.SecurityHandler_Clone(self, base)

    def InitPasswordASCII(self, password):
        return _PDFNetPython.SecurityHandler_InitPasswordASCII(self, password)

    def InitPassword(self, *args):
        return _PDFNetPython.SecurityHandler_InitPassword(self, *args)
    has_CloneProc = _PDFNetPython.SecurityHandler_has_CloneProc
    has_AuthProc = _PDFNetPython.SecurityHandler_has_AuthProc
    has_AuthFailedProc = _PDFNetPython.SecurityHandler_has_AuthFailedProc
    has_GetAuthDataProc = _PDFNetPython.SecurityHandler_has_GetAuthDataProc
    has_EditSecurDataProc = _PDFNetPython.SecurityHandler_has_EditSecurDataProc
    has_FillEncDictProc = _PDFNetPython.SecurityHandler_has_FillEncDictProc

    def SetDerived(self, overloaded_funct):
        return _PDFNetPython.SecurityHandler_SetDerived(self, overloaded_funct)

    def GetDerived(self):
        return _PDFNetPython.SecurityHandler_GetDerived(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_SecurityHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_handler"] = _PDFNetPython.SecurityHandler_mp_handler_set
    __swig_getmethods__["mp_handler"] = _PDFNetPython.SecurityHandler_mp_handler_get
    if _newclass:
        mp_handler = _swig_property(_PDFNetPython.SecurityHandler_mp_handler_get, _PDFNetPython.SecurityHandler_mp_handler_set)
    __swig_setmethods__["m_owner"] = _PDFNetPython.SecurityHandler_m_owner_set
    __swig_getmethods__["m_owner"] = _PDFNetPython.SecurityHandler_m_owner_get
    if _newclass:
        m_owner = _swig_property(_PDFNetPython.SecurityHandler_m_owner_get, _PDFNetPython.SecurityHandler_m_owner_set)
    __swig_setmethods__["m_derived_procs"] = _PDFNetPython.SecurityHandler_m_derived_procs_set
    __swig_getmethods__["m_derived_procs"] = _PDFNetPython.SecurityHandler_m_derived_procs_get
    if _newclass:
        m_derived_procs = _swig_property(_PDFNetPython.SecurityHandler_m_derived_procs_get, _PDFNetPython.SecurityHandler_m_derived_procs_set)
SecurityHandler_swigregister = _PDFNetPython.SecurityHandler_swigregister
SecurityHandler_swigregister(SecurityHandler)

class PDFTronCustomSecurityHandler(SecurityHandler):
    __swig_setmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFTronCustomSecurityHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [SecurityHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDFTronCustomSecurityHandler, name)
    __repr__ = _swig_repr

    def __init__(self, custom_id):
        this = _PDFNetPython.new_PDFTronCustomSecurityHandler(custom_id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDFTronCustomSecurityHandler
    __del__ = lambda self: None
PDFTronCustomSecurityHandler_swigregister = _PDFNetPython.PDFTronCustomSecurityHandler_swigregister
PDFTronCustomSecurityHandler_swigregister(PDFTronCustomSecurityHandler)

class DocSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocSnapshot, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_DocSnapshot
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.DocSnapshot_Destroy(self)

    def GetHash(self):
        return _PDFNetPython.DocSnapshot_GetHash(self)

    def IsValid(self):
        return _PDFNetPython.DocSnapshot_IsValid(self)

    def Equals(self, snapshot):
        return _PDFNetPython.DocSnapshot_Equals(self, snapshot)

    def __init__(self, *args):
        this = _PDFNetPython.new_DocSnapshot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.DocSnapshot_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.DocSnapshot_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.DocSnapshot_m_impl_get, _PDFNetPython.DocSnapshot_m_impl_set)
DocSnapshot_swigregister = _PDFNetPython.DocSnapshot_swigregister
DocSnapshot_swigregister(DocSnapshot)

class ResultSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultSnapshot, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_ResultSnapshot
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.ResultSnapshot_Destroy(self)

    def CurrentState(self):
        return _PDFNetPython.ResultSnapshot_CurrentState(self)

    def PreviousState(self):
        return _PDFNetPython.ResultSnapshot_PreviousState(self)

    def IsOk(self):
        return _PDFNetPython.ResultSnapshot_IsOk(self)

    def IsNullTransition(self):
        return _PDFNetPython.ResultSnapshot_IsNullTransition(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython.ResultSnapshot_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.ResultSnapshot_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.ResultSnapshot_m_impl_get, _PDFNetPython.ResultSnapshot_m_impl_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_ResultSnapshot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ResultSnapshot_swigregister = _PDFNetPython.ResultSnapshot_swigregister
ResultSnapshot_swigregister(ResultSnapshot)

class UndoManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndoManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UndoManager, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_UndoManager
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.UndoManager_Destroy(self)

    def DiscardAllSnapshots(self):
        return _PDFNetPython.UndoManager_DiscardAllSnapshots(self)

    def Undo(self):
        return _PDFNetPython.UndoManager_Undo(self)

    def CanUndo(self):
        return _PDFNetPython.UndoManager_CanUndo(self)

    def GetNextUndoSnapshot(self):
        return _PDFNetPython.UndoManager_GetNextUndoSnapshot(self)

    def Redo(self):
        return _PDFNetPython.UndoManager_Redo(self)

    def CanRedo(self):
        return _PDFNetPython.UndoManager_CanRedo(self)

    def GetNextRedoSnapshot(self):
        return _PDFNetPython.UndoManager_GetNextRedoSnapshot(self)

    def TakeSnapshot(self):
        return _PDFNetPython.UndoManager_TakeSnapshot(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_UndoManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.UndoManager_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.UndoManager_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.UndoManager_m_impl_get, _PDFNetPython.UndoManager_m_impl_set)
UndoManager_swigregister = _PDFNetPython.UndoManager_swigregister
UndoManager_swigregister(UndoManager)

class ViewChangeCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewChangeCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewChangeCollection, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_ViewChangeCollection
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.ViewChangeCollection_Destroy(self)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.ViewChangeCollection_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.ViewChangeCollection_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.ViewChangeCollection_GetHandleInternal(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_ViewChangeCollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_collection"] = _PDFNetPython.ViewChangeCollection_mp_collection_set
    __swig_getmethods__["mp_collection"] = _PDFNetPython.ViewChangeCollection_mp_collection_get
    if _newclass:
        mp_collection = _swig_property(_PDFNetPython.ViewChangeCollection_mp_collection_get, _PDFNetPython.ViewChangeCollection_mp_collection_set)
ViewChangeCollection_swigregister = _PDFNetPython.ViewChangeCollection_swigregister
ViewChangeCollection_swigregister(ViewChangeCollection)

def ViewChangeCollection_CreateInternal(impl):
    return _PDFNetPython.ViewChangeCollection_CreateInternal(impl)
ViewChangeCollection_CreateInternal = _PDFNetPython.ViewChangeCollection_CreateInternal

class Point(TRN_point):
    __swig_setmethods__ = {}
    for _s in [TRN_point]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_point]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Point
    __del__ = lambda self: None
Point_swigregister = _PDFNetPython.Point_swigregister
Point_swigregister(Point)

class Function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_Function
    __del__ = lambda self: None
    e_sampled = _PDFNetPython.Function_e_sampled
    e_exponential = _PDFNetPython.Function_e_exponential
    e_stitching = _PDFNetPython.Function_e_stitching
    e_postscript = _PDFNetPython.Function_e_postscript

    def GetType(self):
        return _PDFNetPython.Function_GetType(self)

    def GetInputCardinality(self):
        return _PDFNetPython.Function_GetInputCardinality(self)

    def GetOutputCardinality(self):
        return _PDFNetPython.Function_GetOutputCardinality(self)

    def Eval(self, in_arr):
        return _PDFNetPython.Function_Eval(self, in_arr)

    def GetSDFObj(self):
        return _PDFNetPython.Function_GetSDFObj(self)

    def Destroy(self):
        return _PDFNetPython.Function_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Function(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_func"] = _PDFNetPython.Function_mp_func_set
    __swig_getmethods__["mp_func"] = _PDFNetPython.Function_mp_func_get
    if _newclass:
        mp_func = _swig_property(_PDFNetPython.Function_mp_func_get, _PDFNetPython.Function_mp_func_set)
Function_swigregister = _PDFNetPython.Function_swigregister
Function_swigregister(Function)

class ColorPt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorPt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorPt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_ColorPt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_ColorPt
    __del__ = lambda self: None

    def __eq__(self, co):
        return _PDFNetPython.ColorPt___eq__(self, co)

    def Set(self, *args):
        return _PDFNetPython.ColorPt_Set(self, *args)

    def Get(self, colorant_index):
        return _PDFNetPython.ColorPt_Get(self, colorant_index)

    def SetColorantNum(self, num):
        return _PDFNetPython.ColorPt_SetColorantNum(self, num)

    def Destroy(self):
        return _PDFNetPython.ColorPt_Destroy(self)
    __swig_setmethods__["m_c"] = _PDFNetPython.ColorPt_m_c_set
    __swig_getmethods__["m_c"] = _PDFNetPython.ColorPt_m_c_get
    if _newclass:
        m_c = _swig_property(_PDFNetPython.ColorPt_m_c_get, _PDFNetPython.ColorPt_m_c_set)
ColorPt_swigregister = _PDFNetPython.ColorPt_swigregister
ColorPt_swigregister(ColorPt)

class ColorSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorSpace, name)
    __repr__ = _swig_repr
    if _newclass:
        CreateDeviceGray = staticmethod(_PDFNetPython.ColorSpace_CreateDeviceGray)
    else:
        CreateDeviceGray = _PDFNetPython.ColorSpace_CreateDeviceGray
    if _newclass:
        CreateDeviceRGB = staticmethod(_PDFNetPython.ColorSpace_CreateDeviceRGB)
    else:
        CreateDeviceRGB = _PDFNetPython.ColorSpace_CreateDeviceRGB
    if _newclass:
        CreateDeviceCMYK = staticmethod(_PDFNetPython.ColorSpace_CreateDeviceCMYK)
    else:
        CreateDeviceCMYK = _PDFNetPython.ColorSpace_CreateDeviceCMYK
    if _newclass:
        CreatePattern = staticmethod(_PDFNetPython.ColorSpace_CreatePattern)
    else:
        CreatePattern = _PDFNetPython.ColorSpace_CreatePattern
    if _newclass:
        CreateICC = staticmethod(_PDFNetPython.ColorSpace_CreateICC)
    else:
        CreateICC = _PDFNetPython.ColorSpace_CreateICC
    __swig_destroy__ = _PDFNetPython.delete_ColorSpace
    __del__ = lambda self: None
    e_device_gray = _PDFNetPython.ColorSpace_e_device_gray
    e_device_rgb = _PDFNetPython.ColorSpace_e_device_rgb
    e_device_cmyk = _PDFNetPython.ColorSpace_e_device_cmyk
    e_cal_gray = _PDFNetPython.ColorSpace_e_cal_gray
    e_cal_rgb = _PDFNetPython.ColorSpace_e_cal_rgb
    e_lab = _PDFNetPython.ColorSpace_e_lab
    e_icc = _PDFNetPython.ColorSpace_e_icc
    e_indexed = _PDFNetPython.ColorSpace_e_indexed
    e_pattern = _PDFNetPython.ColorSpace_e_pattern
    e_separation = _PDFNetPython.ColorSpace_e_separation
    e_device_n = _PDFNetPython.ColorSpace_e_device_n
    e_null = _PDFNetPython.ColorSpace_e_null

    def GetType(self):
        return _PDFNetPython.ColorSpace_GetType(self)

    def GetSDFObj(self):
        return _PDFNetPython.ColorSpace_GetSDFObj(self)

    def GetComponentNum(self):
        return _PDFNetPython.ColorSpace_GetComponentNum(self)

    def InitColor(self, out_colorants):
        return _PDFNetPython.ColorSpace_InitColor(self, out_colorants)

    def InitComponentRanges(self, out_decode_low, out_decode_range):
        return _PDFNetPython.ColorSpace_InitComponentRanges(self, out_decode_low, out_decode_range)

    def Convert2Gray(self, in_color):
        return _PDFNetPython.ColorSpace_Convert2Gray(self, in_color)

    def Convert2RGB(self, in_color):
        return _PDFNetPython.ColorSpace_Convert2RGB(self, in_color)

    def Convert2CMYK(self, in_color):
        return _PDFNetPython.ColorSpace_Convert2CMYK(self, in_color)

    def GetAlternateColorSpace(self):
        return _PDFNetPython.ColorSpace_GetAlternateColorSpace(self)

    def GetBaseColorSpace(self):
        return _PDFNetPython.ColorSpace_GetBaseColorSpace(self)

    def GetHighVal(self):
        return _PDFNetPython.ColorSpace_GetHighVal(self)

    def GetBaseColor(self, color_idx):
        return _PDFNetPython.ColorSpace_GetBaseColor(self, color_idx)

    def IsNone(self):
        return _PDFNetPython.ColorSpace_IsNone(self)

    def IsAll(self):
        return _PDFNetPython.ColorSpace_IsAll(self)

    def GetTintFunction(self):
        return _PDFNetPython.ColorSpace_GetTintFunction(self)

    def Destroy(self):
        return _PDFNetPython.ColorSpace_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_ColorSpace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_cs"] = _PDFNetPython.ColorSpace_mp_cs_set
    __swig_getmethods__["mp_cs"] = _PDFNetPython.ColorSpace_mp_cs_get
    if _newclass:
        mp_cs = _swig_property(_PDFNetPython.ColorSpace_mp_cs_get, _PDFNetPython.ColorSpace_mp_cs_set)
ColorSpace_swigregister = _PDFNetPython.ColorSpace_swigregister
ColorSpace_swigregister(ColorSpace)

def ColorSpace_CreateDeviceGray():
    return _PDFNetPython.ColorSpace_CreateDeviceGray()
ColorSpace_CreateDeviceGray = _PDFNetPython.ColorSpace_CreateDeviceGray

def ColorSpace_CreateDeviceRGB():
    return _PDFNetPython.ColorSpace_CreateDeviceRGB()
ColorSpace_CreateDeviceRGB = _PDFNetPython.ColorSpace_CreateDeviceRGB

def ColorSpace_CreateDeviceCMYK():
    return _PDFNetPython.ColorSpace_CreateDeviceCMYK()
ColorSpace_CreateDeviceCMYK = _PDFNetPython.ColorSpace_CreateDeviceCMYK

def ColorSpace_CreatePattern():
    return _PDFNetPython.ColorSpace_CreatePattern()
ColorSpace_CreatePattern = _PDFNetPython.ColorSpace_CreatePattern

def ColorSpace_CreateICC(*args):
    return _PDFNetPython.ColorSpace_CreateICC(*args)
ColorSpace_CreateICC = _PDFNetPython.ColorSpace_CreateICC

class Rect(TRN_rect):
    __swig_setmethods__ = {}
    for _s in [TRN_rect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rect, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_rect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_Rect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Attach(self, obj):
        return _PDFNetPython.Rect_Attach(self, obj)

    def Update(self, *args):
        return _PDFNetPython.Rect_Update(self, *args)

    def Set(self, x1, y1, x2, y2):
        return _PDFNetPython.Rect_Set(self, x1, y1, x2, y2)

    def Width(self):
        return _PDFNetPython.Rect_Width(self)

    def Height(self):
        return _PDFNetPython.Rect_Height(self)

    def Contains(self, x, y):
        return _PDFNetPython.Rect_Contains(self, x, y)

    def IntersectRect(self, rect1, rect2):
        return _PDFNetPython.Rect_IntersectRect(self, rect1, rect2)

    def Normalize(self):
        return _PDFNetPython.Rect_Normalize(self)

    def Inflate(self, *args):
        return _PDFNetPython.Rect_Inflate(self, *args)

    def GetX1(self):
        return _PDFNetPython.Rect_GetX1(self)

    def GetY1(self):
        return _PDFNetPython.Rect_GetY1(self)

    def GetX2(self):
        return _PDFNetPython.Rect_GetX2(self)

    def GetY2(self):
        return _PDFNetPython.Rect_GetY2(self)

    def SetX1(self, x1):
        return _PDFNetPython.Rect_SetX1(self, x1)

    def SetY1(self, y1):
        return _PDFNetPython.Rect_SetY1(self, y1)

    def SetX2(self, x2):
        return _PDFNetPython.Rect_SetX2(self, x2)

    def SetY2(self, y2):
        return _PDFNetPython.Rect_SetY2(self, y2)
    __swig_destroy__ = _PDFNetPython.delete_Rect
    __del__ = lambda self: None
Rect_swigregister = _PDFNetPython.Rect_swigregister
Rect_swigregister(Rect)

class RectCollection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RectCollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_RectCollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddRect(self, to_add):
        return _PDFNetPython.RectCollection_AddRect(self, to_add)

    def GetRectAt(self, index):
        return _PDFNetPython.RectCollection_GetRectAt(self, index)

    def GetNumRects(self):
        return _PDFNetPython.RectCollection_GetNumRects(self)

    def Clear(self):
        return _PDFNetPython.RectCollection_Clear(self)
    __swig_destroy__ = _PDFNetPython.delete_RectCollection
    __del__ = lambda self: None
RectCollection_swigregister = _PDFNetPython.RectCollection_swigregister
RectCollection_swigregister(RectCollection)

class Page(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Page, name)
    __repr__ = _swig_repr

    def IsValid(self):
        return _PDFNetPython.Page_IsValid(self)

    def GetIndex(self):
        return _PDFNetPython.Page_GetIndex(self)
    e_media = _PDFNetPython.Page_e_media
    e_crop = _PDFNetPython.Page_e_crop
    e_bleed = _PDFNetPython.Page_e_bleed
    e_trim = _PDFNetPython.Page_e_trim
    e_art = _PDFNetPython.Page_e_art
    e_user_crop = _PDFNetPython.Page_e_user_crop

    def GetBox(self, type):
        return _PDFNetPython.Page_GetBox(self, type)

    def SetBox(self, type, box):
        return _PDFNetPython.Page_SetBox(self, type, box)

    def GetCropBox(self):
        return _PDFNetPython.Page_GetCropBox(self)

    def SetCropBox(self, box):
        return _PDFNetPython.Page_SetCropBox(self, box)

    def GetMediaBox(self):
        return _PDFNetPython.Page_GetMediaBox(self)

    def SetMediaBox(self, box):
        return _PDFNetPython.Page_SetMediaBox(self, box)

    def GetVisibleContentBox(self):
        return _PDFNetPython.Page_GetVisibleContentBox(self)
    e_0 = _PDFNetPython.Page_e_0
    e_90 = _PDFNetPython.Page_e_90
    e_180 = _PDFNetPython.Page_e_180
    e_270 = _PDFNetPython.Page_e_270
    if _newclass:
        AddRotations = staticmethod(_PDFNetPython.Page_AddRotations)
    else:
        AddRotations = _PDFNetPython.Page_AddRotations
    if _newclass:
        SubtractRotations = staticmethod(_PDFNetPython.Page_SubtractRotations)
    else:
        SubtractRotations = _PDFNetPython.Page_SubtractRotations
    if _newclass:
        RotationToDegree = staticmethod(_PDFNetPython.Page_RotationToDegree)
    else:
        RotationToDegree = _PDFNetPython.Page_RotationToDegree
    if _newclass:
        DegreeToRotation = staticmethod(_PDFNetPython.Page_DegreeToRotation)
    else:
        DegreeToRotation = _PDFNetPython.Page_DegreeToRotation

    def GetRotation(self):
        return _PDFNetPython.Page_GetRotation(self)

    def SetRotation(self, angle):
        return _PDFNetPython.Page_SetRotation(self, angle)

    def GetPageWidth(self, *args):
        return _PDFNetPython.Page_GetPageWidth(self, *args)

    def GetPageHeight(self, *args):
        return _PDFNetPython.Page_GetPageHeight(self, *args)

    def GetDefaultMatrix(self, *args):
        return _PDFNetPython.Page_GetDefaultMatrix(self, *args)

    def GetAnnots(self):
        return _PDFNetPython.Page_GetAnnots(self)

    def GetNumAnnots(self):
        return _PDFNetPython.Page_GetNumAnnots(self)

    def GetAnnot(self, index):
        return _PDFNetPython.Page_GetAnnot(self, index)
    e_action_trigger_page_open = _PDFNetPython.Page_e_action_trigger_page_open
    e_action_trigger_page_close = _PDFNetPython.Page_e_action_trigger_page_close

    def GetTriggerAction(self, trigger):
        return _PDFNetPython.Page_GetTriggerAction(self, trigger)

    def AnnotInsert(self, pos, annot):
        return _PDFNetPython.Page_AnnotInsert(self, pos, annot)

    def AnnotPushBack(self, annot):
        return _PDFNetPython.Page_AnnotPushBack(self, annot)

    def AnnotPushFront(self, annot):
        return _PDFNetPython.Page_AnnotPushFront(self, annot)

    def AnnotRemove(self, *args):
        return _PDFNetPython.Page_AnnotRemove(self, *args)

    def Scale(self, scale):
        return _PDFNetPython.Page_Scale(self, scale)

    def FlattenField(self, field_to_flatten):
        return _PDFNetPython.Page_FlattenField(self, field_to_flatten)

    def HasTransition(self):
        return _PDFNetPython.Page_HasTransition(self)

    def GetUserUnitSize(self):
        return _PDFNetPython.Page_GetUserUnitSize(self)

    def SetUserUnitSize(self, unit_size):
        return _PDFNetPython.Page_SetUserUnitSize(self, unit_size)

    def GetResourceDict(self):
        return _PDFNetPython.Page_GetResourceDict(self)

    def GetContents(self):
        return _PDFNetPython.Page_GetContents(self)

    def GetSDFObj(self):
        return _PDFNetPython.Page_GetSDFObj(self)

    def FindInheritedAttribute(self, attrib):
        return _PDFNetPython.Page_FindInheritedAttribute(self, attrib)

    def __nonzero__(self):
        return _PDFNetPython.Page___nonzero__(self)
    __bool__ = __nonzero__



    def GetThumb(self):
        return _PDFNetPython.Page_GetThumb(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Page(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_page"] = _PDFNetPython.Page_mp_page_set
    __swig_getmethods__["mp_page"] = _PDFNetPython.Page_mp_page_get
    if _newclass:
        mp_page = _swig_property(_PDFNetPython.Page_mp_page_get, _PDFNetPython.Page_mp_page_set)
    __swig_destroy__ = _PDFNetPython.delete_Page
    __del__ = lambda self: None
Page_swigregister = _PDFNetPython.Page_swigregister
Page_swigregister(Page)

def Page_AddRotations(r0, r1):
    return _PDFNetPython.Page_AddRotations(r0, r1)
Page_AddRotations = _PDFNetPython.Page_AddRotations

def Page_SubtractRotations(r0, r1):
    return _PDFNetPython.Page_SubtractRotations(r0, r1)
Page_SubtractRotations = _PDFNetPython.Page_SubtractRotations

def Page_RotationToDegree(r):
    return _PDFNetPython.Page_RotationToDegree(r)
Page_RotationToDegree = _PDFNetPython.Page_RotationToDegree

def Page_DegreeToRotation(r):
    return _PDFNetPython.Page_DegreeToRotation(r)
Page_DegreeToRotation = _PDFNetPython.Page_DegreeToRotation

class Date(TRN_date):
    __swig_setmethods__ = {}
    for _s in [TRN_date]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    for _s in [TRN_date]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_Date(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsValid(self):
        return _PDFNetPython.Date_IsValid(self)

    def SetCurrentTime(self):
        return _PDFNetPython.Date_SetCurrentTime(self)

    def Attach(self, d):
        return _PDFNetPython.Date_Attach(self, d)

    def Update(self, d=0):
        return _PDFNetPython.Date_Update(self, d)

    def GetYear(self):
        return _PDFNetPython.Date_GetYear(self)

    def GetMonth(self):
        return _PDFNetPython.Date_GetMonth(self)

    def GetDay(self):
        return _PDFNetPython.Date_GetDay(self)

    def GetHour(self):
        return _PDFNetPython.Date_GetHour(self)

    def GetMinute(self):
        return _PDFNetPython.Date_GetMinute(self)

    def GetSecond(self):
        return _PDFNetPython.Date_GetSecond(self)

    def GetUT(self):
        return _PDFNetPython.Date_GetUT(self)

    def GetUTHour(self):
        return _PDFNetPython.Date_GetUTHour(self)

    def GetUTMin(self):
        return _PDFNetPython.Date_GetUTMin(self)
    __swig_destroy__ = _PDFNetPython.delete_Date
    __del__ = lambda self: None
Date_swigregister = _PDFNetPython.Date_swigregister
Date_swigregister(Date)

class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_Field
    __del__ = lambda self: None

    def IsValid(self):
        return _PDFNetPython.Field_IsValid(self)
    e_button = _PDFNetPython.Field_e_button
    e_check = _PDFNetPython.Field_e_check
    e_radio = _PDFNetPython.Field_e_radio
    e_text = _PDFNetPython.Field_e_text
    e_choice = _PDFNetPython.Field_e_choice
    e_signature = _PDFNetPython.Field_e_signature
    e_null = _PDFNetPython.Field_e_null

    def GetType(self):
        return _PDFNetPython.Field_GetType(self)

    def GetValue(self):
        return _PDFNetPython.Field_GetValue(self)

    def GetValueAsString(self):
        return _PDFNetPython.Field_GetValueAsString(self)

    def GetValueAsBool(self):
        return _PDFNetPython.Field_GetValueAsBool(self)
    e_action_trigger_keystroke = _PDFNetPython.Field_e_action_trigger_keystroke
    e_action_trigger_format = _PDFNetPython.Field_e_action_trigger_format
    e_action_trigger_validate = _PDFNetPython.Field_e_action_trigger_validate
    e_action_trigger_calculate = _PDFNetPython.Field_e_action_trigger_calculate

    def SetValue(self, *args):
        return _PDFNetPython.Field_SetValue(self, *args)

    def GetTriggerAction(self, trigger):
        return _PDFNetPython.Field_GetTriggerAction(self, trigger)

    def RefreshAppearance(self):
        return _PDFNetPython.Field_RefreshAppearance(self)

    def EraseAppearance(self):
        return _PDFNetPython.Field_EraseAppearance(self)

    def GetDefaultValue(self):
        return _PDFNetPython.Field_GetDefaultValue(self)

    def GetDefaultValueAsString(self):
        return _PDFNetPython.Field_GetDefaultValueAsString(self)

    def GetName(self):
        return _PDFNetPython.Field_GetName(self)

    def GetPartialName(self):
        return _PDFNetPython.Field_GetPartialName(self)

    def Rename(self, field_name):
        return _PDFNetPython.Field_Rename(self, field_name)

    def IsAnnot(self):
        return _PDFNetPython.Field_IsAnnot(self)
    e_read_only = _PDFNetPython.Field_e_read_only
    e_required = _PDFNetPython.Field_e_required
    e_no_export = _PDFNetPython.Field_e_no_export
    e_pushbutton_flag = _PDFNetPython.Field_e_pushbutton_flag
    e_radio_flag = _PDFNetPython.Field_e_radio_flag
    e_toggle_to_off = _PDFNetPython.Field_e_toggle_to_off
    e_radios_in_unison = _PDFNetPython.Field_e_radios_in_unison
    e_multiline = _PDFNetPython.Field_e_multiline
    e_password = _PDFNetPython.Field_e_password
    e_file_select = _PDFNetPython.Field_e_file_select
    e_no_spellcheck = _PDFNetPython.Field_e_no_spellcheck
    e_no_scroll = _PDFNetPython.Field_e_no_scroll
    e_comb = _PDFNetPython.Field_e_comb
    e_rich_text = _PDFNetPython.Field_e_rich_text
    e_combo = _PDFNetPython.Field_e_combo
    e_edit = _PDFNetPython.Field_e_edit
    e_sort = _PDFNetPython.Field_e_sort
    e_multiselect = _PDFNetPython.Field_e_multiselect
    e_commit_on_sel_change = _PDFNetPython.Field_e_commit_on_sel_change

    def GetFlag(self, flag):
        return _PDFNetPython.Field_GetFlag(self, flag)

    def SetFlag(self, flag, value):
        return _PDFNetPython.Field_SetFlag(self, flag, value)
    e_left_justified = _PDFNetPython.Field_e_left_justified
    e_centered = _PDFNetPython.Field_e_centered
    e_right_justified = _PDFNetPython.Field_e_right_justified

    def GetJustification(self):
        return _PDFNetPython.Field_GetJustification(self)

    def SetJustification(self, j):
        return _PDFNetPython.Field_SetJustification(self, j)

    def SetMaxLen(self, max_len):
        return _PDFNetPython.Field_SetMaxLen(self, max_len)

    def GetOptCount(self):
        return _PDFNetPython.Field_GetOptCount(self)

    def GetOpt(self, index):
        return _PDFNetPython.Field_GetOpt(self, index)

    def GetMaxLen(self):
        return _PDFNetPython.Field_GetMaxLen(self)

    def GetDefaultAppearance(self):
        return _PDFNetPython.Field_GetDefaultAppearance(self)

    def Flatten(self, page):
        return _PDFNetPython.Field_Flatten(self, page)

    def GetUpdateRect(self):
        return _PDFNetPython.Field_GetUpdateRect(self)

    def FindInheritedAttribute(self, attrib):
        return _PDFNetPython.Field_FindInheritedAttribute(self, attrib)

    def GetSDFObj(self):
        return _PDFNetPython.Field_GetSDFObj(self)

    def __nonzero__(self):
        return _PDFNetPython.Field___nonzero__(self)
    __bool__ = __nonzero__



    def Destroy(self):
        return _PDFNetPython.Field_Destroy(self)

    def UseSignatureHandler(self, signature_handler_id):
        return _PDFNetPython.Field_UseSignatureHandler(self, signature_handler_id)

    def IsLockedByDigitalSignature(self):
        return _PDFNetPython.Field_IsLockedByDigitalSignature(self)
    __swig_setmethods__["mp_field"] = _PDFNetPython.Field_mp_field_set
    __swig_getmethods__["mp_field"] = _PDFNetPython.Field_mp_field_get
    if _newclass:
        mp_field = _swig_property(_PDFNetPython.Field_mp_field_get, _PDFNetPython.Field_mp_field_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_Field(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Field_swigregister = _PDFNetPython.Field_swigregister
Field_swigregister(Field)

class TimestampingResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimestampingResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimestampingResult, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_TimestampingResult
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.TimestampingResult_Destroy(self)

    def GetStatus(self):
        return _PDFNetPython.TimestampingResult_GetStatus(self)

    def GetString(self):
        return _PDFNetPython.TimestampingResult_GetString(self)

    def HasResponseVerificationResult(self):
        return _PDFNetPython.TimestampingResult_HasResponseVerificationResult(self)

    def GetResponseVerificationResult(self):
        return _PDFNetPython.TimestampingResult_GetResponseVerificationResult(self)

    def GetData(self):
        return _PDFNetPython.TimestampingResult_GetData(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_TimestampingResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.TimestampingResult_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.TimestampingResult_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.TimestampingResult_m_impl_get, _PDFNetPython.TimestampingResult_m_impl_set)
TimestampingResult_swigregister = _PDFNetPython.TimestampingResult_swigregister
TimestampingResult_swigregister(TimestampingResult)

class TimestampingConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimestampingConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimestampingConfiguration, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_TimestampingConfiguration
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.TimestampingConfiguration_Destroy(self)

    def SetTimestampAuthorityServerURL(self, in_url):
        return _PDFNetPython.TimestampingConfiguration_SetTimestampAuthorityServerURL(self, in_url)

    def SetTimestampAuthorityServerUsername(self, in_username):
        return _PDFNetPython.TimestampingConfiguration_SetTimestampAuthorityServerUsername(self, in_username)

    def SetTimestampAuthorityServerPassword(self, in_password):
        return _PDFNetPython.TimestampingConfiguration_SetTimestampAuthorityServerPassword(self, in_password)

    def SetUseNonce(self, in_use_nonce):
        return _PDFNetPython.TimestampingConfiguration_SetUseNonce(self, in_use_nonce)

    def TestConfiguration(self, in_opts):
        return _PDFNetPython.TimestampingConfiguration_TestConfiguration(self, in_opts)

    def __init__(self, *args):
        this = _PDFNetPython.new_TimestampingConfiguration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.TimestampingConfiguration_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.TimestampingConfiguration_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.TimestampingConfiguration_m_impl_get, _PDFNetPython.TimestampingConfiguration_m_impl_set)
TimestampingConfiguration_swigregister = _PDFNetPython.TimestampingConfiguration_swigregister
TimestampingConfiguration_swigregister(TimestampingConfiguration)

class ObjectIdentifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectIdentifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectIdentifier, name)
    __repr__ = _swig_repr
    e_commonName = _PDFNetPython.ObjectIdentifier_e_commonName
    e_surname = _PDFNetPython.ObjectIdentifier_e_surname
    e_countryName = _PDFNetPython.ObjectIdentifier_e_countryName
    e_localityName = _PDFNetPython.ObjectIdentifier_e_localityName
    e_stateOrProvinceName = _PDFNetPython.ObjectIdentifier_e_stateOrProvinceName
    e_streetAddress = _PDFNetPython.ObjectIdentifier_e_streetAddress
    e_organizationName = _PDFNetPython.ObjectIdentifier_e_organizationName
    e_organizationalUnitName = _PDFNetPython.ObjectIdentifier_e_organizationalUnitName
    e_SHA1 = _PDFNetPython.ObjectIdentifier_e_SHA1
    e_SHA256 = _PDFNetPython.ObjectIdentifier_e_SHA256
    e_SHA384 = _PDFNetPython.ObjectIdentifier_e_SHA384
    e_SHA512 = _PDFNetPython.ObjectIdentifier_e_SHA512
    e_RIPEMD160 = _PDFNetPython.ObjectIdentifier_e_RIPEMD160
    e_RSA_encryption_PKCS1 = _PDFNetPython.ObjectIdentifier_e_RSA_encryption_PKCS1
    __swig_destroy__ = _PDFNetPython.delete_ObjectIdentifier
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.ObjectIdentifier_Destroy(self)

    def GetRawValue(self):
        return _PDFNetPython.ObjectIdentifier_GetRawValue(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_ObjectIdentifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.ObjectIdentifier_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.ObjectIdentifier_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.ObjectIdentifier_m_impl_get, _PDFNetPython.ObjectIdentifier_m_impl_set)
ObjectIdentifier_swigregister = _PDFNetPython.ObjectIdentifier_swigregister
ObjectIdentifier_swigregister(ObjectIdentifier)

class X501DistinguishedName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X501DistinguishedName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X501DistinguishedName, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_X501DistinguishedName
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.X501DistinguishedName_Destroy(self)

    def HasAttribute(self, in_oid):
        return _PDFNetPython.X501DistinguishedName_HasAttribute(self, in_oid)

    def GetStringValuesForAttribute(self, in_oid):
        return _PDFNetPython.X501DistinguishedName_GetStringValuesForAttribute(self, in_oid)

    def GetAllAttributesAndValues(self):
        return _PDFNetPython.X501DistinguishedName_GetAllAttributesAndValues(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_X501DistinguishedName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.X501DistinguishedName_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.X501DistinguishedName_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.X501DistinguishedName_m_impl_get, _PDFNetPython.X501DistinguishedName_m_impl_set)
X501DistinguishedName_swigregister = _PDFNetPython.X501DistinguishedName_swigregister
X501DistinguishedName_swigregister(X501DistinguishedName)

class X501AttributeTypeAndValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X501AttributeTypeAndValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X501AttributeTypeAndValue, name)
    __repr__ = _swig_repr

    def Destroy(self):
        return _PDFNetPython.X501AttributeTypeAndValue_Destroy(self)

    def GetAttributeTypeOID(self):
        return _PDFNetPython.X501AttributeTypeAndValue_GetAttributeTypeOID(self)

    def GetStringValue(self):
        return _PDFNetPython.X501AttributeTypeAndValue_GetStringValue(self)
    __swig_destroy__ = _PDFNetPython.delete_X501AttributeTypeAndValue
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PDFNetPython.new_X501AttributeTypeAndValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.X501AttributeTypeAndValue_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.X501AttributeTypeAndValue_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.X501AttributeTypeAndValue_m_impl_get, _PDFNetPython.X501AttributeTypeAndValue_m_impl_set)
X501AttributeTypeAndValue_swigregister = _PDFNetPython.X501AttributeTypeAndValue_swigregister
X501AttributeTypeAndValue_swigregister(X501AttributeTypeAndValue)

class X509Extension(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X509Extension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X509Extension, name)
    __repr__ = _swig_repr

    def Destroy(self):
        return _PDFNetPython.X509Extension_Destroy(self)

    def IsCritical(self):
        return _PDFNetPython.X509Extension_IsCritical(self)

    def GetObjectIdentifier(self):
        return _PDFNetPython.X509Extension_GetObjectIdentifier(self)

    def ToString(self):
        return _PDFNetPython.X509Extension_ToString(self)

    def GetData(self):
        return _PDFNetPython.X509Extension_GetData(self)
    __swig_destroy__ = _PDFNetPython.delete_X509Extension
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PDFNetPython.new_X509Extension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.X509Extension_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.X509Extension_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.X509Extension_m_impl_get, _PDFNetPython.X509Extension_m_impl_set)
X509Extension_swigregister = _PDFNetPython.X509Extension_swigregister
X509Extension_swigregister(X509Extension)

class X509Certificate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X509Certificate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X509Certificate, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_X509Certificate
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.X509Certificate_Destroy(self)

    def GetIssuerField(self):
        return _PDFNetPython.X509Certificate_GetIssuerField(self)

    def GetSubjectField(self):
        return _PDFNetPython.X509Certificate_GetSubjectField(self)

    def GetNotBeforeEpochTime(self):
        return _PDFNetPython.X509Certificate_GetNotBeforeEpochTime(self)

    def GetNotAfterEpochTime(self):
        return _PDFNetPython.X509Certificate_GetNotAfterEpochTime(self)

    def GetRawX509VersionNumber(self):
        return _PDFNetPython.X509Certificate_GetRawX509VersionNumber(self)

    def ToString(self):
        return _PDFNetPython.X509Certificate_ToString(self)

    def GetFingerprint(self, *args):
        return _PDFNetPython.X509Certificate_GetFingerprint(self, *args)

    def GetSerialNumber(self):
        return _PDFNetPython.X509Certificate_GetSerialNumber(self)

    def GetExtensions(self):
        return _PDFNetPython.X509Certificate_GetExtensions(self)

    def GetData(self):
        return _PDFNetPython.X509Certificate_GetData(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_X509Certificate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.X509Certificate_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.X509Certificate_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.X509Certificate_m_impl_get, _PDFNetPython.X509Certificate_m_impl_set)
X509Certificate_swigregister = _PDFNetPython.X509Certificate_swigregister
X509Certificate_swigregister(X509Certificate)

class DisallowedChange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisallowedChange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisallowedChange, name)
    __repr__ = _swig_repr
    e_form_filled = _PDFNetPython.DisallowedChange_e_form_filled
    e_digital_signature_signed = _PDFNetPython.DisallowedChange_e_digital_signature_signed
    e_page_template_instantiated = _PDFNetPython.DisallowedChange_e_page_template_instantiated
    e_annotation_created_or_updated_or_deleted = _PDFNetPython.DisallowedChange_e_annotation_created_or_updated_or_deleted
    e_other = _PDFNetPython.DisallowedChange_e_other
    e_unknown = _PDFNetPython.DisallowedChange_e_unknown

    def __init__(self, *args):
        this = _PDFNetPython.new_DisallowedChange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_DisallowedChange
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.DisallowedChange_Destroy(self)

    def GetObjNum(self):
        return _PDFNetPython.DisallowedChange_GetObjNum(self)

    def GetType(self):
        return _PDFNetPython.DisallowedChange_GetType(self)

    def GetTypeAsString(self):
        return _PDFNetPython.DisallowedChange_GetTypeAsString(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython.DisallowedChange_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.DisallowedChange_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.DisallowedChange_m_impl_get, _PDFNetPython.DisallowedChange_m_impl_set)
DisallowedChange_swigregister = _PDFNetPython.DisallowedChange_swigregister
DisallowedChange_swigregister(DisallowedChange)

class FDFField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDFField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FDFField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_FDFField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetValue(self):
        return _PDFNetPython.FDFField_GetValue(self)

    def SetValue(self, value):
        return _PDFNetPython.FDFField_SetValue(self, value)

    def GetName(self):
        return _PDFNetPython.FDFField_GetName(self)

    def GetPartialName(self):
        return _PDFNetPython.FDFField_GetPartialName(self)

    def GetSDFObj(self):
        return _PDFNetPython.FDFField_GetSDFObj(self)

    def FindAttribute(self, attrib):
        return _PDFNetPython.FDFField_FindAttribute(self, attrib)

    def __nonzero__(self):
        return _PDFNetPython.FDFField___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _PDFNetPython.delete_FDFField
    __del__ = lambda self: None
FDFField_swigregister = _PDFNetPython.FDFField_swigregister
FDFField_swigregister(FDFField)

class FDFDoc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDFDoc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FDFDoc, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_FDFDoc
    __del__ = lambda self: None

    def Close(self):
        return _PDFNetPython.FDFDoc_Close(self)

    def IsModified(self):
        return _PDFNetPython.FDFDoc_IsModified(self)

    def Save(self, *args):
        return _PDFNetPython.FDFDoc_Save(self, *args)

    def GetTrailer(self):
        return _PDFNetPython.FDFDoc_GetTrailer(self)

    def GetRoot(self):
        return _PDFNetPython.FDFDoc_GetRoot(self)

    def GetFDF(self):
        return _PDFNetPython.FDFDoc_GetFDF(self)

    def GetPDFFileName(self):
        return _PDFNetPython.FDFDoc_GetPDFFileName(self)

    def SetPDFFileName(self, filepath):
        return _PDFNetPython.FDFDoc_SetPDFFileName(self, filepath)

    def GetID(self):
        return _PDFNetPython.FDFDoc_GetID(self)

    def SetID(self, id):
        return _PDFNetPython.FDFDoc_SetID(self, id)

    def GetFieldIterator(self, *args):
        return _PDFNetPython.FDFDoc_GetFieldIterator(self, *args)

    def GetField(self, field_name):
        return _PDFNetPython.FDFDoc_GetField(self, field_name)

    def FieldCreate(self, *args):
        return _PDFNetPython.FDFDoc_FieldCreate(self, *args)

    def GetSDFDoc(self):
        return _PDFNetPython.FDFDoc_GetSDFDoc(self)
    if _newclass:
        CreateFromXFDF = staticmethod(_PDFNetPython.FDFDoc_CreateFromXFDF)
    else:
        CreateFromXFDF = _PDFNetPython.FDFDoc_CreateFromXFDF

    def SaveAsXFDF(self, *args):
        return _PDFNetPython.FDFDoc_SaveAsXFDF(self, *args)

    def MergeAnnots(self, *args):
        return _PDFNetPython.FDFDoc_MergeAnnots(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_FDFDoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_doc"] = _PDFNetPython.FDFDoc_mp_doc_set
    __swig_getmethods__["mp_doc"] = _PDFNetPython.FDFDoc_mp_doc_get
    if _newclass:
        mp_doc = _swig_property(_PDFNetPython.FDFDoc_mp_doc_get, _PDFNetPython.FDFDoc_mp_doc_set)
FDFDoc_swigregister = _PDFNetPython.FDFDoc_swigregister
FDFDoc_swigregister(FDFDoc)

def FDFDoc_CreateFromXFDF(file_name):
    return _PDFNetPython.FDFDoc_CreateFromXFDF(file_name)
FDFDoc_CreateFromXFDF = _PDFNetPython.FDFDoc_CreateFromXFDF

class VerificationOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VerificationOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VerificationOptions, name)
    __repr__ = _swig_repr
    e_compatibility_and_archiving = _PDFNetPython.VerificationOptions_e_compatibility_and_archiving
    e_maximum = _PDFNetPython.VerificationOptions_e_maximum
    e_signing = _PDFNetPython.VerificationOptions_e_signing
    e_timestamp = _PDFNetPython.VerificationOptions_e_timestamp
    e_current = _PDFNetPython.VerificationOptions_e_current
    e_signing_trust = _PDFNetPython.VerificationOptions_e_signing_trust
    e_certification_trust = _PDFNetPython.VerificationOptions_e_certification_trust
    e_dynamic_content = _PDFNetPython.VerificationOptions_e_dynamic_content
    e_javascript = _PDFNetPython.VerificationOptions_e_javascript
    e_identity = _PDFNetPython.VerificationOptions_e_identity
    e_trust_anchor = _PDFNetPython.VerificationOptions_e_trust_anchor
    e_default_trust = _PDFNetPython.VerificationOptions_e_default_trust
    e_complete_trust = _PDFNetPython.VerificationOptions_e_complete_trust
    __swig_destroy__ = _PDFNetPython.delete_VerificationOptions
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.VerificationOptions_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_VerificationOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddTrustedCertificate(self, *args):
        return _PDFNetPython.VerificationOptions_AddTrustedCertificate(self, *args)

    def AddTrustedCertificates(self, in_P7C_binary_DER_certificates_file_data, in_size):
        return _PDFNetPython.VerificationOptions_AddTrustedCertificates(self, in_P7C_binary_DER_certificates_file_data, in_size)

    def LoadTrustList(self, in_fdf_cert_exchange_data):
        return _PDFNetPython.VerificationOptions_LoadTrustList(self, in_fdf_cert_exchange_data)

    def EnableModificationVerification(self, in_on_or_off):
        return _PDFNetPython.VerificationOptions_EnableModificationVerification(self, in_on_or_off)

    def EnableDigestVerification(self, in_on_or_off):
        return _PDFNetPython.VerificationOptions_EnableDigestVerification(self, in_on_or_off)

    def EnableTrustVerification(self, in_on_or_off):
        return _PDFNetPython.VerificationOptions_EnableTrustVerification(self, in_on_or_off)

    def SetRevocationTimeout(self, in_revocation_timeout_milliseconds):
        return _PDFNetPython.VerificationOptions_SetRevocationTimeout(self, in_revocation_timeout_milliseconds)

    def EnableOnlineCRLRevocationChecking(self, in_on_or_off):
        return _PDFNetPython.VerificationOptions_EnableOnlineCRLRevocationChecking(self, in_on_or_off)

    def EnableOnlineOCSPRevocationChecking(self, in_on_or_off):
        return _PDFNetPython.VerificationOptions_EnableOnlineOCSPRevocationChecking(self, in_on_or_off)

    def EnableOnlineRevocationChecking(self, in_on_or_off):
        return _PDFNetPython.VerificationOptions_EnableOnlineRevocationChecking(self, in_on_or_off)
    __swig_setmethods__["m_impl"] = _PDFNetPython.VerificationOptions_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.VerificationOptions_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.VerificationOptions_m_impl_get, _PDFNetPython.VerificationOptions_m_impl_set)
VerificationOptions_swigregister = _PDFNetPython.VerificationOptions_swigregister
VerificationOptions_swigregister(VerificationOptions)

class TrustVerificationResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrustVerificationResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrustVerificationResult, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_TrustVerificationResult
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.TrustVerificationResult_Destroy(self)

    def WasSuccessful(self):
        return _PDFNetPython.TrustVerificationResult_WasSuccessful(self)

    def GetResultString(self):
        return _PDFNetPython.TrustVerificationResult_GetResultString(self)

    def GetTimeOfTrustVerification(self):
        return _PDFNetPython.TrustVerificationResult_GetTimeOfTrustVerification(self)

    def GetTimeOfTrustVerificationEnum(self):
        return _PDFNetPython.TrustVerificationResult_GetTimeOfTrustVerificationEnum(self)

    def HasEmbeddedTimestampVerificationResult(self):
        return _PDFNetPython.TrustVerificationResult_HasEmbeddedTimestampVerificationResult(self)

    def GetEmbeddedTimestampVerificationResult(self):
        return _PDFNetPython.TrustVerificationResult_GetEmbeddedTimestampVerificationResult(self)

    def GetCertPath(self):
        return _PDFNetPython.TrustVerificationResult_GetCertPath(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_TrustVerificationResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.TrustVerificationResult_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.TrustVerificationResult_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.TrustVerificationResult_m_impl_get, _PDFNetPython.TrustVerificationResult_m_impl_set)
TrustVerificationResult_swigregister = _PDFNetPython.TrustVerificationResult_swigregister
TrustVerificationResult_swigregister(TrustVerificationResult)

class VerificationResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VerificationResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VerificationResult, name)
    __repr__ = _swig_repr
    e_no_error = _PDFNetPython.VerificationResult_e_no_error
    e_corrupt_file = _PDFNetPython.VerificationResult_e_corrupt_file
    e_unsigned = _PDFNetPython.VerificationResult_e_unsigned
    e_bad_byteranges = _PDFNetPython.VerificationResult_e_bad_byteranges
    e_corrupt_cryptographic_contents = _PDFNetPython.VerificationResult_e_corrupt_cryptographic_contents
    e_digest_invalid = _PDFNetPython.VerificationResult_e_digest_invalid
    e_digest_verified = _PDFNetPython.VerificationResult_e_digest_verified
    e_digest_verification_disabled = _PDFNetPython.VerificationResult_e_digest_verification_disabled
    e_weak_digest_algorithm_but_digest_verifiable = _PDFNetPython.VerificationResult_e_weak_digest_algorithm_but_digest_verifiable
    e_no_digest_status = _PDFNetPython.VerificationResult_e_no_digest_status
    e_unsupported_encoding = _PDFNetPython.VerificationResult_e_unsupported_encoding
    e_unsupported_digest_algorithm = _PDFNetPython.VerificationResult_e_unsupported_digest_algorithm
    e_trust_verified = _PDFNetPython.VerificationResult_e_trust_verified
    e_untrusted = _PDFNetPython.VerificationResult_e_untrusted
    e_trust_verification_disabled = _PDFNetPython.VerificationResult_e_trust_verification_disabled
    e_no_trust_status = _PDFNetPython.VerificationResult_e_no_trust_status
    e_unsupported_trust_features = _PDFNetPython.VerificationResult_e_unsupported_trust_features
    e_invalidated_by_disallowed_changes = _PDFNetPython.VerificationResult_e_invalidated_by_disallowed_changes
    e_has_allowed_changes = _PDFNetPython.VerificationResult_e_has_allowed_changes
    e_unmodified = _PDFNetPython.VerificationResult_e_unmodified
    e_permissions_verification_disabled = _PDFNetPython.VerificationResult_e_permissions_verification_disabled
    e_no_permissions_status = _PDFNetPython.VerificationResult_e_no_permissions_status
    e_unsupported_permissions_features = _PDFNetPython.VerificationResult_e_unsupported_permissions_features
    __swig_destroy__ = _PDFNetPython.delete_VerificationResult
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.VerificationResult_Destroy(self)

    def GetVerificationStatus(self):
        return _PDFNetPython.VerificationResult_GetVerificationStatus(self)

    def GetDocumentStatus(self):
        return _PDFNetPython.VerificationResult_GetDocumentStatus(self)

    def GetDigestStatus(self):
        return _PDFNetPython.VerificationResult_GetDigestStatus(self)

    def GetTrustStatus(self):
        return _PDFNetPython.VerificationResult_GetTrustStatus(self)

    def GetPermissionsStatus(self):
        return _PDFNetPython.VerificationResult_GetPermissionsStatus(self)

    def HasTrustVerificationResult(self):
        return _PDFNetPython.VerificationResult_HasTrustVerificationResult(self)

    def GetTrustVerificationResult(self):
        return _PDFNetPython.VerificationResult_GetTrustVerificationResult(self)

    def GetDisallowedChanges(self):
        return _PDFNetPython.VerificationResult_GetDisallowedChanges(self)

    def GetDigestAlgorithm(self):
        return _PDFNetPython.VerificationResult_GetDigestAlgorithm(self)

    def GetDocumentStatusAsString(self):
        return _PDFNetPython.VerificationResult_GetDocumentStatusAsString(self)

    def GetDigestStatusAsString(self):
        return _PDFNetPython.VerificationResult_GetDigestStatusAsString(self)

    def GetTrustStatusAsString(self):
        return _PDFNetPython.VerificationResult_GetTrustStatusAsString(self)

    def GetPermissionsStatusAsString(self):
        return _PDFNetPython.VerificationResult_GetPermissionsStatusAsString(self)

    def GetUnsupportedFeatures(self):
        return _PDFNetPython.VerificationResult_GetUnsupportedFeatures(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_VerificationResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.VerificationResult_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.VerificationResult_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.VerificationResult_m_impl_get, _PDFNetPython.VerificationResult_m_impl_set)
VerificationResult_swigregister = _PDFNetPython.VerificationResult_swigregister
VerificationResult_swigregister(VerificationResult)

class EmbeddedTimestampVerificationResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddedTimestampVerificationResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddedTimestampVerificationResult, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_EmbeddedTimestampVerificationResult
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_Destroy(self)

    def GetVerificationStatus(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetVerificationStatus(self)

    def GetCMSDigestStatus(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetCMSDigestStatus(self)

    def GetMessageImprintDigestStatus(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetMessageImprintDigestStatus(self)

    def GetTrustStatus(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetTrustStatus(self)

    def GetCMSDigestStatusAsString(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetCMSDigestStatusAsString(self)

    def GetMessageImprintDigestStatusAsString(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetMessageImprintDigestStatusAsString(self)

    def GetTrustStatusAsString(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetTrustStatusAsString(self)

    def HasTrustVerificationResult(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_HasTrustVerificationResult(self)

    def GetTrustVerificationResult(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetTrustVerificationResult(self)

    def GetCMSSignatureDigestAlgorithm(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetCMSSignatureDigestAlgorithm(self)

    def GetMessageImprintDigestAlgorithm(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetMessageImprintDigestAlgorithm(self)

    def GetUnsupportedFeatures(self):
        return _PDFNetPython.EmbeddedTimestampVerificationResult_GetUnsupportedFeatures(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_EmbeddedTimestampVerificationResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.EmbeddedTimestampVerificationResult_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.EmbeddedTimestampVerificationResult_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.EmbeddedTimestampVerificationResult_m_impl_get, _PDFNetPython.EmbeddedTimestampVerificationResult_m_impl_set)
EmbeddedTimestampVerificationResult_swigregister = _PDFNetPython.EmbeddedTimestampVerificationResult_swigregister
EmbeddedTimestampVerificationResult_swigregister(EmbeddedTimestampVerificationResult)

class DigestAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DigestAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DigestAlgorithm, name)
    __repr__ = _swig_repr
    e_SHA1 = _PDFNetPython.DigestAlgorithm_e_SHA1
    e_SHA256 = _PDFNetPython.DigestAlgorithm_e_SHA256
    e_SHA384 = _PDFNetPython.DigestAlgorithm_e_SHA384
    e_SHA512 = _PDFNetPython.DigestAlgorithm_e_SHA512
    e_RIPEMD160 = _PDFNetPython.DigestAlgorithm_e_RIPEMD160
    e_unknown_digest_algorithm = _PDFNetPython.DigestAlgorithm_e_unknown_digest_algorithm
    if _newclass:
        CalculateDigest = staticmethod(_PDFNetPython.DigestAlgorithm_CalculateDigest)
    else:
        CalculateDigest = _PDFNetPython.DigestAlgorithm_CalculateDigest

    def __init__(self):
        this = _PDFNetPython.new_DigestAlgorithm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_DigestAlgorithm
    __del__ = lambda self: None
DigestAlgorithm_swigregister = _PDFNetPython.DigestAlgorithm_swigregister
DigestAlgorithm_swigregister(DigestAlgorithm)

def DigestAlgorithm_CalculateDigest(in_digest_algorithm_type, in_message_buf):
    return _PDFNetPython.DigestAlgorithm_CalculateDigest(in_digest_algorithm_type, in_message_buf)
DigestAlgorithm_CalculateDigest = _PDFNetPython.DigestAlgorithm_CalculateDigest

class DigitalSignatureField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DigitalSignatureField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DigitalSignatureField, name)
    __repr__ = _swig_repr
    e_adbe_x509_rsa_sha1 = _PDFNetPython.DigitalSignatureField_e_adbe_x509_rsa_sha1
    e_adbe_pkcs7_detached = _PDFNetPython.DigitalSignatureField_e_adbe_pkcs7_detached
    e_adbe_pkcs7_sha1 = _PDFNetPython.DigitalSignatureField_e_adbe_pkcs7_sha1
    e_ETSI_CAdES_detached = _PDFNetPython.DigitalSignatureField_e_ETSI_CAdES_detached
    e_ETSI_RFC3161 = _PDFNetPython.DigitalSignatureField_e_ETSI_RFC3161
    e_unknown = _PDFNetPython.DigitalSignatureField_e_unknown
    e_absent = _PDFNetPython.DigitalSignatureField_e_absent
    e_no_changes_allowed = _PDFNetPython.DigitalSignatureField_e_no_changes_allowed
    e_formfilling_signing_allowed = _PDFNetPython.DigitalSignatureField_e_formfilling_signing_allowed
    e_annotating_formfilling_signing_allowed = _PDFNetPython.DigitalSignatureField_e_annotating_formfilling_signing_allowed
    e_unrestricted = _PDFNetPython.DigitalSignatureField_e_unrestricted
    e_lock_all = _PDFNetPython.DigitalSignatureField_e_lock_all
    e_include = _PDFNetPython.DigitalSignatureField_e_include
    e_exclude = _PDFNetPython.DigitalSignatureField_e_exclude

    def HasCryptographicSignature(self):
        return _PDFNetPython.DigitalSignatureField_HasCryptographicSignature(self)

    def GetSubFilter(self):
        return _PDFNetPython.DigitalSignatureField_GetSubFilter(self)

    def GetSignatureName(self):
        return _PDFNetPython.DigitalSignatureField_GetSignatureName(self)

    def GetSigningTime(self):
        return _PDFNetPython.DigitalSignatureField_GetSigningTime(self)

    def GetLocation(self):
        return _PDFNetPython.DigitalSignatureField_GetLocation(self)

    def GetReason(self):
        return _PDFNetPython.DigitalSignatureField_GetReason(self)

    def GetContactInfo(self):
        return _PDFNetPython.DigitalSignatureField_GetContactInfo(self)

    def GetCert(self, in_index):
        return _PDFNetPython.DigitalSignatureField_GetCert(self, in_index)

    def GetCertCount(self):
        return _PDFNetPython.DigitalSignatureField_GetCertCount(self)

    def HasVisibleAppearance(self):
        return _PDFNetPython.DigitalSignatureField_HasVisibleAppearance(self)

    def SetContactInfo(self, in_contact_info):
        return _PDFNetPython.DigitalSignatureField_SetContactInfo(self, in_contact_info)

    def SetLocation(self, in_location):
        return _PDFNetPython.DigitalSignatureField_SetLocation(self, in_location)

    def SetReason(self, in_reason):
        return _PDFNetPython.DigitalSignatureField_SetReason(self, in_reason)

    def SetFieldPermissions(self, *args):
        return _PDFNetPython.DigitalSignatureField_SetFieldPermissions(self, *args)

    def SetDocumentPermissions(self, in_perms):
        return _PDFNetPython.DigitalSignatureField_SetDocumentPermissions(self, in_perms)

    def SignOnNextSave(self, *args):
        return _PDFNetPython.DigitalSignatureField_SignOnNextSave(self, *args)

    def SignOnNextSaveWithCustomHandler(self, in_signature_handler_id):
        return _PDFNetPython.DigitalSignatureField_SignOnNextSaveWithCustomHandler(self, in_signature_handler_id)

    def CertifyOnNextSave(self, *args):
        return _PDFNetPython.DigitalSignatureField_CertifyOnNextSave(self, *args)

    def CertifyOnNextSaveWithCustomHandler(self, in_signature_handler_id):
        return _PDFNetPython.DigitalSignatureField_CertifyOnNextSaveWithCustomHandler(self, in_signature_handler_id)

    def GetSDFObj(self):
        return _PDFNetPython.DigitalSignatureField_GetSDFObj(self)

    def IsLockedByDigitalSignature(self):
        return _PDFNetPython.DigitalSignatureField_IsLockedByDigitalSignature(self)

    def GetLockedFields(self):
        return _PDFNetPython.DigitalSignatureField_GetLockedFields(self)

    def GetDocumentPermissions(self):
        return _PDFNetPython.DigitalSignatureField_GetDocumentPermissions(self)

    def ClearSignature(self):
        return _PDFNetPython.DigitalSignatureField_ClearSignature(self)

    def Verify(self, in_opts):
        return _PDFNetPython.DigitalSignatureField_Verify(self, in_opts)

    def IsCertification(self):
        return _PDFNetPython.DigitalSignatureField_IsCertification(self)

    def GetSignerCertFromCMS(self):
        return _PDFNetPython.DigitalSignatureField_GetSignerCertFromCMS(self)

    def GetByteRanges(self):
        return _PDFNetPython.DigitalSignatureField_GetByteRanges(self)

    def GetCertPathsFromCMS(self):
        return _PDFNetPython.DigitalSignatureField_GetCertPathsFromCMS(self)

    def EnableLTVOfflineVerification(self, in_verification_result):
        return _PDFNetPython.DigitalSignatureField_EnableLTVOfflineVerification(self, in_verification_result)

    def TimestampOnNextSave(self, in_timestamping_config, in_timestamp_response_verification_options):
        return _PDFNetPython.DigitalSignatureField_TimestampOnNextSave(self, in_timestamping_config, in_timestamp_response_verification_options)

    def GenerateContentsWithEmbeddedTimestamp(self, in_timestamping_config, in_timestamp_response_verification_options):
        return _PDFNetPython.DigitalSignatureField_GenerateContentsWithEmbeddedTimestamp(self, in_timestamping_config, in_timestamp_response_verification_options)

    def UseSubFilter(self, in_subfilter_type, in_make_mandatory=True):
        return _PDFNetPython.DigitalSignatureField_UseSubFilter(self, in_subfilter_type, in_make_mandatory)

    def CalculateDigest(self, *args):
        return _PDFNetPython.DigitalSignatureField_CalculateDigest(self, *args)

    def SetPreferredDigestAlgorithm(self, in_digest_algorithm_type, in_make_mandatory=True):
        return _PDFNetPython.DigitalSignatureField_SetPreferredDigestAlgorithm(self, in_digest_algorithm_type, in_make_mandatory)

    def CreateSigDictForCustomCertification(self, in_filter_name, in_subfilter_type, in_contents_size_to_reserve):
        return _PDFNetPython.DigitalSignatureField_CreateSigDictForCustomCertification(self, in_filter_name, in_subfilter_type, in_contents_size_to_reserve)

    def CreateSigDictForCustomSigning(self, in_filter_name, in_subfilter_type, in_contents_size_to_reserve):
        return _PDFNetPython.DigitalSignatureField_CreateSigDictForCustomSigning(self, in_filter_name, in_subfilter_type, in_contents_size_to_reserve)

    def SetSigDictTimeOfSigning(self, in_date):
        return _PDFNetPython.DigitalSignatureField_SetSigDictTimeOfSigning(self, in_date)
    if _newclass:
        SignDigest = staticmethod(_PDFNetPython.DigitalSignatureField_SignDigest)
    else:
        SignDigest = _PDFNetPython.DigitalSignatureField_SignDigest
    if _newclass:
        GenerateESSSigningCertPAdESAttribute = staticmethod(_PDFNetPython.DigitalSignatureField_GenerateESSSigningCertPAdESAttribute)
    else:
        GenerateESSSigningCertPAdESAttribute = _PDFNetPython.DigitalSignatureField_GenerateESSSigningCertPAdESAttribute
    if _newclass:
        GenerateCMSSignedAttributes = staticmethod(_PDFNetPython.DigitalSignatureField_GenerateCMSSignedAttributes)
    else:
        GenerateCMSSignedAttributes = _PDFNetPython.DigitalSignatureField_GenerateCMSSignedAttributes
    if _newclass:
        GenerateCMSSignature = staticmethod(_PDFNetPython.DigitalSignatureField_GenerateCMSSignature)
    else:
        GenerateCMSSignature = _PDFNetPython.DigitalSignatureField_GenerateCMSSignature

    def __init__(self, *args):
        this = _PDFNetPython.new_DigitalSignatureField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_impl"] = _PDFNetPython.DigitalSignatureField_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.DigitalSignatureField_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.DigitalSignatureField_m_impl_get, _PDFNetPython.DigitalSignatureField_m_impl_set)
    __swig_destroy__ = _PDFNetPython.delete_DigitalSignatureField
    __del__ = lambda self: None
DigitalSignatureField_swigregister = _PDFNetPython.DigitalSignatureField_swigregister
DigitalSignatureField_swigregister(DigitalSignatureField)

def DigitalSignatureField_SignDigest(*args):
    return _PDFNetPython.DigitalSignatureField_SignDigest(*args)
DigitalSignatureField_SignDigest = _PDFNetPython.DigitalSignatureField_SignDigest

def DigitalSignatureField_GenerateESSSigningCertPAdESAttribute(in_signer_cert, in_digest_algorithm_type):
    return _PDFNetPython.DigitalSignatureField_GenerateESSSigningCertPAdESAttribute(in_signer_cert, in_digest_algorithm_type)
DigitalSignatureField_GenerateESSSigningCertPAdESAttribute = _PDFNetPython.DigitalSignatureField_GenerateESSSigningCertPAdESAttribute

def DigitalSignatureField_GenerateCMSSignedAttributes(*args):
    return _PDFNetPython.DigitalSignatureField_GenerateCMSSignedAttributes(*args)
DigitalSignatureField_GenerateCMSSignedAttributes = _PDFNetPython.DigitalSignatureField_GenerateCMSSignedAttributes

def DigitalSignatureField_GenerateCMSSignature(in_signer_cert, in_chain_certs_list, in_digest_algorithm_oid, in_signature_algorithm_oid, in_signature_value_buf, in_signedattributes_buf):
    return _PDFNetPython.DigitalSignatureField_GenerateCMSSignature(in_signer_cert, in_chain_certs_list, in_digest_algorithm_oid, in_signature_algorithm_oid, in_signature_value_buf, in_signedattributes_buf)
DigitalSignatureField_GenerateCMSSignature = _PDFNetPython.DigitalSignatureField_GenerateCMSSignature

class FileSpec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSpec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileSpec, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.FileSpec_Create)
    else:
        Create = _PDFNetPython.FileSpec_Create
    if _newclass:
        CreateURL = staticmethod(_PDFNetPython.FileSpec_CreateURL)
    else:
        CreateURL = _PDFNetPython.FileSpec_CreateURL

    def __eq__(self, d):
        return _PDFNetPython.FileSpec___eq__(self, d)

    def IsValid(self):
        return _PDFNetPython.FileSpec_IsValid(self)

    def Export(self, *args):
        return _PDFNetPython.FileSpec_Export(self, *args)

    def GetFileData(self):
        return _PDFNetPython.FileSpec_GetFileData(self)

    def GetFilePath(self):
        return _PDFNetPython.FileSpec_GetFilePath(self)

    def SetDesc(self, desc):
        return _PDFNetPython.FileSpec_SetDesc(self, desc)

    def GetSDFObj(self):
        return _PDFNetPython.FileSpec_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_FileSpec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.FileSpec_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.FileSpec_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.FileSpec_mp_impl_get, _PDFNetPython.FileSpec_mp_impl_set)
    __swig_destroy__ = _PDFNetPython.delete_FileSpec
    __del__ = lambda self: None
FileSpec_swigregister = _PDFNetPython.FileSpec_swigregister
FileSpec_swigregister(FileSpec)

def FileSpec_Create(doc, path, embed=True):
    return _PDFNetPython.FileSpec_Create(doc, path, embed)
FileSpec_Create = _PDFNetPython.FileSpec_Create

def FileSpec_CreateURL(doc, url):
    return _PDFNetPython.FileSpec_CreateURL(doc, url)
FileSpec_CreateURL = _PDFNetPython.FileSpec_CreateURL

class Flattener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flattener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flattener, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_Flattener()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Flattener
    __del__ = lambda self: None

    def SetDPI(self, dpi):
        return _PDFNetPython.Flattener_SetDPI(self, dpi)

    def SetMaximumImagePixels(self, max_pixels):
        return _PDFNetPython.Flattener_SetMaximumImagePixels(self, max_pixels)

    def SetPreferJPG(self, jpg):
        return _PDFNetPython.Flattener_SetPreferJPG(self, jpg)

    def SetJPGQuality(self, quality):
        return _PDFNetPython.Flattener_SetJPGQuality(self, quality)
    e_threshold_very_strict = _PDFNetPython.Flattener_e_threshold_very_strict
    e_threshold_strict = _PDFNetPython.Flattener_e_threshold_strict
    e_threshold_default = _PDFNetPython.Flattener_e_threshold_default
    e_threshold_keep_most = _PDFNetPython.Flattener_e_threshold_keep_most
    e_threshold_keep_all = _PDFNetPython.Flattener_e_threshold_keep_all
    e_simple = _PDFNetPython.Flattener_e_simple
    e_fast = _PDFNetPython.Flattener_e_fast

    def SetThreshold(self, threshold):
        return _PDFNetPython.Flattener_SetThreshold(self, threshold)

    def SetPathHinting(self, enable_hinting):
        return _PDFNetPython.Flattener_SetPathHinting(self, enable_hinting)

    def Process(self, *args):
        return _PDFNetPython.Flattener_Process(self, *args)

    def Destroy(self):
        return _PDFNetPython.Flattener_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython.Flattener_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.Flattener_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.Flattener_mp_impl_get, _PDFNetPython.Flattener_mp_impl_set)
Flattener_swigregister = _PDFNetPython.Flattener_swigregister
Flattener_swigregister(Flattener)

class Annot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Annot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Annot, name)
    __repr__ = _swig_repr
    e_Text = _PDFNetPython.Annot_e_Text
    e_Link = _PDFNetPython.Annot_e_Link
    e_FreeText = _PDFNetPython.Annot_e_FreeText
    e_Line = _PDFNetPython.Annot_e_Line
    e_Square = _PDFNetPython.Annot_e_Square
    e_Circle = _PDFNetPython.Annot_e_Circle
    e_Polygon = _PDFNetPython.Annot_e_Polygon
    e_Polyline = _PDFNetPython.Annot_e_Polyline
    e_Highlight = _PDFNetPython.Annot_e_Highlight
    e_Underline = _PDFNetPython.Annot_e_Underline
    e_Squiggly = _PDFNetPython.Annot_e_Squiggly
    e_StrikeOut = _PDFNetPython.Annot_e_StrikeOut
    e_Stamp = _PDFNetPython.Annot_e_Stamp
    e_Caret = _PDFNetPython.Annot_e_Caret
    e_Ink = _PDFNetPython.Annot_e_Ink
    e_Popup = _PDFNetPython.Annot_e_Popup
    e_FileAttachment = _PDFNetPython.Annot_e_FileAttachment
    e_Sound = _PDFNetPython.Annot_e_Sound
    e_Movie = _PDFNetPython.Annot_e_Movie
    e_Widget = _PDFNetPython.Annot_e_Widget
    e_Screen = _PDFNetPython.Annot_e_Screen
    e_PrinterMark = _PDFNetPython.Annot_e_PrinterMark
    e_TrapNet = _PDFNetPython.Annot_e_TrapNet
    e_Watermark = _PDFNetPython.Annot_e_Watermark
    e_3D = _PDFNetPython.Annot_e_3D
    e_Redact = _PDFNetPython.Annot_e_Redact
    e_Projection = _PDFNetPython.Annot_e_Projection
    e_RichMedia = _PDFNetPython.Annot_e_RichMedia
    e_Unknown = _PDFNetPython.Annot_e_Unknown
    if _newclass:
        Create = staticmethod(_PDFNetPython.Annot_Create)
    else:
        Create = _PDFNetPython.Annot_Create

    def __eq__(self, d):
        return _PDFNetPython.Annot___eq__(self, d)

    def IsValid(self):
        return _PDFNetPython.Annot_IsValid(self)

    def GetSDFObj(self):
        return _PDFNetPython.Annot_GetSDFObj(self)

    def GetType(self):
        return _PDFNetPython.Annot_GetType(self)

    def GetRect(self):
        return _PDFNetPython.Annot_GetRect(self)

    def GetVisibleContentBox(self):
        return _PDFNetPython.Annot_GetVisibleContentBox(self)

    def IsMarkup(self):
        return _PDFNetPython.Annot_IsMarkup(self)

    def SetRect(self, pos):
        return _PDFNetPython.Annot_SetRect(self, pos)

    def GetPage(self):
        return _PDFNetPython.Annot_GetPage(self)

    def SetPage(self, page):
        return _PDFNetPython.Annot_SetPage(self, page)

    def GetUniqueID(self):
        return _PDFNetPython.Annot_GetUniqueID(self)

    def SetUniqueID(self, id, id_buf_sz=0):
        return _PDFNetPython.Annot_SetUniqueID(self, id, id_buf_sz)

    def GetDate(self):
        return _PDFNetPython.Annot_GetDate(self)

    def SetDate(self, date):
        return _PDFNetPython.Annot_SetDate(self, date)
    e_invisible = _PDFNetPython.Annot_e_invisible
    e_hidden = _PDFNetPython.Annot_e_hidden
    e_print = _PDFNetPython.Annot_e_print
    e_no_zoom = _PDFNetPython.Annot_e_no_zoom
    e_no_rotate = _PDFNetPython.Annot_e_no_rotate
    e_no_view = _PDFNetPython.Annot_e_no_view
    e_read_only = _PDFNetPython.Annot_e_read_only
    e_locked = _PDFNetPython.Annot_e_locked
    e_toggle_no_view = _PDFNetPython.Annot_e_toggle_no_view
    e_locked_contents = _PDFNetPython.Annot_e_locked_contents

    def GetFlag(self, flag):
        return _PDFNetPython.Annot_GetFlag(self, flag)

    def SetFlag(self, flag, value):
        return _PDFNetPython.Annot_SetFlag(self, flag, value)
    e_action_trigger_activate = _PDFNetPython.Annot_e_action_trigger_activate
    e_action_trigger_annot_enter = _PDFNetPython.Annot_e_action_trigger_annot_enter
    e_action_trigger_annot_exit = _PDFNetPython.Annot_e_action_trigger_annot_exit
    e_action_trigger_annot_down = _PDFNetPython.Annot_e_action_trigger_annot_down
    e_action_trigger_annot_up = _PDFNetPython.Annot_e_action_trigger_annot_up
    e_action_trigger_annot_focus = _PDFNetPython.Annot_e_action_trigger_annot_focus
    e_action_trigger_annot_blur = _PDFNetPython.Annot_e_action_trigger_annot_blur
    e_action_trigger_annot_page_open = _PDFNetPython.Annot_e_action_trigger_annot_page_open
    e_action_trigger_annot_page_close = _PDFNetPython.Annot_e_action_trigger_annot_page_close
    e_action_trigger_annot_page_visible = _PDFNetPython.Annot_e_action_trigger_annot_page_visible
    e_action_trigger_annot_page_invisible = _PDFNetPython.Annot_e_action_trigger_annot_page_invisible

    def GetTriggerAction(self, trigger):
        return _PDFNetPython.Annot_GetTriggerAction(self, trigger)

    def GetBorderStyle(self):
        return _PDFNetPython.Annot_GetBorderStyle(self)

    def SetBorderStyle(self, bs, oldStyleOnly=False):
        return _PDFNetPython.Annot_SetBorderStyle(self, bs, oldStyleOnly)
    e_normal = _PDFNetPython.Annot_e_normal
    e_rollover = _PDFNetPython.Annot_e_rollover
    e_down = _PDFNetPython.Annot_e_down

    def GetAppearance(self, *args):
        return _PDFNetPython.Annot_GetAppearance(self, *args)

    def SetAppearance(self, *args):
        return _PDFNetPython.Annot_SetAppearance(self, *args)

    def RemoveAppearance(self, *args):
        return _PDFNetPython.Annot_RemoveAppearance(self, *args)

    def Flatten(self, page):
        return _PDFNetPython.Annot_Flatten(self, page)

    def GetActiveAppearanceState(self):
        return _PDFNetPython.Annot_GetActiveAppearanceState(self)

    def SetActiveAppearanceState(self, astate):
        return _PDFNetPython.Annot_SetActiveAppearanceState(self, astate)

    def GetColorAsRGB(self):
        return _PDFNetPython.Annot_GetColorAsRGB(self)

    def GetColorAsCMYK(self):
        return _PDFNetPython.Annot_GetColorAsCMYK(self)

    def GetColorAsGray(self):
        return _PDFNetPython.Annot_GetColorAsGray(self)

    def GetColorCompNum(self):
        return _PDFNetPython.Annot_GetColorCompNum(self)

    def SetColor(self, col, numcomp=3):
        return _PDFNetPython.Annot_SetColor(self, col, numcomp)

    def GetStructParent(self):
        return _PDFNetPython.Annot_GetStructParent(self)

    def SetStructParent(self, parkeyval):
        return _PDFNetPython.Annot_SetStructParent(self, parkeyval)

    def GetOptionalContent(self):
        return _PDFNetPython.Annot_GetOptionalContent(self)

    def SetOptionalContent(self, content):
        return _PDFNetPython.Annot_SetOptionalContent(self, content)

    def SetContents(self, contents):
        return _PDFNetPython.Annot_SetContents(self, contents)

    def GetContents(self):
        return _PDFNetPython.Annot_GetContents(self)

    def GetRotation(self):
        return _PDFNetPython.Annot_GetRotation(self)

    def SetRotation(self, angle):
        return _PDFNetPython.Annot_SetRotation(self, angle)

    def RefreshAppearance(self, *args):
        return _PDFNetPython.Annot_RefreshAppearance(self, *args)

    def GetCustomData(self, key):
        return _PDFNetPython.Annot_GetCustomData(self, key)

    def SetCustomData(self, key, value):
        return _PDFNetPython.Annot_SetCustomData(self, key, value)

    def DeleteCustomData(self, key):
        return _PDFNetPython.Annot_DeleteCustomData(self, key)

    def Resize(self, newrect):
        return _PDFNetPython.Annot_Resize(self, newrect)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.Annot_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.Annot_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.Annot_GetHandleInternal(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Annot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_annot"] = _PDFNetPython.Annot_mp_annot_set
    __swig_getmethods__["mp_annot"] = _PDFNetPython.Annot_mp_annot_get
    if _newclass:
        mp_annot = _swig_property(_PDFNetPython.Annot_mp_annot_get, _PDFNetPython.Annot_mp_annot_set)
    __swig_destroy__ = _PDFNetPython.delete_Annot
    __del__ = lambda self: None
Annot_swigregister = _PDFNetPython.Annot_swigregister
Annot_swigregister(Annot)

def Annot_Create(doc, type, pos):
    return _PDFNetPython.Annot_Create(doc, type, pos)
Annot_Create = _PDFNetPython.Annot_Create

def Annot_CreateInternal(impl):
    return _PDFNetPython.Annot_CreateInternal(impl)
Annot_CreateInternal = _PDFNetPython.Annot_CreateInternal

class BorderStyle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BorderStyle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BorderStyle, name)
    __repr__ = _swig_repr
    e_solid = _PDFNetPython.BorderStyle_e_solid
    e_dashed = _PDFNetPython.BorderStyle_e_dashed
    e_beveled = _PDFNetPython.BorderStyle_e_beveled
    e_inset = _PDFNetPython.BorderStyle_e_inset
    e_underline = _PDFNetPython.BorderStyle_e_underline
    __swig_destroy__ = _PDFNetPython.delete_BorderStyle
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.BorderStyle_Destroy(self)

    def GetStyle(self):
        return _PDFNetPython.BorderStyle_GetStyle(self)

    def SetStyle(self, style):
        return _PDFNetPython.BorderStyle_SetStyle(self, style)

    def GetHR(self):
        return _PDFNetPython.BorderStyle_GetHR(self)

    def SetHR(self, horizontal_radius):
        return _PDFNetPython.BorderStyle_SetHR(self, horizontal_radius)

    def GetVR(self):
        return _PDFNetPython.BorderStyle_GetVR(self)

    def SetVR(self, vertical_radius):
        return _PDFNetPython.BorderStyle_SetVR(self, vertical_radius)

    def GetWidth(self):
        return _PDFNetPython.BorderStyle_GetWidth(self)

    def SetWidth(self, width):
        return _PDFNetPython.BorderStyle_SetWidth(self, width)

    def GetDash(self):
        return _PDFNetPython.BorderStyle_GetDash(self)

    def SetDash(self, dash):
        return _PDFNetPython.BorderStyle_SetDash(self, dash)

    def __init__(self, *args):
        this = _PDFNetPython.new_BorderStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
BorderStyle_swigregister = _PDFNetPython.BorderStyle_swigregister
BorderStyle_swigregister(BorderStyle)

class Popup(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Popup, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Popup, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Popup_Create)
    else:
        Create = _PDFNetPython.Popup_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Popup_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Popup_CreateAnnot

    def GetParent(self):
        return _PDFNetPython.Popup_GetParent(self)

    def SetParent(self, parent):
        return _PDFNetPython.Popup_SetParent(self, parent)

    def IsOpen(self):
        return _PDFNetPython.Popup_IsOpen(self)

    def SetOpen(self, is_open):
        return _PDFNetPython.Popup_SetOpen(self, is_open)

    def __init__(self, *args):
        this = _PDFNetPython.new_Popup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Popup
    __del__ = lambda self: None
Popup_swigregister = _PDFNetPython.Popup_swigregister
Popup_swigregister(Popup)

def Popup_Create(doc, pos):
    return _PDFNetPython.Popup_Create(doc, pos)
Popup_Create = _PDFNetPython.Popup_Create

def Popup_CreateAnnot(doc, pos):
    return _PDFNetPython.Popup_CreateAnnot(doc, pos)
Popup_CreateAnnot = _PDFNetPython.Popup_CreateAnnot

class Markup(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Markup, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Markup, name)
    __repr__ = _swig_repr

    def GetTitle(self):
        return _PDFNetPython.Markup_GetTitle(self)

    def SetTitle(self, *args):
        return _PDFNetPython.Markup_SetTitle(self, *args)

    def GetPopup(self):
        return _PDFNetPython.Markup_GetPopup(self)

    def SetPopup(self, ppup):
        return _PDFNetPython.Markup_SetPopup(self, ppup)

    def GetOpacity(self):
        return _PDFNetPython.Markup_GetOpacity(self)

    def SetOpacity(self, op):
        return _PDFNetPython.Markup_SetOpacity(self, op)

    def GetSubject(self):
        return _PDFNetPython.Markup_GetSubject(self)

    def SetSubject(self, contents):
        return _PDFNetPython.Markup_SetSubject(self, contents)

    def GetCreationDates(self):
        return _PDFNetPython.Markup_GetCreationDates(self)

    def SetCreationDates(self, dt):
        return _PDFNetPython.Markup_SetCreationDates(self, dt)
    e_None = _PDFNetPython.Markup_e_None
    e_Cloudy = _PDFNetPython.Markup_e_Cloudy

    def GetBorderEffect(self):
        return _PDFNetPython.Markup_GetBorderEffect(self)

    def SetBorderEffect(self, *args):
        return _PDFNetPython.Markup_SetBorderEffect(self, *args)

    def GetBorderEffectIntensity(self):
        return _PDFNetPython.Markup_GetBorderEffectIntensity(self)

    def SetBorderEffectIntensity(self, intensity=0):
        return _PDFNetPython.Markup_SetBorderEffectIntensity(self, intensity)

    def GetInteriorColor(self):
        return _PDFNetPython.Markup_GetInteriorColor(self)

    def GetInteriorColorCompNum(self):
        return _PDFNetPython.Markup_GetInteriorColorCompNum(self)

    def SetInteriorColor(self, c, CompNum):
        return _PDFNetPython.Markup_SetInteriorColor(self, c, CompNum)

    def GetContentRect(self):
        return _PDFNetPython.Markup_GetContentRect(self)

    def SetContentRect(self, cr):
        return _PDFNetPython.Markup_SetContentRect(self, cr)

    def GetPadding(self):
        return _PDFNetPython.Markup_GetPadding(self)

    def SetPadding(self, *args):
        return _PDFNetPython.Markup_SetPadding(self, *args)

    def RotateAppearance(self, angle):
        return _PDFNetPython.Markup_RotateAppearance(self, angle)

    def __init__(self, *args):
        this = _PDFNetPython.new_Markup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Markup
    __del__ = lambda self: None
Markup_swigregister = _PDFNetPython.Markup_swigregister
Markup_swigregister(Markup)

class FileAttachment(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileAttachment, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileAttachment, name)
    __repr__ = _swig_repr
    e_Graph = _PDFNetPython.FileAttachment_e_Graph
    e_PushPin = _PDFNetPython.FileAttachment_e_PushPin
    e_Paperclip = _PDFNetPython.FileAttachment_e_Paperclip
    e_Tag = _PDFNetPython.FileAttachment_e_Tag
    e_Unknown = _PDFNetPython.FileAttachment_e_Unknown
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.FileAttachment_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.FileAttachment_CreateAnnot
    if _newclass:
        Create = staticmethod(_PDFNetPython.FileAttachment_Create)
    else:
        Create = _PDFNetPython.FileAttachment_Create

    def GetFileSpec(self):
        return _PDFNetPython.FileAttachment_GetFileSpec(self)

    def SetFileSpec(self, file):
        return _PDFNetPython.FileAttachment_SetFileSpec(self, file)

    def Export(self, *args):
        return _PDFNetPython.FileAttachment_Export(self, *args)

    def GetIcon(self):
        return _PDFNetPython.FileAttachment_GetIcon(self)

    def SetIcon(self, *args):
        return _PDFNetPython.FileAttachment_SetIcon(self, *args)

    def GetIconName(self):
        return _PDFNetPython.FileAttachment_GetIconName(self)

    def SetIconName(self, iname):
        return _PDFNetPython.FileAttachment_SetIconName(self, iname)

    def __init__(self, *args):
        this = _PDFNetPython.new_FileAttachment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_FileAttachment
    __del__ = lambda self: None
FileAttachment_swigregister = _PDFNetPython.FileAttachment_swigregister
FileAttachment_swigregister(FileAttachment)

def FileAttachment_CreateAnnot(*args):
    return _PDFNetPython.FileAttachment_CreateAnnot(*args)
FileAttachment_CreateAnnot = _PDFNetPython.FileAttachment_CreateAnnot

def FileAttachment_Create(*args):
    return _PDFNetPython.FileAttachment_Create(*args)
FileAttachment_Create = _PDFNetPython.FileAttachment_Create

class QuadPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_QuadPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["p1"] = _PDFNetPython.QuadPoint_p1_set
    __swig_getmethods__["p1"] = _PDFNetPython.QuadPoint_p1_get
    if _newclass:
        p1 = _swig_property(_PDFNetPython.QuadPoint_p1_get, _PDFNetPython.QuadPoint_p1_set)
    __swig_setmethods__["p2"] = _PDFNetPython.QuadPoint_p2_set
    __swig_getmethods__["p2"] = _PDFNetPython.QuadPoint_p2_get
    if _newclass:
        p2 = _swig_property(_PDFNetPython.QuadPoint_p2_get, _PDFNetPython.QuadPoint_p2_set)
    __swig_setmethods__["p3"] = _PDFNetPython.QuadPoint_p3_set
    __swig_getmethods__["p3"] = _PDFNetPython.QuadPoint_p3_get
    if _newclass:
        p3 = _swig_property(_PDFNetPython.QuadPoint_p3_get, _PDFNetPython.QuadPoint_p3_set)
    __swig_setmethods__["p4"] = _PDFNetPython.QuadPoint_p4_set
    __swig_getmethods__["p4"] = _PDFNetPython.QuadPoint_p4_get
    if _newclass:
        p4 = _swig_property(_PDFNetPython.QuadPoint_p4_get, _PDFNetPython.QuadPoint_p4_set)
    __swig_destroy__ = _PDFNetPython.delete_QuadPoint
    __del__ = lambda self: None
QuadPoint_swigregister = _PDFNetPython.QuadPoint_swigregister
QuadPoint_swigregister(QuadPoint)

class TextMarkup(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextMarkup, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextMarkup, name)
    __repr__ = _swig_repr

    def GetQuadPointCount(self):
        return _PDFNetPython.TextMarkup_GetQuadPointCount(self)

    def GetQuadPoint(self, idx):
        return _PDFNetPython.TextMarkup_GetQuadPoint(self, idx)

    def SetQuadPoint(self, idx, qp):
        return _PDFNetPython.TextMarkup_SetQuadPoint(self, idx, qp)

    def __init__(self, *args):
        this = _PDFNetPython.new_TextMarkup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TextMarkup
    __del__ = lambda self: None
TextMarkup_swigregister = _PDFNetPython.TextMarkup_swigregister
TextMarkup_swigregister(TextMarkup)

class Ink(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ink, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ink, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Ink_Create)
    else:
        Create = _PDFNetPython.Ink_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Ink_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Ink_CreateAnnot

    def GetPathCount(self):
        return _PDFNetPython.Ink_GetPathCount(self)

    def GetPointCount(self, pathindex):
        return _PDFNetPython.Ink_GetPointCount(self, pathindex)

    def GetPoint(self, pathindex, pointindex):
        return _PDFNetPython.Ink_GetPoint(self, pathindex, pointindex)

    def SetPoint(self, pathindex, pointindex, pt):
        return _PDFNetPython.Ink_SetPoint(self, pathindex, pointindex, pt)

    def Erase(self, pt1, pt2, width):
        return _PDFNetPython.Ink_Erase(self, pt1, pt2, width)

    def GetHighlightIntent(self):
        return _PDFNetPython.Ink_GetHighlightIntent(self)

    def SetHighlightIntent(self, highlight):
        return _PDFNetPython.Ink_SetHighlightIntent(self, highlight)

    def __init__(self, *args):
        this = _PDFNetPython.new_Ink(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Ink
    __del__ = lambda self: None
Ink_swigregister = _PDFNetPython.Ink_swigregister
Ink_swigregister(Ink)

def Ink_Create(doc, pos):
    return _PDFNetPython.Ink_Create(doc, pos)
Ink_Create = _PDFNetPython.Ink_Create

def Ink_CreateAnnot(doc, pos):
    return _PDFNetPython.Ink_CreateAnnot(doc, pos)
Ink_CreateAnnot = _PDFNetPython.Ink_CreateAnnot

class Destination(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Destination, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Destination, name)
    __repr__ = _swig_repr
    e_XYZ = _PDFNetPython.Destination_e_XYZ
    e_Fit = _PDFNetPython.Destination_e_Fit
    e_FitH = _PDFNetPython.Destination_e_FitH
    e_FitV = _PDFNetPython.Destination_e_FitV
    e_FitR = _PDFNetPython.Destination_e_FitR
    e_FitB = _PDFNetPython.Destination_e_FitB
    e_FitBH = _PDFNetPython.Destination_e_FitBH
    e_FitBV = _PDFNetPython.Destination_e_FitBV
    if _newclass:
        CreateXYZ = staticmethod(_PDFNetPython.Destination_CreateXYZ)
    else:
        CreateXYZ = _PDFNetPython.Destination_CreateXYZ
    if _newclass:
        CreateFit = staticmethod(_PDFNetPython.Destination_CreateFit)
    else:
        CreateFit = _PDFNetPython.Destination_CreateFit
    if _newclass:
        CreateFitH = staticmethod(_PDFNetPython.Destination_CreateFitH)
    else:
        CreateFitH = _PDFNetPython.Destination_CreateFitH
    if _newclass:
        CreateFitV = staticmethod(_PDFNetPython.Destination_CreateFitV)
    else:
        CreateFitV = _PDFNetPython.Destination_CreateFitV
    if _newclass:
        CreateFitR = staticmethod(_PDFNetPython.Destination_CreateFitR)
    else:
        CreateFitR = _PDFNetPython.Destination_CreateFitR
    if _newclass:
        CreateFitB = staticmethod(_PDFNetPython.Destination_CreateFitB)
    else:
        CreateFitB = _PDFNetPython.Destination_CreateFitB
    if _newclass:
        CreateFitBH = staticmethod(_PDFNetPython.Destination_CreateFitBH)
    else:
        CreateFitBH = _PDFNetPython.Destination_CreateFitBH
    if _newclass:
        CreateFitBV = staticmethod(_PDFNetPython.Destination_CreateFitBV)
    else:
        CreateFitBV = _PDFNetPython.Destination_CreateFitBV

    def IsValid(self):
        return _PDFNetPython.Destination_IsValid(self)

    def GetFitType(self):
        return _PDFNetPython.Destination_GetFitType(self)

    def GetPage(self):
        return _PDFNetPython.Destination_GetPage(self)

    def SetPage(self, page):
        return _PDFNetPython.Destination_SetPage(self, page)

    def GetSDFObj(self):
        return _PDFNetPython.Destination_GetSDFObj(self)

    def GetExplicitDestObj(self):
        return _PDFNetPython.Destination_GetExplicitDestObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Destination(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_dest"] = _PDFNetPython.Destination_mp_dest_set
    __swig_getmethods__["mp_dest"] = _PDFNetPython.Destination_mp_dest_get
    if _newclass:
        mp_dest = _swig_property(_PDFNetPython.Destination_mp_dest_get, _PDFNetPython.Destination_mp_dest_set)
    __swig_destroy__ = _PDFNetPython.delete_Destination
    __del__ = lambda self: None
Destination_swigregister = _PDFNetPython.Destination_swigregister
Destination_swigregister(Destination)

def Destination_CreateXYZ(page, left, top, zoom):
    return _PDFNetPython.Destination_CreateXYZ(page, left, top, zoom)
Destination_CreateXYZ = _PDFNetPython.Destination_CreateXYZ

def Destination_CreateFit(page):
    return _PDFNetPython.Destination_CreateFit(page)
Destination_CreateFit = _PDFNetPython.Destination_CreateFit

def Destination_CreateFitH(page, top):
    return _PDFNetPython.Destination_CreateFitH(page, top)
Destination_CreateFitH = _PDFNetPython.Destination_CreateFitH

def Destination_CreateFitV(page, left):
    return _PDFNetPython.Destination_CreateFitV(page, left)
Destination_CreateFitV = _PDFNetPython.Destination_CreateFitV

def Destination_CreateFitR(page, left, bottom, right, top):
    return _PDFNetPython.Destination_CreateFitR(page, left, bottom, right, top)
Destination_CreateFitR = _PDFNetPython.Destination_CreateFitR

def Destination_CreateFitB(page):
    return _PDFNetPython.Destination_CreateFitB(page)
Destination_CreateFitB = _PDFNetPython.Destination_CreateFitB

def Destination_CreateFitBH(page, top):
    return _PDFNetPython.Destination_CreateFitBH(page, top)
Destination_CreateFitBH = _PDFNetPython.Destination_CreateFitBH

def Destination_CreateFitBV(page, left):
    return _PDFNetPython.Destination_CreateFitBV(page, left)
Destination_CreateFitBV = _PDFNetPython.Destination_CreateFitBV

class Action(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr
    if _newclass:
        CreateGoto = staticmethod(_PDFNetPython.Action_CreateGoto)
    else:
        CreateGoto = _PDFNetPython.Action_CreateGoto
    if _newclass:
        CreateGotoRemote = staticmethod(_PDFNetPython.Action_CreateGotoRemote)
    else:
        CreateGotoRemote = _PDFNetPython.Action_CreateGotoRemote
    if _newclass:
        CreateURI = staticmethod(_PDFNetPython.Action_CreateURI)
    else:
        CreateURI = _PDFNetPython.Action_CreateURI
    if _newclass:
        CreateSubmitForm = staticmethod(_PDFNetPython.Action_CreateSubmitForm)
    else:
        CreateSubmitForm = _PDFNetPython.Action_CreateSubmitForm
    if _newclass:
        CreateLaunch = staticmethod(_PDFNetPython.Action_CreateLaunch)
    else:
        CreateLaunch = _PDFNetPython.Action_CreateLaunch
    if _newclass:
        CreateHideField = staticmethod(_PDFNetPython.Action_CreateHideField)
    else:
        CreateHideField = _PDFNetPython.Action_CreateHideField
    if _newclass:
        CreateImportData = staticmethod(_PDFNetPython.Action_CreateImportData)
    else:
        CreateImportData = _PDFNetPython.Action_CreateImportData
    if _newclass:
        CreateResetForm = staticmethod(_PDFNetPython.Action_CreateResetForm)
    else:
        CreateResetForm = _PDFNetPython.Action_CreateResetForm
    if _newclass:
        CreateJavaScript = staticmethod(_PDFNetPython.Action_CreateJavaScript)
    else:
        CreateJavaScript = _PDFNetPython.Action_CreateJavaScript

    def __eq__(self, in_action):
        return _PDFNetPython.Action___eq__(self, in_action)

    def IsValid(self):
        return _PDFNetPython.Action_IsValid(self)
    e_GoTo = _PDFNetPython.Action_e_GoTo
    e_GoToR = _PDFNetPython.Action_e_GoToR
    e_GoToE = _PDFNetPython.Action_e_GoToE
    e_Launch = _PDFNetPython.Action_e_Launch
    e_Thread = _PDFNetPython.Action_e_Thread
    e_URI = _PDFNetPython.Action_e_URI
    e_Sound = _PDFNetPython.Action_e_Sound
    e_Movie = _PDFNetPython.Action_e_Movie
    e_Hide = _PDFNetPython.Action_e_Hide
    e_Named = _PDFNetPython.Action_e_Named
    e_SubmitForm = _PDFNetPython.Action_e_SubmitForm
    e_ResetForm = _PDFNetPython.Action_e_ResetForm
    e_ImportData = _PDFNetPython.Action_e_ImportData
    e_JavaScript = _PDFNetPython.Action_e_JavaScript
    e_SetOCGState = _PDFNetPython.Action_e_SetOCGState
    e_Rendition = _PDFNetPython.Action_e_Rendition
    e_Trans = _PDFNetPython.Action_e_Trans
    e_GoTo3DView = _PDFNetPython.Action_e_GoTo3DView
    e_RichMediaExecute = _PDFNetPython.Action_e_RichMediaExecute
    e_Unknown = _PDFNetPython.Action_e_Unknown

    def GetType(self):
        return _PDFNetPython.Action_GetType(self)

    def Execute(self):
        return _PDFNetPython.Action_Execute(self)

    def ExecuteKeyStrokeAction(self, data):
        return _PDFNetPython.Action_ExecuteKeyStrokeAction(self, data)

    def NeedsWriteLock(self):
        return _PDFNetPython.Action_NeedsWriteLock(self)

    def GetNext(self):
        return _PDFNetPython.Action_GetNext(self)

    def GetDest(self):
        return _PDFNetPython.Action_GetDest(self)
    e_exclude = _PDFNetPython.Action_e_exclude
    e_include_no_value_fields = _PDFNetPython.Action_e_include_no_value_fields
    e_export_format = _PDFNetPython.Action_e_export_format
    e_get_method = _PDFNetPython.Action_e_get_method
    e_submit_coordinates = _PDFNetPython.Action_e_submit_coordinates
    e_xfdf = _PDFNetPython.Action_e_xfdf
    e_include_append_saves = _PDFNetPython.Action_e_include_append_saves
    e_include_annotations = _PDFNetPython.Action_e_include_annotations
    e_submit_pdf = _PDFNetPython.Action_e_submit_pdf
    e_canonical_format = _PDFNetPython.Action_e_canonical_format
    e_excl_non_user_annots = _PDFNetPython.Action_e_excl_non_user_annots
    e_excl_F_key = _PDFNetPython.Action_e_excl_F_key
    e_embed_form = _PDFNetPython.Action_e_embed_form

    def GetFormActionFlag(self, flag):
        return _PDFNetPython.Action_GetFormActionFlag(self, flag)

    def SetFormActionFlag(self, flag, value):
        return _PDFNetPython.Action_SetFormActionFlag(self, flag, value)

    def GetSDFObj(self):
        return _PDFNetPython.Action_GetSDFObj(self)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.Action_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.Action_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.Action_GetHandleInternal(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Action(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_action"] = _PDFNetPython.Action_mp_action_set
    __swig_getmethods__["mp_action"] = _PDFNetPython.Action_mp_action_get
    if _newclass:
        mp_action = _swig_property(_PDFNetPython.Action_mp_action_get, _PDFNetPython.Action_mp_action_set)
    __swig_destroy__ = _PDFNetPython.delete_Action
    __del__ = lambda self: None
Action_swigregister = _PDFNetPython.Action_swigregister
Action_swigregister(Action)

def Action_CreateGoto(*args):
    return _PDFNetPython.Action_CreateGoto(*args)
Action_CreateGoto = _PDFNetPython.Action_CreateGoto

def Action_CreateGotoRemote(*args):
    return _PDFNetPython.Action_CreateGotoRemote(*args)
Action_CreateGotoRemote = _PDFNetPython.Action_CreateGotoRemote

def Action_CreateURI(*args):
    return _PDFNetPython.Action_CreateURI(*args)
Action_CreateURI = _PDFNetPython.Action_CreateURI

def Action_CreateSubmitForm(url):
    return _PDFNetPython.Action_CreateSubmitForm(url)
Action_CreateSubmitForm = _PDFNetPython.Action_CreateSubmitForm

def Action_CreateLaunch(doc, path):
    return _PDFNetPython.Action_CreateLaunch(doc, path)
Action_CreateLaunch = _PDFNetPython.Action_CreateLaunch

def Action_CreateHideField(sdfdoc, list_length, field):
    return _PDFNetPython.Action_CreateHideField(sdfdoc, list_length, field)
Action_CreateHideField = _PDFNetPython.Action_CreateHideField

def Action_CreateImportData(doc, path):
    return _PDFNetPython.Action_CreateImportData(doc, path)
Action_CreateImportData = _PDFNetPython.Action_CreateImportData

def Action_CreateResetForm(doc):
    return _PDFNetPython.Action_CreateResetForm(doc)
Action_CreateResetForm = _PDFNetPython.Action_CreateResetForm

def Action_CreateJavaScript(doc, script):
    return _PDFNetPython.Action_CreateJavaScript(doc, script)
Action_CreateJavaScript = _PDFNetPython.Action_CreateJavaScript

def Action_CreateInternal(impl):
    return _PDFNetPython.Action_CreateInternal(impl)
Action_CreateInternal = _PDFNetPython.Action_CreateInternal

class PageSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageSet, name)
    __repr__ = _swig_repr
    e_all = _PDFNetPython.PageSet_e_all
    e_even = _PDFNetPython.PageSet_e_even
    e_odd = _PDFNetPython.PageSet_e_odd
    __swig_destroy__ = _PDFNetPython.delete_PageSet
    __del__ = lambda self: None

    def AddPage(self, one_page):
        return _PDFNetPython.PageSet_AddPage(self, one_page)

    def AddRange(self, *args):
        return _PDFNetPython.PageSet_AddRange(self, *args)

    def Destroy(self):
        return _PDFNetPython.PageSet_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_PageSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.PageSet_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.PageSet_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.PageSet_mp_impl_get, _PDFNetPython.PageSet_mp_impl_set)
PageSet_swigregister = _PDFNetPython.PageSet_swigregister
PageSet_swigregister(PageSet)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Config_Create)
    else:
        Create = _PDFNetPython.Config_Create

    def IsValid(self):
        return _PDFNetPython.Config_IsValid(self)

    def GetOrder(self):
        return _PDFNetPython.Config_GetOrder(self)

    def SetOrder(self, ocgs_array):
        return _PDFNetPython.Config_SetOrder(self, ocgs_array)

    def GetName(self):
        return _PDFNetPython.Config_GetName(self)

    def SetName(self, name):
        return _PDFNetPython.Config_SetName(self, name)

    def GetCreator(self):
        return _PDFNetPython.Config_GetCreator(self)

    def SetCreator(self, name):
        return _PDFNetPython.Config_SetCreator(self, name)

    def GetInitBaseState(self):
        return _PDFNetPython.Config_GetInitBaseState(self)

    def GetInitOnStates(self):
        return _PDFNetPython.Config_GetInitOnStates(self)

    def GetInitOffStates(self):
        return _PDFNetPython.Config_GetInitOffStates(self)

    def SetInitBaseState(self, *args):
        return _PDFNetPython.Config_SetInitBaseState(self, *args)

    def SetInitOnStates(self, on_array):
        return _PDFNetPython.Config_SetInitOnStates(self, on_array)

    def SetInitOffStates(self, off_array):
        return _PDFNetPython.Config_SetInitOffStates(self, off_array)

    def GetIntent(self):
        return _PDFNetPython.Config_GetIntent(self)

    def SetIntent(self, intent):
        return _PDFNetPython.Config_SetIntent(self, intent)

    def GetLockedOCGs(self):
        return _PDFNetPython.Config_GetLockedOCGs(self)

    def SetLockedOCGs(self, locked_ocg_array):
        return _PDFNetPython.Config_SetLockedOCGs(self, locked_ocg_array)

    def GetSDFObj(self):
        return _PDFNetPython.Config_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Config(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython.Config_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython.Config_mp_obj_get
    if _newclass:
        mp_obj = _swig_property(_PDFNetPython.Config_mp_obj_get, _PDFNetPython.Config_mp_obj_set)
    __swig_destroy__ = _PDFNetPython.delete_Config
    __del__ = lambda self: None
Config_swigregister = _PDFNetPython.Config_swigregister
Config_swigregister(Config)

def Config_Create(doc, default_config):
    return _PDFNetPython.Config_Create(doc, default_config)
Config_Create = _PDFNetPython.Config_Create

class Group(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Group_Create)
    else:
        Create = _PDFNetPython.Group_Create

    def IsValid(self):
        return _PDFNetPython.Group_IsValid(self)

    def GetName(self):
        return _PDFNetPython.Group_GetName(self)

    def SetName(self, name):
        return _PDFNetPython.Group_SetName(self, name)

    def GetCurrentState(self, context):
        return _PDFNetPython.Group_GetCurrentState(self, context)

    def SetCurrentState(self, context, state):
        return _PDFNetPython.Group_SetCurrentState(self, context, state)

    def GetInitialState(self, config):
        return _PDFNetPython.Group_GetInitialState(self, config)

    def SetInitialState(self, config, state):
        return _PDFNetPython.Group_SetInitialState(self, config, state)

    def GetIntent(self):
        return _PDFNetPython.Group_GetIntent(self)

    def SetIntent(self, intent):
        return _PDFNetPython.Group_SetIntent(self, intent)

    def IsLocked(self, config):
        return _PDFNetPython.Group_IsLocked(self, config)

    def SetLocked(self, config, locked):
        return _PDFNetPython.Group_SetLocked(self, config, locked)

    def HasUsage(self):
        return _PDFNetPython.Group_HasUsage(self)

    def GetUsage(self, key):
        return _PDFNetPython.Group_GetUsage(self, key)

    def GetSDFObj(self):
        return _PDFNetPython.Group_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython.Group_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython.Group_mp_obj_get
    if _newclass:
        mp_obj = _swig_property(_PDFNetPython.Group_mp_obj_get, _PDFNetPython.Group_mp_obj_set)
    __swig_destroy__ = _PDFNetPython.delete_Group
    __del__ = lambda self: None
Group_swigregister = _PDFNetPython.Group_swigregister
Group_swigregister(Group)

def Group_Create(doc, name):
    return _PDFNetPython.Group_Create(doc, name)
Group_Create = _PDFNetPython.Group_Create

class Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_Context
    __del__ = lambda self: None

    def IsValid(self):
        return _PDFNetPython.Context_IsValid(self)

    def GetState(self, group):
        return _PDFNetPython.Context_GetState(self, group)

    def SetState(self, group, state):
        return _PDFNetPython.Context_SetState(self, group, state)

    def ResetStates(self, all_on):
        return _PDFNetPython.Context_ResetStates(self, all_on)

    def SetNonOCDrawing(self, draw_non_OC):
        return _PDFNetPython.Context_SetNonOCDrawing(self, draw_non_OC)

    def GetNonOCDrawing(self):
        return _PDFNetPython.Context_GetNonOCDrawing(self)
    e_VisibleOC = _PDFNetPython.Context_e_VisibleOC
    e_AllOC = _PDFNetPython.Context_e_AllOC
    e_NoOC = _PDFNetPython.Context_e_NoOC

    def SetOCDrawMode(self, oc_draw_mode):
        return _PDFNetPython.Context_SetOCDrawMode(self, oc_draw_mode)

    def GetOCMode(self):
        return _PDFNetPython.Context_GetOCMode(self)

    def Destroy(self):
        return _PDFNetPython.Context_Destroy(self)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.Context_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.Context_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.Context_GetHandleInternal(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython.Context_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython.Context_mp_obj_get
    if _newclass:
        mp_obj = _swig_property(_PDFNetPython.Context_mp_obj_get, _PDFNetPython.Context_mp_obj_set)
Context_swigregister = _PDFNetPython.Context_swigregister
Context_swigregister(Context)

def Context_CreateInternal(impl):
    return _PDFNetPython.Context_CreateInternal(impl)
Context_CreateInternal = _PDFNetPython.Context_CreateInternal

class OCMD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OCMD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OCMD, name)
    __repr__ = _swig_repr
    e_AllOn = _PDFNetPython.OCMD_e_AllOn
    e_AnyOn = _PDFNetPython.OCMD_e_AnyOn
    e_AnyOff = _PDFNetPython.OCMD_e_AnyOff
    e_AllOff = _PDFNetPython.OCMD_e_AllOff
    if _newclass:
        Create = staticmethod(_PDFNetPython.OCMD_Create)
    else:
        Create = _PDFNetPython.OCMD_Create

    def IsValid(self):
        return _PDFNetPython.OCMD_IsValid(self)

    def GetOCGs(self):
        return _PDFNetPython.OCMD_GetOCGs(self)

    def GetVisibilityPolicy(self):
        return _PDFNetPython.OCMD_GetVisibilityPolicy(self)

    def SetVisibilityPolicy(self, vis_policy):
        return _PDFNetPython.OCMD_SetVisibilityPolicy(self, vis_policy)

    def GetVisibilityExpression(self):
        return _PDFNetPython.OCMD_GetVisibilityExpression(self)

    def IsCurrentlyVisible(self, context):
        return _PDFNetPython.OCMD_IsCurrentlyVisible(self, context)

    def GetSDFObj(self):
        return _PDFNetPython.OCMD_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_OCMD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython.OCMD_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython.OCMD_mp_obj_get
    if _newclass:
        mp_obj = _swig_property(_PDFNetPython.OCMD_mp_obj_get, _PDFNetPython.OCMD_mp_obj_set)
    __swig_destroy__ = _PDFNetPython.delete_OCMD
    __del__ = lambda self: None
OCMD_swigregister = _PDFNetPython.OCMD_swigregister
OCMD_swigregister(OCMD)

def OCMD_Create(doc, ocgs, vis_policy):
    return _PDFNetPython.OCMD_Create(doc, ocgs, vis_policy)
OCMD_Create = _PDFNetPython.OCMD_Create

class PDFACompliance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFACompliance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFACompliance, name)
    __repr__ = _swig_repr
    e_NoConformance = _PDFNetPython.PDFACompliance_e_NoConformance
    e_Level1A = _PDFNetPython.PDFACompliance_e_Level1A
    e_Level1B = _PDFNetPython.PDFACompliance_e_Level1B
    e_Level2A = _PDFNetPython.PDFACompliance_e_Level2A
    e_Level2B = _PDFNetPython.PDFACompliance_e_Level2B
    e_Level2U = _PDFNetPython.PDFACompliance_e_Level2U
    e_Level3A = _PDFNetPython.PDFACompliance_e_Level3A
    e_Level3B = _PDFNetPython.PDFACompliance_e_Level3B
    e_Level3U = _PDFNetPython.PDFACompliance_e_Level3U
    e_PDFA0_1_0 = _PDFNetPython.PDFACompliance_e_PDFA0_1_0
    e_PDFA0_1_1 = _PDFNetPython.PDFACompliance_e_PDFA0_1_1
    e_PDFA0_1_2 = _PDFNetPython.PDFACompliance_e_PDFA0_1_2
    e_PDFA0_1_3 = _PDFNetPython.PDFACompliance_e_PDFA0_1_3
    e_PDFA0_1_4 = _PDFNetPython.PDFACompliance_e_PDFA0_1_4
    e_PDFA0_1_5 = _PDFNetPython.PDFACompliance_e_PDFA0_1_5
    e_PDFA1_2_1 = _PDFNetPython.PDFACompliance_e_PDFA1_2_1
    e_PDFA1_2_2 = _PDFNetPython.PDFACompliance_e_PDFA1_2_2
    e_PDFA1_3_1 = _PDFNetPython.PDFACompliance_e_PDFA1_3_1
    e_PDFA1_3_2 = _PDFNetPython.PDFACompliance_e_PDFA1_3_2
    e_PDFA1_3_3 = _PDFNetPython.PDFACompliance_e_PDFA1_3_3
    e_PDFA1_3_4 = _PDFNetPython.PDFACompliance_e_PDFA1_3_4
    e_PDFA1_4_1 = _PDFNetPython.PDFACompliance_e_PDFA1_4_1
    e_PDFA1_4_2 = _PDFNetPython.PDFACompliance_e_PDFA1_4_2
    e_PDFA1_6_1 = _PDFNetPython.PDFACompliance_e_PDFA1_6_1
    e_PDFA1_7_1 = _PDFNetPython.PDFACompliance_e_PDFA1_7_1
    e_PDFA1_7_2 = _PDFNetPython.PDFACompliance_e_PDFA1_7_2
    e_PDFA1_7_3 = _PDFNetPython.PDFACompliance_e_PDFA1_7_3
    e_PDFA1_7_4 = _PDFNetPython.PDFACompliance_e_PDFA1_7_4
    e_PDFA1_8_1 = _PDFNetPython.PDFACompliance_e_PDFA1_8_1
    e_PDFA1_8_2 = _PDFNetPython.PDFACompliance_e_PDFA1_8_2
    e_PDFA1_8_3 = _PDFNetPython.PDFACompliance_e_PDFA1_8_3
    e_PDFA1_8_4 = _PDFNetPython.PDFACompliance_e_PDFA1_8_4
    e_PDFA1_8_5 = _PDFNetPython.PDFACompliance_e_PDFA1_8_5
    e_PDFA1_8_6 = _PDFNetPython.PDFACompliance_e_PDFA1_8_6
    e_PDFA1_8_7 = _PDFNetPython.PDFACompliance_e_PDFA1_8_7
    e_PDFA1_10_1 = _PDFNetPython.PDFACompliance_e_PDFA1_10_1
    e_PDFA1_11_1 = _PDFNetPython.PDFACompliance_e_PDFA1_11_1
    e_PDFA1_11_2 = _PDFNetPython.PDFACompliance_e_PDFA1_11_2
    e_PDFA1_12_1 = _PDFNetPython.PDFACompliance_e_PDFA1_12_1
    e_PDFA1_12_2 = _PDFNetPython.PDFACompliance_e_PDFA1_12_2
    e_PDFA1_12_3 = _PDFNetPython.PDFACompliance_e_PDFA1_12_3
    e_PDFA1_12_4 = _PDFNetPython.PDFACompliance_e_PDFA1_12_4
    e_PDFA1_12_5 = _PDFNetPython.PDFACompliance_e_PDFA1_12_5
    e_PDFA1_12_6 = _PDFNetPython.PDFACompliance_e_PDFA1_12_6
    e_PDFA1_13_1 = _PDFNetPython.PDFACompliance_e_PDFA1_13_1
    e_PDFA2_2_1 = _PDFNetPython.PDFACompliance_e_PDFA2_2_1
    e_PDFA2_3_2 = _PDFNetPython.PDFACompliance_e_PDFA2_3_2
    e_PDFA2_3_3 = _PDFNetPython.PDFACompliance_e_PDFA2_3_3
    e_PDFA2_3_3_1 = _PDFNetPython.PDFACompliance_e_PDFA2_3_3_1
    e_PDFA2_3_3_2 = _PDFNetPython.PDFACompliance_e_PDFA2_3_3_2
    e_PDFA2_3_4_1 = _PDFNetPython.PDFACompliance_e_PDFA2_3_4_1
    e_PDFA2_4_1 = _PDFNetPython.PDFACompliance_e_PDFA2_4_1
    e_PDFA2_4_2 = _PDFNetPython.PDFACompliance_e_PDFA2_4_2
    e_PDFA2_4_3 = _PDFNetPython.PDFACompliance_e_PDFA2_4_3
    e_PDFA2_4_4 = _PDFNetPython.PDFACompliance_e_PDFA2_4_4
    e_PDFA2_5_1 = _PDFNetPython.PDFACompliance_e_PDFA2_5_1
    e_PDFA2_5_2 = _PDFNetPython.PDFACompliance_e_PDFA2_5_2
    e_PDFA2_6_1 = _PDFNetPython.PDFACompliance_e_PDFA2_6_1
    e_PDFA2_7_1 = _PDFNetPython.PDFACompliance_e_PDFA2_7_1
    e_PDFA2_8_1 = _PDFNetPython.PDFACompliance_e_PDFA2_8_1
    e_PDFA2_9_1 = _PDFNetPython.PDFACompliance_e_PDFA2_9_1
    e_PDFA2_10_1 = _PDFNetPython.PDFACompliance_e_PDFA2_10_1
    e_PDFA3_2_1 = _PDFNetPython.PDFACompliance_e_PDFA3_2_1
    e_PDFA3_3_1 = _PDFNetPython.PDFACompliance_e_PDFA3_3_1
    e_PDFA3_3_2 = _PDFNetPython.PDFACompliance_e_PDFA3_3_2
    e_PDFA3_3_3_1 = _PDFNetPython.PDFACompliance_e_PDFA3_3_3_1
    e_PDFA3_3_3_2 = _PDFNetPython.PDFACompliance_e_PDFA3_3_3_2
    e_PDFA3_4_1 = _PDFNetPython.PDFACompliance_e_PDFA3_4_1
    e_PDFA3_5_1 = _PDFNetPython.PDFACompliance_e_PDFA3_5_1
    e_PDFA3_5_2 = _PDFNetPython.PDFACompliance_e_PDFA3_5_2
    e_PDFA3_5_3 = _PDFNetPython.PDFACompliance_e_PDFA3_5_3
    e_PDFA3_5_4 = _PDFNetPython.PDFACompliance_e_PDFA3_5_4
    e_PDFA3_5_5 = _PDFNetPython.PDFACompliance_e_PDFA3_5_5
    e_PDFA3_5_6 = _PDFNetPython.PDFACompliance_e_PDFA3_5_6
    e_PDFA3_6_1 = _PDFNetPython.PDFACompliance_e_PDFA3_6_1
    e_PDFA3_7_1 = _PDFNetPython.PDFACompliance_e_PDFA3_7_1
    e_PDFA3_7_2 = _PDFNetPython.PDFACompliance_e_PDFA3_7_2
    e_PDFA3_7_3 = _PDFNetPython.PDFACompliance_e_PDFA3_7_3
    e_PDFA4_1 = _PDFNetPython.PDFACompliance_e_PDFA4_1
    e_PDFA4_2 = _PDFNetPython.PDFACompliance_e_PDFA4_2
    e_PDFA4_3 = _PDFNetPython.PDFACompliance_e_PDFA4_3
    e_PDFA4_4 = _PDFNetPython.PDFACompliance_e_PDFA4_4
    e_PDFA4_5 = _PDFNetPython.PDFACompliance_e_PDFA4_5
    e_PDFA4_6 = _PDFNetPython.PDFACompliance_e_PDFA4_6
    e_PDFA5_2_1 = _PDFNetPython.PDFACompliance_e_PDFA5_2_1
    e_PDFA5_2_2 = _PDFNetPython.PDFACompliance_e_PDFA5_2_2
    e_PDFA5_2_3 = _PDFNetPython.PDFACompliance_e_PDFA5_2_3
    e_PDFA5_2_4 = _PDFNetPython.PDFACompliance_e_PDFA5_2_4
    e_PDFA5_2_5 = _PDFNetPython.PDFACompliance_e_PDFA5_2_5
    e_PDFA5_2_6 = _PDFNetPython.PDFACompliance_e_PDFA5_2_6
    e_PDFA5_2_7 = _PDFNetPython.PDFACompliance_e_PDFA5_2_7
    e_PDFA5_2_8 = _PDFNetPython.PDFACompliance_e_PDFA5_2_8
    e_PDFA5_2_9 = _PDFNetPython.PDFACompliance_e_PDFA5_2_9
    e_PDFA5_2_10 = _PDFNetPython.PDFACompliance_e_PDFA5_2_10
    e_PDFA5_2_11 = _PDFNetPython.PDFACompliance_e_PDFA5_2_11
    e_PDFA5_3_1 = _PDFNetPython.PDFACompliance_e_PDFA5_3_1
    e_PDFA5_3_2_1 = _PDFNetPython.PDFACompliance_e_PDFA5_3_2_1
    e_PDFA5_3_2_2 = _PDFNetPython.PDFACompliance_e_PDFA5_3_2_2
    e_PDFA5_3_2_3 = _PDFNetPython.PDFACompliance_e_PDFA5_3_2_3
    e_PDFA5_3_2_4 = _PDFNetPython.PDFACompliance_e_PDFA5_3_2_4
    e_PDFA5_3_2_5 = _PDFNetPython.PDFACompliance_e_PDFA5_3_2_5
    e_PDFA5_3_3_1 = _PDFNetPython.PDFACompliance_e_PDFA5_3_3_1
    e_PDFA5_3_3_2 = _PDFNetPython.PDFACompliance_e_PDFA5_3_3_2
    e_PDFA5_3_3_3 = _PDFNetPython.PDFACompliance_e_PDFA5_3_3_3
    e_PDFA5_3_3_4 = _PDFNetPython.PDFACompliance_e_PDFA5_3_3_4
    e_PDFA5_3_4_0 = _PDFNetPython.PDFACompliance_e_PDFA5_3_4_0
    e_PDFA5_3_4_1 = _PDFNetPython.PDFACompliance_e_PDFA5_3_4_1
    e_PDFA5_3_4_2 = _PDFNetPython.PDFACompliance_e_PDFA5_3_4_2
    e_PDFA5_3_4_3 = _PDFNetPython.PDFACompliance_e_PDFA5_3_4_3
    e_PDFA6_1_1 = _PDFNetPython.PDFACompliance_e_PDFA6_1_1
    e_PDFA6_1_2 = _PDFNetPython.PDFACompliance_e_PDFA6_1_2
    e_PDFA6_2_1 = _PDFNetPython.PDFACompliance_e_PDFA6_2_1
    e_PDFA6_2_2 = _PDFNetPython.PDFACompliance_e_PDFA6_2_2
    e_PDFA6_2_3 = _PDFNetPython.PDFACompliance_e_PDFA6_2_3
    e_PDFA7_2_1 = _PDFNetPython.PDFACompliance_e_PDFA7_2_1
    e_PDFA7_2_2 = _PDFNetPython.PDFACompliance_e_PDFA7_2_2
    e_PDFA7_2_3 = _PDFNetPython.PDFACompliance_e_PDFA7_2_3
    e_PDFA7_2_4 = _PDFNetPython.PDFACompliance_e_PDFA7_2_4
    e_PDFA7_2_5 = _PDFNetPython.PDFACompliance_e_PDFA7_2_5
    e_PDFA7_3_1 = _PDFNetPython.PDFACompliance_e_PDFA7_3_1
    e_PDFA7_3_2 = _PDFNetPython.PDFACompliance_e_PDFA7_3_2
    e_PDFA7_3_3 = _PDFNetPython.PDFACompliance_e_PDFA7_3_3
    e_PDFA7_3_4 = _PDFNetPython.PDFACompliance_e_PDFA7_3_4
    e_PDFA7_3_5 = _PDFNetPython.PDFACompliance_e_PDFA7_3_5
    e_PDFA7_3_6 = _PDFNetPython.PDFACompliance_e_PDFA7_3_6
    e_PDFA7_3_7 = _PDFNetPython.PDFACompliance_e_PDFA7_3_7
    e_PDFA7_3_8 = _PDFNetPython.PDFACompliance_e_PDFA7_3_8
    e_PDFA7_3_9 = _PDFNetPython.PDFACompliance_e_PDFA7_3_9
    e_PDFA7_5_1 = _PDFNetPython.PDFACompliance_e_PDFA7_5_1
    e_PDFA7_8_1 = _PDFNetPython.PDFACompliance_e_PDFA7_8_1
    e_PDFA7_8_2 = _PDFNetPython.PDFACompliance_e_PDFA7_8_2
    e_PDFA7_8_3 = _PDFNetPython.PDFACompliance_e_PDFA7_8_3
    e_PDFA7_8_4 = _PDFNetPython.PDFACompliance_e_PDFA7_8_4
    e_PDFA7_8_5 = _PDFNetPython.PDFACompliance_e_PDFA7_8_5
    e_PDFA7_8_6 = _PDFNetPython.PDFACompliance_e_PDFA7_8_6
    e_PDFA7_8_7 = _PDFNetPython.PDFACompliance_e_PDFA7_8_7
    e_PDFA7_8_8 = _PDFNetPython.PDFACompliance_e_PDFA7_8_8
    e_PDFA7_8_9 = _PDFNetPython.PDFACompliance_e_PDFA7_8_9
    e_PDFA7_8_10 = _PDFNetPython.PDFACompliance_e_PDFA7_8_10
    e_PDFA7_8_11 = _PDFNetPython.PDFACompliance_e_PDFA7_8_11
    e_PDFA7_8_12 = _PDFNetPython.PDFACompliance_e_PDFA7_8_12
    e_PDFA7_8_13 = _PDFNetPython.PDFACompliance_e_PDFA7_8_13
    e_PDFA7_8_14 = _PDFNetPython.PDFACompliance_e_PDFA7_8_14
    e_PDFA7_8_15 = _PDFNetPython.PDFACompliance_e_PDFA7_8_15
    e_PDFA7_8_16 = _PDFNetPython.PDFACompliance_e_PDFA7_8_16
    e_PDFA7_8_17 = _PDFNetPython.PDFACompliance_e_PDFA7_8_17
    e_PDFA7_8_18 = _PDFNetPython.PDFACompliance_e_PDFA7_8_18
    e_PDFA7_8_19 = _PDFNetPython.PDFACompliance_e_PDFA7_8_19
    e_PDFA7_8_20 = _PDFNetPython.PDFACompliance_e_PDFA7_8_20
    e_PDFA7_8_21 = _PDFNetPython.PDFACompliance_e_PDFA7_8_21
    e_PDFA7_8_22 = _PDFNetPython.PDFACompliance_e_PDFA7_8_22
    e_PDFA7_8_23 = _PDFNetPython.PDFACompliance_e_PDFA7_8_23
    e_PDFA7_8_24 = _PDFNetPython.PDFACompliance_e_PDFA7_8_24
    e_PDFA7_8_25 = _PDFNetPython.PDFACompliance_e_PDFA7_8_25
    e_PDFA7_8_26 = _PDFNetPython.PDFACompliance_e_PDFA7_8_26
    e_PDFA7_8_27 = _PDFNetPython.PDFACompliance_e_PDFA7_8_27
    e_PDFA7_8_28 = _PDFNetPython.PDFACompliance_e_PDFA7_8_28
    e_PDFA7_8_29 = _PDFNetPython.PDFACompliance_e_PDFA7_8_29
    e_PDFA7_8_30 = _PDFNetPython.PDFACompliance_e_PDFA7_8_30
    e_PDFA7_8_31 = _PDFNetPython.PDFACompliance_e_PDFA7_8_31
    e_PDFA7_11_1 = _PDFNetPython.PDFACompliance_e_PDFA7_11_1
    e_PDFA7_11_2 = _PDFNetPython.PDFACompliance_e_PDFA7_11_2
    e_PDFA7_11_3 = _PDFNetPython.PDFACompliance_e_PDFA7_11_3
    e_PDFA7_11_4 = _PDFNetPython.PDFACompliance_e_PDFA7_11_4
    e_PDFA7_11_5 = _PDFNetPython.PDFACompliance_e_PDFA7_11_5
    e_PDFA9_1 = _PDFNetPython.PDFACompliance_e_PDFA9_1
    e_PDFA9_2 = _PDFNetPython.PDFACompliance_e_PDFA9_2
    e_PDFA9_3 = _PDFNetPython.PDFACompliance_e_PDFA9_3
    e_PDFA9_4 = _PDFNetPython.PDFACompliance_e_PDFA9_4
    e_PDFA3_8_1 = _PDFNetPython.PDFACompliance_e_PDFA3_8_1
    e_PDFA8_2_2 = _PDFNetPython.PDFACompliance_e_PDFA8_2_2
    e_PDFA8_3_3_1 = _PDFNetPython.PDFACompliance_e_PDFA8_3_3_1
    e_PDFA8_3_3_2 = _PDFNetPython.PDFACompliance_e_PDFA8_3_3_2
    e_PDFA8_3_4_1 = _PDFNetPython.PDFACompliance_e_PDFA8_3_4_1
    e_PDFA1_2_3 = _PDFNetPython.PDFACompliance_e_PDFA1_2_3
    e_PDFA1_10_2 = _PDFNetPython.PDFACompliance_e_PDFA1_10_2
    e_PDFA1_10_3 = _PDFNetPython.PDFACompliance_e_PDFA1_10_3
    e_PDFA1_12_10 = _PDFNetPython.PDFACompliance_e_PDFA1_12_10
    e_PDFA1_13_5 = _PDFNetPython.PDFACompliance_e_PDFA1_13_5
    e_PDFA2_3_10 = _PDFNetPython.PDFACompliance_e_PDFA2_3_10
    e_PDFA2_4_2_10 = _PDFNetPython.PDFACompliance_e_PDFA2_4_2_10
    e_PDFA2_4_2_11 = _PDFNetPython.PDFACompliance_e_PDFA2_4_2_11
    e_PDFA2_4_2_12 = _PDFNetPython.PDFACompliance_e_PDFA2_4_2_12
    e_PDFA2_4_2_13 = _PDFNetPython.PDFACompliance_e_PDFA2_4_2_13
    e_PDFA2_5_10 = _PDFNetPython.PDFACompliance_e_PDFA2_5_10
    e_PDFA2_5_11 = _PDFNetPython.PDFACompliance_e_PDFA2_5_11
    e_PDFA2_5_12 = _PDFNetPython.PDFACompliance_e_PDFA2_5_12
    e_PDFA2_8_3_1 = _PDFNetPython.PDFACompliance_e_PDFA2_8_3_1
    e_PDFA2_8_3_2 = _PDFNetPython.PDFACompliance_e_PDFA2_8_3_2
    e_PDFA2_8_3_3 = _PDFNetPython.PDFACompliance_e_PDFA2_8_3_3
    e_PDFA2_8_3_4 = _PDFNetPython.PDFACompliance_e_PDFA2_8_3_4
    e_PDFA2_8_3_5 = _PDFNetPython.PDFACompliance_e_PDFA2_8_3_5
    e_PDFA2_10_20 = _PDFNetPython.PDFACompliance_e_PDFA2_10_20
    e_PDFA2_10_21 = _PDFNetPython.PDFACompliance_e_PDFA2_10_21
    e_PDFA11_0_0 = _PDFNetPython.PDFACompliance_e_PDFA11_0_0
    e_PDFA6_10_0 = _PDFNetPython.PDFACompliance_e_PDFA6_10_0
    e_PDFA6_10_1 = _PDFNetPython.PDFACompliance_e_PDFA6_10_1
    e_PDFA6_2_11_5 = _PDFNetPython.PDFACompliance_e_PDFA6_2_11_5
    e_PDFA6_2_11_6 = _PDFNetPython.PDFACompliance_e_PDFA6_2_11_6
    e_PDFA6_2_11_7 = _PDFNetPython.PDFACompliance_e_PDFA6_2_11_7
    e_PDFA6_2_11_8 = _PDFNetPython.PDFACompliance_e_PDFA6_2_11_8
    e_PDFA6_9_1 = _PDFNetPython.PDFACompliance_e_PDFA6_9_1
    e_PDFA6_9_3 = _PDFNetPython.PDFACompliance_e_PDFA6_9_3
    e_PDFA8_1 = _PDFNetPython.PDFACompliance_e_PDFA8_1
    e_PDFA_3E1 = _PDFNetPython.PDFACompliance_e_PDFA_3E1
    e_PDFA_3E1_1 = _PDFNetPython.PDFACompliance_e_PDFA_3E1_1
    e_PDFA_3E2 = _PDFNetPython.PDFACompliance_e_PDFA_3E2
    e_PDFA_3E3 = _PDFNetPython.PDFACompliance_e_PDFA_3E3
    e_PDFA_LAST = _PDFNetPython.PDFACompliance_e_PDFA_LAST

    def SaveAs(self, *args):
        return _PDFNetPython.PDFACompliance_SaveAs(self, *args)

    def GetErrorCount(self):
        return _PDFNetPython.PDFACompliance_GetErrorCount(self)

    def GetError(self, idx):
        return _PDFNetPython.PDFACompliance_GetError(self, idx)

    def GetRefObjCount(self, id):
        return _PDFNetPython.PDFACompliance_GetRefObjCount(self, id)

    def GetRefObj(self, id, err_idx):
        return _PDFNetPython.PDFACompliance_GetRefObj(self, id, err_idx)
    if _newclass:
        GetPDFAErrorMessage = staticmethod(_PDFNetPython.PDFACompliance_GetPDFAErrorMessage)
    else:
        GetPDFAErrorMessage = _PDFNetPython.PDFACompliance_GetPDFAErrorMessage
    if _newclass:
        GetDeclaredConformance = staticmethod(_PDFNetPython.PDFACompliance_GetDeclaredConformance)
    else:
        GetDeclaredConformance = _PDFNetPython.PDFACompliance_GetDeclaredConformance
    __swig_destroy__ = _PDFNetPython.delete_PDFACompliance
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.PDFACompliance_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_PDFACompliance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_pdfac"] = _PDFNetPython.PDFACompliance_mp_pdfac_set
    __swig_getmethods__["mp_pdfac"] = _PDFNetPython.PDFACompliance_mp_pdfac_get
    if _newclass:
        mp_pdfac = _swig_property(_PDFNetPython.PDFACompliance_mp_pdfac_get, _PDFNetPython.PDFACompliance_mp_pdfac_set)
PDFACompliance_swigregister = _PDFNetPython.PDFACompliance_swigregister
PDFACompliance_swigregister(PDFACompliance)

def PDFACompliance_GetPDFAErrorMessage(id):
    return _PDFNetPython.PDFACompliance_GetPDFAErrorMessage(id)
PDFACompliance_GetPDFAErrorMessage = _PDFNetPython.PDFACompliance_GetPDFAErrorMessage

def PDFACompliance_GetDeclaredConformance(in_doc):
    return _PDFNetPython.PDFACompliance_GetDeclaredConformance(in_doc)
PDFACompliance_GetDeclaredConformance = _PDFNetPython.PDFACompliance_GetDeclaredConformance

class AttrObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttrObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttrObj, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_AttrObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetOwner(self):
        return _PDFNetPython.AttrObj_GetOwner(self)

    def GetSDFObj(self):
        return _PDFNetPython.AttrObj_GetSDFObj(self)
    __swig_destroy__ = _PDFNetPython.delete_AttrObj
    __del__ = lambda self: None
AttrObj_swigregister = _PDFNetPython.AttrObj_swigregister
AttrObj_swigregister(AttrObj)

class ClassMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassMap, name)
    __repr__ = _swig_repr

    def IsValid(self):
        return _PDFNetPython.ClassMap_IsValid(self)

    def GetSDFObj(self):
        return _PDFNetPython.ClassMap_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_ClassMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_ClassMap
    __del__ = lambda self: None
ClassMap_swigregister = _PDFNetPython.ClassMap_swigregister
ClassMap_swigregister(ClassMap)

class ContentItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContentItem, name)
    __repr__ = _swig_repr
    e_MCR = _PDFNetPython.ContentItem_e_MCR
    e_MCID = _PDFNetPython.ContentItem_e_MCID
    e_OBJR = _PDFNetPython.ContentItem_e_OBJR
    e_Unknown = _PDFNetPython.ContentItem_e_Unknown

    def GetType(self):
        return _PDFNetPython.ContentItem_GetType(self)

    def GetParent(self):
        return _PDFNetPython.ContentItem_GetParent(self)

    def GetPage(self):
        return _PDFNetPython.ContentItem_GetPage(self)

    def GetSDFObj(self):
        return _PDFNetPython.ContentItem_GetSDFObj(self)

    def GetMCID(self):
        return _PDFNetPython.ContentItem_GetMCID(self)

    def GetContainingStm(self):
        return _PDFNetPython.ContentItem_GetContainingStm(self)

    def GetStmOwner(self):
        return _PDFNetPython.ContentItem_GetStmOwner(self)

    def GetRefObj(self):
        return _PDFNetPython.ContentItem_GetRefObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_ContentItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_item"] = _PDFNetPython.ContentItem_mp_item_set
    __swig_getmethods__["mp_item"] = _PDFNetPython.ContentItem_mp_item_get
    if _newclass:
        mp_item = _swig_property(_PDFNetPython.ContentItem_mp_item_get, _PDFNetPython.ContentItem_mp_item_set)
    __swig_destroy__ = _PDFNetPython.delete_ContentItem
    __del__ = lambda self: None
ContentItem_swigregister = _PDFNetPython.ContentItem_swigregister
ContentItem_swigregister(ContentItem)

class RoleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RoleMap, name)
    __repr__ = _swig_repr

    def IsValid(self):
        return _PDFNetPython.RoleMap_IsValid(self)

    def GetDirectMap(self, type):
        return _PDFNetPython.RoleMap_GetDirectMap(self, type)

    def GetSDFObj(self):
        return _PDFNetPython.RoleMap_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_RoleMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_RoleMap
    __del__ = lambda self: None
RoleMap_swigregister = _PDFNetPython.RoleMap_swigregister
RoleMap_swigregister(RoleMap)

class STree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STree, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.STree_Create)
    else:
        Create = _PDFNetPython.STree_Create

    def Insert(self, kid, insert_before):
        return _PDFNetPython.STree_Insert(self, kid, insert_before)

    def IsValid(self):
        return _PDFNetPython.STree_IsValid(self)

    def GetNumKids(self):
        return _PDFNetPython.STree_GetNumKids(self)

    def GetKid(self, index):
        return _PDFNetPython.STree_GetKid(self, index)

    def GetElement(self, id_buf, id_buf_sz):
        return _PDFNetPython.STree_GetElement(self, id_buf, id_buf_sz)

    def GetRoleMap(self):
        return _PDFNetPython.STree_GetRoleMap(self)

    def GetClassMap(self):
        return _PDFNetPython.STree_GetClassMap(self)

    def GetSDFObj(self):
        return _PDFNetPython.STree_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_STree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_STree
    __del__ = lambda self: None
STree_swigregister = _PDFNetPython.STree_swigregister
STree_swigregister(STree)

def STree_Create(doc):
    return _PDFNetPython.STree_Create(doc)
STree_Create = _PDFNetPython.STree_Create

class SElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SElement, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.SElement_Create)
    else:
        Create = _PDFNetPython.SElement_Create

    def Insert(self, kid, insert_before):
        return _PDFNetPython.SElement_Insert(self, kid, insert_before)

    def CreateContentItem(self, doc, page, insert_before=-1):
        return _PDFNetPython.SElement_CreateContentItem(self, doc, page, insert_before)

    def IsValid(self):
        return _PDFNetPython.SElement_IsValid(self)

    def GetType(self):
        return _PDFNetPython.SElement_GetType(self)

    def GetNumKids(self):
        return _PDFNetPython.SElement_GetNumKids(self)

    def IsContentItem(self, index):
        return _PDFNetPython.SElement_IsContentItem(self, index)

    def GetAsContentItem(self, index):
        return _PDFNetPython.SElement_GetAsContentItem(self, index)

    def GetAsStructElem(self, index):
        return _PDFNetPython.SElement_GetAsStructElem(self, index)

    def GetParent(self):
        return _PDFNetPython.SElement_GetParent(self)

    def GetStructTreeRoot(self):
        return _PDFNetPython.SElement_GetStructTreeRoot(self)

    def HasTitle(self):
        return _PDFNetPython.SElement_HasTitle(self)

    def GetTitle(self):
        return _PDFNetPython.SElement_GetTitle(self)

    def GetID(self):
        return _PDFNetPython.SElement_GetID(self)

    def HasActualText(self):
        return _PDFNetPython.SElement_HasActualText(self)

    def GetActualText(self):
        return _PDFNetPython.SElement_GetActualText(self)

    def HasAlt(self):
        return _PDFNetPython.SElement_HasAlt(self)

    def GetAlt(self):
        return _PDFNetPython.SElement_GetAlt(self)

    def GetSDFObj(self):
        return _PDFNetPython.SElement_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_SElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_elem"] = _PDFNetPython.SElement_mp_elem_set
    __swig_getmethods__["mp_elem"] = _PDFNetPython.SElement_mp_elem_get
    if _newclass:
        mp_elem = _swig_property(_PDFNetPython.SElement_mp_elem_get, _PDFNetPython.SElement_mp_elem_set)
    __swig_destroy__ = _PDFNetPython.delete_SElement
    __del__ = lambda self: None
SElement_swigregister = _PDFNetPython.SElement_swigregister
SElement_swigregister(SElement)

def SElement_Create(doc, struct_type):
    return _PDFNetPython.SElement_Create(doc, struct_type)
SElement_Create = _PDFNetPython.SElement_Create

class Bookmark(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bookmark, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bookmark, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Bookmark_Create)
    else:
        Create = _PDFNetPython.Bookmark_Create

    def __eq__(self, in_bookmark):
        return _PDFNetPython.Bookmark___eq__(self, in_bookmark)

    def IsValid(self):
        return _PDFNetPython.Bookmark_IsValid(self)

    def HasChildren(self):
        return _PDFNetPython.Bookmark_HasChildren(self)

    def GetNext(self):
        return _PDFNetPython.Bookmark_GetNext(self)

    def GetPrev(self):
        return _PDFNetPython.Bookmark_GetPrev(self)

    def GetFirstChild(self):
        return _PDFNetPython.Bookmark_GetFirstChild(self)

    def GetLastChild(self):
        return _PDFNetPython.Bookmark_GetLastChild(self)

    def GetParent(self):
        return _PDFNetPython.Bookmark_GetParent(self)

    def Find(self, in_title):
        return _PDFNetPython.Bookmark_Find(self, in_title)

    def AddChild(self, *args):
        return _PDFNetPython.Bookmark_AddChild(self, *args)

    def AddNext(self, *args):
        return _PDFNetPython.Bookmark_AddNext(self, *args)

    def AddPrev(self, *args):
        return _PDFNetPython.Bookmark_AddPrev(self, *args)

    def Delete(self):
        return _PDFNetPython.Bookmark_Delete(self)

    def Unlink(self):
        return _PDFNetPython.Bookmark_Unlink(self)

    def GetIndent(self):
        return _PDFNetPython.Bookmark_GetIndent(self)

    def IsOpen(self):
        return _PDFNetPython.Bookmark_IsOpen(self)

    def SetOpen(self, in_open):
        return _PDFNetPython.Bookmark_SetOpen(self, in_open)

    def GetOpenCount(self):
        return _PDFNetPython.Bookmark_GetOpenCount(self)

    def GetTitle(self):
        return _PDFNetPython.Bookmark_GetTitle(self)

    def GetTitleObj(self):
        return _PDFNetPython.Bookmark_GetTitleObj(self)

    def SetTitle(self, title):
        return _PDFNetPython.Bookmark_SetTitle(self, title)

    def GetAction(self):
        return _PDFNetPython.Bookmark_GetAction(self)

    def SetAction(self, in_action):
        return _PDFNetPython.Bookmark_SetAction(self, in_action)

    def RemoveAction(self):
        return _PDFNetPython.Bookmark_RemoveAction(self)

    def GetFlags(self):
        return _PDFNetPython.Bookmark_GetFlags(self)

    def SetFlags(self, in_flags):
        return _PDFNetPython.Bookmark_SetFlags(self, in_flags)

    def GetColor(self):
        return _PDFNetPython.Bookmark_GetColor(self)

    def SetColor(self, in_r=0.0, in_g=0.0, in_b=0.0):
        return _PDFNetPython.Bookmark_SetColor(self, in_r, in_g, in_b)

    def GetSDFObj(self):
        return _PDFNetPython.Bookmark_GetSDFObj(self)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.Bookmark_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.Bookmark_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.Bookmark_GetHandleInternal(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Bookmark(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_obj"] = _PDFNetPython.Bookmark_mp_obj_set
    __swig_getmethods__["mp_obj"] = _PDFNetPython.Bookmark_mp_obj_get
    if _newclass:
        mp_obj = _swig_property(_PDFNetPython.Bookmark_mp_obj_get, _PDFNetPython.Bookmark_mp_obj_set)
    __swig_destroy__ = _PDFNetPython.delete_Bookmark
    __del__ = lambda self: None
Bookmark_swigregister = _PDFNetPython.Bookmark_swigregister
Bookmark_swigregister(Bookmark)

def Bookmark_Create(in_doc, in_title):
    return _PDFNetPython.Bookmark_Create(in_doc, in_title)
Bookmark_Create = _PDFNetPython.Bookmark_Create

def Bookmark_CreateInternal(impl):
    return _PDFNetPython.Bookmark_CreateInternal(impl)
Bookmark_CreateInternal = _PDFNetPython.Bookmark_CreateInternal

class ContentReplacer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentReplacer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContentReplacer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_ContentReplacer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_ContentReplacer
    __del__ = lambda self: None

    def AddImage(self, target_region, replacement_image):
        return _PDFNetPython.ContentReplacer_AddImage(self, target_region, replacement_image)

    def AddText(self, target_region, replacement_text):
        return _PDFNetPython.ContentReplacer_AddText(self, target_region, replacement_text)

    def AddString(self, template_text, replacement_text):
        return _PDFNetPython.ContentReplacer_AddString(self, template_text, replacement_text)

    def SetMatchStrings(self, start_str, end_str):
        return _PDFNetPython.ContentReplacer_SetMatchStrings(self, start_str, end_str)

    def Process(self, page):
        return _PDFNetPython.ContentReplacer_Process(self, page)

    def Destroy(self):
        return _PDFNetPython.ContentReplacer_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython.ContentReplacer_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.ContentReplacer_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.ContentReplacer_mp_impl_get, _PDFNetPython.ContentReplacer_mp_impl_set)
ContentReplacer_swigregister = _PDFNetPython.ContentReplacer_swigregister
ContentReplacer_swigregister(ContentReplacer)

class DiffOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiffOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_DiffOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_DiffOptions
    __del__ = lambda self: None

    def GetAddGroupAnnots(self):
        return _PDFNetPython.DiffOptions_GetAddGroupAnnots(self)

    def SetAddGroupAnnots(self, value):
        return _PDFNetPython.DiffOptions_SetAddGroupAnnots(self, value)

    def GetBlendMode(self):
        return _PDFNetPython.DiffOptions_GetBlendMode(self)

    def SetBlendMode(self, value):
        return _PDFNetPython.DiffOptions_SetBlendMode(self, value)

    def GetColorA(self):
        return _PDFNetPython.DiffOptions_GetColorA(self)

    def SetColorA(self, value):
        return _PDFNetPython.DiffOptions_SetColorA(self, value)

    def GetColorB(self):
        return _PDFNetPython.DiffOptions_GetColorB(self)

    def SetColorB(self, value):
        return _PDFNetPython.DiffOptions_SetColorB(self, value)

    def GetInternalObj(self):
        return _PDFNetPython.DiffOptions_GetInternalObj(self)
DiffOptions_swigregister = _PDFNetPython.DiffOptions_swigregister
DiffOptions_swigregister(DiffOptions)

class TextDiffOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextDiffOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextDiffOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_TextDiffOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TextDiffOptions
    __del__ = lambda self: None

    def GetColorA(self):
        return _PDFNetPython.TextDiffOptions_GetColorA(self)

    def SetColorA(self, color):
        return _PDFNetPython.TextDiffOptions_SetColorA(self, color)

    def GetOpacityA(self):
        return _PDFNetPython.TextDiffOptions_GetOpacityA(self)

    def SetOpacityA(self, opacity):
        return _PDFNetPython.TextDiffOptions_SetOpacityA(self, opacity)

    def GetColorB(self):
        return _PDFNetPython.TextDiffOptions_GetColorB(self)

    def SetColorB(self, color):
        return _PDFNetPython.TextDiffOptions_SetColorB(self, color)

    def GetOpacityB(self):
        return _PDFNetPython.TextDiffOptions_GetOpacityB(self)

    def SetOpacityB(self, opacity):
        return _PDFNetPython.TextDiffOptions_SetOpacityB(self, opacity)

    def GetCompareUsingZOrder(self):
        return _PDFNetPython.TextDiffOptions_GetCompareUsingZOrder(self)

    def SetCompareUsingZOrder(self, value):
        return _PDFNetPython.TextDiffOptions_SetCompareUsingZOrder(self, value)

    def AddIgnoreZonesForPage(self, regions, page_num):
        return _PDFNetPython.TextDiffOptions_AddIgnoreZonesForPage(self, regions, page_num)

    def GetInternalObj(self, *args):
        return _PDFNetPython.TextDiffOptions_GetInternalObj(self, *args)
TextDiffOptions_swigregister = _PDFNetPython.TextDiffOptions_swigregister
TextDiffOptions_swigregister(TextDiffOptions)

class ConversionOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConversionOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConversionOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_ConversionOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_ConversionOptions
    __del__ = lambda self: None

    def GetFileExtension(self):
        return _PDFNetPython.ConversionOptions_GetFileExtension(self)

    def SetFileExtension(self, value):
        return _PDFNetPython.ConversionOptions_SetFileExtension(self, value)

    def GetInternalObj(self):
        return _PDFNetPython.ConversionOptions_GetInternalObj(self)
ConversionOptions_swigregister = _PDFNetPython.ConversionOptions_swigregister
ConversionOptions_swigregister(ConversionOptions)

class OfficeToPDFOptions(ConversionOptions):
    __swig_setmethods__ = {}
    for _s in [ConversionOptions]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfficeToPDFOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [ConversionOptions]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfficeToPDFOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_OfficeToPDFOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_OfficeToPDFOptions
    __del__ = lambda self: None

    def GetApplyPageBreaksToSheet(self):
        return _PDFNetPython.OfficeToPDFOptions_GetApplyPageBreaksToSheet(self)

    def SetApplyPageBreaksToSheet(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetApplyPageBreaksToSheet(self, value)

    def GetDisplayChangeTracking(self):
        return _PDFNetPython.OfficeToPDFOptions_GetDisplayChangeTracking(self)

    def SetDisplayChangeTracking(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetDisplayChangeTracking(self, value)

    def GetExcelDefaultCellBorderWidth(self):
        return _PDFNetPython.OfficeToPDFOptions_GetExcelDefaultCellBorderWidth(self)

    def SetExcelDefaultCellBorderWidth(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetExcelDefaultCellBorderWidth(self, value)

    def GetExcelMaxAllowedCellCount(self):
        return _PDFNetPython.OfficeToPDFOptions_GetExcelMaxAllowedCellCount(self)

    def SetExcelMaxAllowedCellCount(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetExcelMaxAllowedCellCount(self, value)

    def GetLayoutResourcesPluginPath(self):
        return _PDFNetPython.OfficeToPDFOptions_GetLayoutResourcesPluginPath(self)

    def SetLayoutResourcesPluginPath(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetLayoutResourcesPluginPath(self, value)

    def GetLocale(self):
        return _PDFNetPython.OfficeToPDFOptions_GetLocale(self)

    def SetLocale(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetLocale(self, value)

    def GetResourceDocPath(self):
        return _PDFNetPython.OfficeToPDFOptions_GetResourceDocPath(self)

    def SetResourceDocPath(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetResourceDocPath(self, value)

    def GetSmartSubstitutionPluginPath(self):
        return _PDFNetPython.OfficeToPDFOptions_GetSmartSubstitutionPluginPath(self)

    def SetSmartSubstitutionPluginPath(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetSmartSubstitutionPluginPath(self, value)

    def GetTemplateLeftDelimiter(self):
        return _PDFNetPython.OfficeToPDFOptions_GetTemplateLeftDelimiter(self)

    def SetTemplateLeftDelimiter(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetTemplateLeftDelimiter(self, value)

    def GetTemplateParamsJson(self):
        return _PDFNetPython.OfficeToPDFOptions_GetTemplateParamsJson(self)

    def SetTemplateParamsJson(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetTemplateParamsJson(self, value)

    def GetTemplateRightDelimiter(self):
        return _PDFNetPython.OfficeToPDFOptions_GetTemplateRightDelimiter(self)

    def SetTemplateRightDelimiter(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetTemplateRightDelimiter(self, value)

    def GetTemplateStrictMode(self):
        return _PDFNetPython.OfficeToPDFOptions_GetTemplateStrictMode(self)

    def SetTemplateStrictMode(self, value):
        return _PDFNetPython.OfficeToPDFOptions_SetTemplateStrictMode(self, value)
OfficeToPDFOptions_swigregister = _PDFNetPython.OfficeToPDFOptions_swigregister
OfficeToPDFOptions_swigregister(OfficeToPDFOptions)

class WordToPDFOptions(ConversionOptions):
    __swig_setmethods__ = {}
    for _s in [ConversionOptions]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordToPDFOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [ConversionOptions]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WordToPDFOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_WordToPDFOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_WordToPDFOptions
    __del__ = lambda self: None

    def GetLayoutResourcesPluginPath(self):
        return _PDFNetPython.WordToPDFOptions_GetLayoutResourcesPluginPath(self)

    def SetLayoutResourcesPluginPath(self, value):
        return _PDFNetPython.WordToPDFOptions_SetLayoutResourcesPluginPath(self, value)

    def GetResourceDocPath(self):
        return _PDFNetPython.WordToPDFOptions_GetResourceDocPath(self)

    def SetResourceDocPath(self, value):
        return _PDFNetPython.WordToPDFOptions_SetResourceDocPath(self, value)

    def GetSmartSubstitutionPluginPath(self):
        return _PDFNetPython.WordToPDFOptions_GetSmartSubstitutionPluginPath(self)

    def SetSmartSubstitutionPluginPath(self, value):
        return _PDFNetPython.WordToPDFOptions_SetSmartSubstitutionPluginPath(self, value)
WordToPDFOptions_swigregister = _PDFNetPython.WordToPDFOptions_swigregister
WordToPDFOptions_swigregister(WordToPDFOptions)

class DocumentConversion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocumentConversion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocumentConversion, name)
    __repr__ = _swig_repr
    eSuccess = _PDFNetPython.DocumentConversion_eSuccess
    eIncomplete = _PDFNetPython.DocumentConversion_eIncomplete
    eFailure = _PDFNetPython.DocumentConversion_eFailure

    def __init__(self, *args):
        this = _PDFNetPython.new_DocumentConversion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_DocumentConversion
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.DocumentConversion_Destroy(self)

    def TryConvert(self):
        return _PDFNetPython.DocumentConversion_TryConvert(self)

    def Convert(self):
        return _PDFNetPython.DocumentConversion_Convert(self)

    def ConvertNextPage(self):
        return _PDFNetPython.DocumentConversion_ConvertNextPage(self)

    def GetDoc(self):
        return _PDFNetPython.DocumentConversion_GetDoc(self)

    def GetConversionStatus(self):
        return _PDFNetPython.DocumentConversion_GetConversionStatus(self)

    def CancelConversion(self):
        return _PDFNetPython.DocumentConversion_CancelConversion(self)

    def IsCancelled(self):
        return _PDFNetPython.DocumentConversion_IsCancelled(self)

    def HasProgressTracking(self):
        return _PDFNetPython.DocumentConversion_HasProgressTracking(self)

    def GetProgress(self):
        return _PDFNetPython.DocumentConversion_GetProgress(self)

    def GetProgressLabel(self):
        return _PDFNetPython.DocumentConversion_GetProgressLabel(self)

    def GetNumConvertedPages(self):
        return _PDFNetPython.DocumentConversion_GetNumConvertedPages(self)

    def GetErrorString(self):
        return _PDFNetPython.DocumentConversion_GetErrorString(self)

    def GetNumWarnings(self):
        return _PDFNetPython.DocumentConversion_GetNumWarnings(self)

    def GetWarningString(self, index):
        return _PDFNetPython.DocumentConversion_GetWarningString(self, index)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.DocumentConversion_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.DocumentConversion_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.DocumentConversion_GetHandleInternal(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython.DocumentConversion_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.DocumentConversion_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.DocumentConversion_m_impl_get, _PDFNetPython.DocumentConversion_m_impl_set)
DocumentConversion_swigregister = _PDFNetPython.DocumentConversion_swigregister
DocumentConversion_swigregister(DocumentConversion)

def DocumentConversion_CreateInternal(impl):
    return _PDFNetPython.DocumentConversion_CreateInternal(impl)
DocumentConversion_CreateInternal = _PDFNetPython.DocumentConversion_CreateInternal

class TemplateDocument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemplateDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemplateDocument, name)
    __repr__ = _swig_repr
    eSuccess = _PDFNetPython.TemplateDocument_eSuccess
    eIncomplete = _PDFNetPython.TemplateDocument_eIncomplete
    eFailure = _PDFNetPython.TemplateDocument_eFailure

    def __init__(self, *args):
        this = _PDFNetPython.new_TemplateDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TemplateDocument
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.TemplateDocument_Destroy(self)

    def FillTemplateJson(self, json):
        return _PDFNetPython.TemplateDocument_FillTemplateJson(self, json)

    def GetTemplateKeysJson(self):
        return _PDFNetPython.TemplateDocument_GetTemplateKeysJson(self)

    def GetErrorString(self):
        return _PDFNetPython.TemplateDocument_GetErrorString(self)

    def GetConversionStatus(self):
        return _PDFNetPython.TemplateDocument_GetConversionStatus(self)

    def CancelConversion(self):
        return _PDFNetPython.TemplateDocument_CancelConversion(self)

    def IsCancelled(self):
        return _PDFNetPython.TemplateDocument_IsCancelled(self)

    def GetNumWarnings(self):
        return _PDFNetPython.TemplateDocument_GetNumWarnings(self)

    def GetWarningString(self, index):
        return _PDFNetPython.TemplateDocument_GetWarningString(self, index)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.TemplateDocument_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.TemplateDocument_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.TemplateDocument_GetHandleInternal(self)
    __swig_setmethods__["m_impl"] = _PDFNetPython.TemplateDocument_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.TemplateDocument_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.TemplateDocument_m_impl_get, _PDFNetPython.TemplateDocument_m_impl_set)
TemplateDocument_swigregister = _PDFNetPython.TemplateDocument_swigregister
TemplateDocument_swigregister(TemplateDocument)

def TemplateDocument_CreateInternal(impl):
    return _PDFNetPython.TemplateDocument_CreateInternal(impl)
TemplateDocument_CreateInternal = _PDFNetPython.TemplateDocument_CreateInternal

class CADConvertOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CADConvertOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CADConvertOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_CADConvertOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_CADConvertOptions
    __del__ = lambda self: None

    def GetAllowThinLines(self):
        return _PDFNetPython.CADConvertOptions_GetAllowThinLines(self)

    def SetAllowThinLines(self, value):
        return _PDFNetPython.CADConvertOptions_SetAllowThinLines(self, value)

    def GetAutoRotate(self):
        return _PDFNetPython.CADConvertOptions_GetAutoRotate(self)

    def SetAutoRotate(self, value):
        return _PDFNetPython.CADConvertOptions_SetAutoRotate(self, value)

    def GetBackgroundColor(self):
        return _PDFNetPython.CADConvertOptions_GetBackgroundColor(self)

    def SetBackgroundColor(self, value):
        return _PDFNetPython.CADConvertOptions_SetBackgroundColor(self, value)

    def GetColorMode(self):
        return _PDFNetPython.CADConvertOptions_GetColorMode(self)

    def SetColorMode(self, value):
        return _PDFNetPython.CADConvertOptions_SetColorMode(self, value)

    def GetIncludeModel(self):
        return _PDFNetPython.CADConvertOptions_GetIncludeModel(self)

    def SetIncludeModel(self, value):
        return _PDFNetPython.CADConvertOptions_SetIncludeModel(self, value)

    def GetMaxXrefDepth(self):
        return _PDFNetPython.CADConvertOptions_GetMaxXrefDepth(self)

    def SetMaxXrefDepth(self, value):
        return _PDFNetPython.CADConvertOptions_SetMaxXrefDepth(self, value)

    def GetPageHeight(self):
        return _PDFNetPython.CADConvertOptions_GetPageHeight(self)

    def SetPageHeight(self, value):
        return _PDFNetPython.CADConvertOptions_SetPageHeight(self, value)

    def GetPageWidth(self):
        return _PDFNetPython.CADConvertOptions_GetPageWidth(self)

    def SetPageWidth(self, value):
        return _PDFNetPython.CADConvertOptions_SetPageWidth(self, value)

    def GetRasterDPI(self):
        return _PDFNetPython.CADConvertOptions_GetRasterDPI(self)

    def SetRasterDPI(self, value):
        return _PDFNetPython.CADConvertOptions_SetRasterDPI(self, value)

    def AddSheets(self, value):
        return _PDFNetPython.CADConvertOptions_AddSheets(self, value)

    def GetUseScaleFromDocument(self):
        return _PDFNetPython.CADConvertOptions_GetUseScaleFromDocument(self)

    def SetUseScaleFromDocument(self, value):
        return _PDFNetPython.CADConvertOptions_SetUseScaleFromDocument(self, value)

    def GetZoomToExtents(self):
        return _PDFNetPython.CADConvertOptions_GetZoomToExtents(self)

    def SetZoomToExtents(self, value):
        return _PDFNetPython.CADConvertOptions_SetZoomToExtents(self, value)

    def GetInternalObj(self, *args):
        return _PDFNetPython.CADConvertOptions_GetInternalObj(self, *args)
CADConvertOptions_swigregister = _PDFNetPython.CADConvertOptions_swigregister
CADConvertOptions_swigregister(CADConvertOptions)

class ConversionMonitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConversionMonitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConversionMonitor, name)
    __repr__ = _swig_repr

    def Next(self):
        return _PDFNetPython.ConversionMonitor_Next(self)

    def Ready(self):
        return _PDFNetPython.ConversionMonitor_Ready(self)

    def Progress(self):
        return _PDFNetPython.ConversionMonitor_Progress(self)

    def Filter(self):
        return _PDFNetPython.ConversionMonitor_Filter(self)

    def Destroy(self):
        return _PDFNetPython.ConversionMonitor_Destroy(self)
    __swig_destroy__ = _PDFNetPython.delete_ConversionMonitor
    __del__ = lambda self: None

    def __nonzero__(self):
        return _PDFNetPython.ConversionMonitor___nonzero__(self)
    __bool__ = __nonzero__


    __swig_setmethods__["mp_impl"] = _PDFNetPython.ConversionMonitor_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.ConversionMonitor_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.ConversionMonitor_mp_impl_get, _PDFNetPython.ConversionMonitor_mp_impl_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_ConversionMonitor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_owner"] = _PDFNetPython.ConversionMonitor_m_owner_set
    __swig_getmethods__["m_owner"] = _PDFNetPython.ConversionMonitor_m_owner_get
    if _newclass:
        m_owner = _swig_property(_PDFNetPython.ConversionMonitor_m_owner_get, _PDFNetPython.ConversionMonitor_m_owner_set)
ConversionMonitor_swigregister = _PDFNetPython.ConversionMonitor_swigregister
ConversionMonitor_swigregister(ConversionMonitor)

class Convert(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Convert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Convert, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    e_very_strict = _PDFNetPython.Convert_e_very_strict
    e_strict = _PDFNetPython.Convert_e_strict
    e_default = _PDFNetPython.Convert_e_default
    e_keep_most = _PDFNetPython.Convert_e_keep_most
    e_keep_all = _PDFNetPython.Convert_e_keep_all
    e_off = _PDFNetPython.Convert_e_off
    e_simple = _PDFNetPython.Convert_e_simple
    e_fast = _PDFNetPython.Convert_e_fast
    e_high_quality = _PDFNetPython.Convert_e_high_quality
    if _newclass:
        FromXps = staticmethod(_PDFNetPython.Convert_FromXps)
    else:
        FromXps = _PDFNetPython.Convert_FromXps
    if _newclass:
        FromEmf = staticmethod(_PDFNetPython.Convert_FromEmf)
    else:
        FromEmf = _PDFNetPython.Convert_FromEmf
    if _newclass:
        FromText = staticmethod(_PDFNetPython.Convert_FromText)
    else:
        FromText = _PDFNetPython.Convert_FromText
    if _newclass:
        ToEmf = staticmethod(_PDFNetPython.Convert_ToEmf)
    else:
        ToEmf = _PDFNetPython.Convert_ToEmf
    if _newclass:
        ToSvg = staticmethod(_PDFNetPython.Convert_ToSvg)
    else:
        ToSvg = _PDFNetPython.Convert_ToSvg
    if _newclass:
        ToXps = staticmethod(_PDFNetPython.Convert_ToXps)
    else:
        ToXps = _PDFNetPython.Convert_ToXps
    if _newclass:
        PageToHtml = staticmethod(_PDFNetPython.Convert_PageToHtml)
    else:
        PageToHtml = _PDFNetPython.Convert_PageToHtml
    if _newclass:
        PageToHtmlZoned = staticmethod(_PDFNetPython.Convert_PageToHtmlZoned)
    else:
        PageToHtmlZoned = _PDFNetPython.Convert_PageToHtmlZoned
    if _newclass:
        ToHtml = staticmethod(_PDFNetPython.Convert_ToHtml)
    else:
        ToHtml = _PDFNetPython.Convert_ToHtml
    if _newclass:
        ToWord = staticmethod(_PDFNetPython.Convert_ToWord)
    else:
        ToWord = _PDFNetPython.Convert_ToWord
    if _newclass:
        ToExcel = staticmethod(_PDFNetPython.Convert_ToExcel)
    else:
        ToExcel = _PDFNetPython.Convert_ToExcel
    if _newclass:
        ToPowerPoint = staticmethod(_PDFNetPython.Convert_ToPowerPoint)
    else:
        ToPowerPoint = _PDFNetPython.Convert_ToPowerPoint
    if _newclass:
        ToEpub = staticmethod(_PDFNetPython.Convert_ToEpub)
    else:
        ToEpub = _PDFNetPython.Convert_ToEpub
    if _newclass:
        ToTiff = staticmethod(_PDFNetPython.Convert_ToTiff)
    else:
        ToTiff = _PDFNetPython.Convert_ToTiff
    if _newclass:
        ToXod = staticmethod(_PDFNetPython.Convert_ToXod)
    else:
        ToXod = _PDFNetPython.Convert_ToXod
    if _newclass:
        ToXodWithMonitor = staticmethod(_PDFNetPython.Convert_ToXodWithMonitor)
    else:
        ToXodWithMonitor = _PDFNetPython.Convert_ToXodWithMonitor
    if _newclass:
        WordToPDF = staticmethod(_PDFNetPython.Convert_WordToPDF)
    else:
        WordToPDF = _PDFNetPython.Convert_WordToPDF
    if _newclass:
        WordToPDFConversion = staticmethod(_PDFNetPython.Convert_WordToPDFConversion)
    else:
        WordToPDFConversion = _PDFNetPython.Convert_WordToPDFConversion
    if _newclass:
        CreateReflow = staticmethod(_PDFNetPython.Convert_CreateReflow)
    else:
        CreateReflow = _PDFNetPython.Convert_CreateReflow
    if _newclass:
        OfficeToPDF = staticmethod(_PDFNetPython.Convert_OfficeToPDF)
    else:
        OfficeToPDF = _PDFNetPython.Convert_OfficeToPDF
    if _newclass:
        StreamingPDFConversion = staticmethod(_PDFNetPython.Convert_StreamingPDFConversion)
    else:
        StreamingPDFConversion = _PDFNetPython.Convert_StreamingPDFConversion
    if _newclass:
        ToPdf = staticmethod(_PDFNetPython.Convert_ToPdf)
    else:
        ToPdf = _PDFNetPython.Convert_ToPdf
    if _newclass:
        FromCAD = staticmethod(_PDFNetPython.Convert_FromCAD)
    else:
        FromCAD = _PDFNetPython.Convert_FromCAD
    if _newclass:
        FromDICOM = staticmethod(_PDFNetPython.Convert_FromDICOM)
    else:
        FromDICOM = _PDFNetPython.Convert_FromDICOM
    if _newclass:
        FromTiff = staticmethod(_PDFNetPython.Convert_FromTiff)
    else:
        FromTiff = _PDFNetPython.Convert_FromTiff
    if _newclass:
        CreateOfficeTemplate = staticmethod(_PDFNetPython.Convert_CreateOfficeTemplate)
    else:
        CreateOfficeTemplate = _PDFNetPython.Convert_CreateOfficeTemplate
    if _newclass:
        RequiresPrinter = staticmethod(_PDFNetPython.Convert_RequiresPrinter)
    else:
        RequiresPrinter = _PDFNetPython.Convert_RequiresPrinter
Convert_swigregister = _PDFNetPython.Convert_swigregister
Convert_swigregister(Convert)

def Convert_FromXps(*args):
    return _PDFNetPython.Convert_FromXps(*args)
Convert_FromXps = _PDFNetPython.Convert_FromXps

def Convert_FromEmf(in_pdfdoc, in_filename):
    return _PDFNetPython.Convert_FromEmf(in_pdfdoc, in_filename)
Convert_FromEmf = _PDFNetPython.Convert_FromEmf

def Convert_FromText(*args):
    return _PDFNetPython.Convert_FromText(*args)
Convert_FromText = _PDFNetPython.Convert_FromText

def Convert_ToEmf(*args):
    return _PDFNetPython.Convert_ToEmf(*args)
Convert_ToEmf = _PDFNetPython.Convert_ToEmf

def Convert_ToSvg(*args):
    return _PDFNetPython.Convert_ToSvg(*args)
Convert_ToSvg = _PDFNetPython.Convert_ToSvg

def Convert_ToXps(*args):
    return _PDFNetPython.Convert_ToXps(*args)
Convert_ToXps = _PDFNetPython.Convert_ToXps

def Convert_PageToHtml(page):
    return _PDFNetPython.Convert_PageToHtml(page)
Convert_PageToHtml = _PDFNetPython.Convert_PageToHtml

def Convert_PageToHtmlZoned(page, json_zones):
    return _PDFNetPython.Convert_PageToHtmlZoned(page, json_zones)
Convert_PageToHtmlZoned = _PDFNetPython.Convert_PageToHtmlZoned

def Convert_ToHtml(*args):
    return _PDFNetPython.Convert_ToHtml(*args)
Convert_ToHtml = _PDFNetPython.Convert_ToHtml

def Convert_ToWord(*args):
    return _PDFNetPython.Convert_ToWord(*args)
Convert_ToWord = _PDFNetPython.Convert_ToWord

def Convert_ToExcel(*args):
    return _PDFNetPython.Convert_ToExcel(*args)
Convert_ToExcel = _PDFNetPython.Convert_ToExcel

def Convert_ToPowerPoint(*args):
    return _PDFNetPython.Convert_ToPowerPoint(*args)
Convert_ToPowerPoint = _PDFNetPython.Convert_ToPowerPoint

def Convert_ToEpub(*args):
    return _PDFNetPython.Convert_ToEpub(*args)
Convert_ToEpub = _PDFNetPython.Convert_ToEpub

def Convert_ToTiff(*args):
    return _PDFNetPython.Convert_ToTiff(*args)
Convert_ToTiff = _PDFNetPython.Convert_ToTiff

def Convert_ToXod(*args):
    return _PDFNetPython.Convert_ToXod(*args)
Convert_ToXod = _PDFNetPython.Convert_ToXod

def Convert_ToXodWithMonitor(*args):
    return _PDFNetPython.Convert_ToXodWithMonitor(*args)
Convert_ToXodWithMonitor = _PDFNetPython.Convert_ToXodWithMonitor

def Convert_WordToPDF(*args):
    return _PDFNetPython.Convert_WordToPDF(*args)
Convert_WordToPDF = _PDFNetPython.Convert_WordToPDF

def Convert_WordToPDFConversion(*args):
    return _PDFNetPython.Convert_WordToPDFConversion(*args)
Convert_WordToPDFConversion = _PDFNetPython.Convert_WordToPDFConversion

def Convert_CreateReflow(in_page, json_zones):
    return _PDFNetPython.Convert_CreateReflow(in_page, json_zones)
Convert_CreateReflow = _PDFNetPython.Convert_CreateReflow

def Convert_OfficeToPDF(*args):
    return _PDFNetPython.Convert_OfficeToPDF(*args)
Convert_OfficeToPDF = _PDFNetPython.Convert_OfficeToPDF

def Convert_StreamingPDFConversion(*args):
    return _PDFNetPython.Convert_StreamingPDFConversion(*args)
Convert_StreamingPDFConversion = _PDFNetPython.Convert_StreamingPDFConversion

def Convert_ToPdf(in_pdfdoc, in_filename):
    return _PDFNetPython.Convert_ToPdf(in_pdfdoc, in_filename)
Convert_ToPdf = _PDFNetPython.Convert_ToPdf

def Convert_FromCAD(in_pdfdoc, in_filename, opts=None):
    return _PDFNetPython.Convert_FromCAD(in_pdfdoc, in_filename, opts)
Convert_FromCAD = _PDFNetPython.Convert_FromCAD

def Convert_FromDICOM(in_pdfdoc, in_filename, opts=None):
    return _PDFNetPython.Convert_FromDICOM(in_pdfdoc, in_filename, opts)
Convert_FromDICOM = _PDFNetPython.Convert_FromDICOM

def Convert_FromTiff(in_pdfdoc, in_data):
    return _PDFNetPython.Convert_FromTiff(in_pdfdoc, in_data)
Convert_FromTiff = _PDFNetPython.Convert_FromTiff

def Convert_CreateOfficeTemplate(*args):
    return _PDFNetPython.Convert_CreateOfficeTemplate(*args)
Convert_CreateOfficeTemplate = _PDFNetPython.Convert_CreateOfficeTemplate

def Convert_RequiresPrinter(in_filename):
    return _PDFNetPython.Convert_RequiresPrinter(in_filename)
Convert_RequiresPrinter = _PDFNetPython.Convert_RequiresPrinter

class XPSOutputCommonOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XPSOutputCommonOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XPSOutputCommonOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_XPSOutputCommonOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPrintMode(self, print_mode):
        return _PDFNetPython.XPSOutputCommonOptions_SetPrintMode(self, print_mode)

    def SetDPI(self, dpi):
        return _PDFNetPython.XPSOutputCommonOptions_SetDPI(self, dpi)

    def SetRenderPages(self, render):
        return _PDFNetPython.XPSOutputCommonOptions_SetRenderPages(self, render)

    def SetThickenLines(self, thicken):
        return _PDFNetPython.XPSOutputCommonOptions_SetThickenLines(self, thicken)

    def GenerateURLLinks(self, generate):
        return _PDFNetPython.XPSOutputCommonOptions_GenerateURLLinks(self, generate)
    e_op_off = _PDFNetPython.XPSOutputCommonOptions_e_op_off
    e_op_on = _PDFNetPython.XPSOutputCommonOptions_e_op_on
    e_op_pdfx_on = _PDFNetPython.XPSOutputCommonOptions_e_op_pdfx_on

    def SetOverprint(self, mode):
        return _PDFNetPython.XPSOutputCommonOptions_SetOverprint(self, mode)
    __swig_setmethods__["m_obj"] = _PDFNetPython.XPSOutputCommonOptions_m_obj_set
    __swig_getmethods__["m_obj"] = _PDFNetPython.XPSOutputCommonOptions_m_obj_get
    if _newclass:
        m_obj = _swig_property(_PDFNetPython.XPSOutputCommonOptions_m_obj_get, _PDFNetPython.XPSOutputCommonOptions_m_obj_set)
    __swig_destroy__ = _PDFNetPython.delete_XPSOutputCommonOptions
    __del__ = lambda self: None
XPSOutputCommonOptions_swigregister = _PDFNetPython.XPSOutputCommonOptions_swigregister
XPSOutputCommonOptions_swigregister(XPSOutputCommonOptions)

class XPSOutputOptions(XPSOutputCommonOptions):
    __swig_setmethods__ = {}
    for _s in [XPSOutputCommonOptions]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XPSOutputOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [XPSOutputCommonOptions]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XPSOutputOptions, name)
    __repr__ = _swig_repr

    def SetOpenXps(self, openxps):
        return _PDFNetPython.XPSOutputOptions_SetOpenXps(self, openxps)

    def __init__(self):
        this = _PDFNetPython.new_XPSOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_XPSOutputOptions
    __del__ = lambda self: None
XPSOutputOptions_swigregister = _PDFNetPython.XPSOutputOptions_swigregister
XPSOutputOptions_swigregister(XPSOutputOptions)

class XODOutputOptions(XPSOutputCommonOptions):
    __swig_setmethods__ = {}
    for _s in [XPSOutputCommonOptions]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XODOutputOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [XPSOutputCommonOptions]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XODOutputOptions, name)
    __repr__ = _swig_repr
    e_internal_xfdf = _PDFNetPython.XODOutputOptions_e_internal_xfdf
    e_external_xfdf = _PDFNetPython.XODOutputOptions_e_external_xfdf
    e_flatten = _PDFNetPython.XODOutputOptions_e_flatten

    def SetExtractUsingZorder(self, use_zorder):
        return _PDFNetPython.XODOutputOptions_SetExtractUsingZorder(self, use_zorder)

    def SetOutputThumbnails(self, include_thumbs):
        return _PDFNetPython.XODOutputOptions_SetOutputThumbnails(self, include_thumbs)

    def SetThumbnailSize(self, *args):
        return _PDFNetPython.XODOutputOptions_SetThumbnailSize(self, *args)

    def SetElementLimit(self, element_limit):
        return _PDFNetPython.XODOutputOptions_SetElementLimit(self, element_limit)

    def SetOpacityMaskWorkaround(self, opacity_render):
        return _PDFNetPython.XODOutputOptions_SetOpacityMaskWorkaround(self, opacity_render)

    def SetMaximumImagePixels(self, max_pixels):
        return _PDFNetPython.XODOutputOptions_SetMaximumImagePixels(self, max_pixels)

    def SetFlattenContent(self, flatten):
        return _PDFNetPython.XODOutputOptions_SetFlattenContent(self, flatten)

    def SetFlattenThreshold(self, threshold):
        return _PDFNetPython.XODOutputOptions_SetFlattenThreshold(self, threshold)

    def SetPreferJPG(self, prefer_jpg):
        return _PDFNetPython.XODOutputOptions_SetPreferJPG(self, prefer_jpg)

    def SetJPGQuality(self, quality):
        return _PDFNetPython.XODOutputOptions_SetJPGQuality(self, quality)

    def SetSilverlightTextWorkaround(self, workaround):
        return _PDFNetPython.XODOutputOptions_SetSilverlightTextWorkaround(self, workaround)

    def SetAnnotationOutput(self, annot_output):
        return _PDFNetPython.XODOutputOptions_SetAnnotationOutput(self, annot_output)

    def SetExternalParts(self, generate):
        return _PDFNetPython.XODOutputOptions_SetExternalParts(self, generate)

    def SetEncryptPassword(self, arg2):
        return _PDFNetPython.XODOutputOptions_SetEncryptPassword(self, arg2)

    def UseSilverlightFlashCompatible(self, compatible):
        return _PDFNetPython.XODOutputOptions_UseSilverlightFlashCompatible(self, compatible)

    def __init__(self):
        this = _PDFNetPython.new_XODOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_XODOutputOptions
    __del__ = lambda self: None
XODOutputOptions_swigregister = _PDFNetPython.XODOutputOptions_swigregister
XODOutputOptions_swigregister(XODOutputOptions)

class OutputOptionsOCR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputOptionsOCR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputOptionsOCR, name)
    __repr__ = _swig_repr
    e_lang_auto = _PDFNetPython.OutputOptionsOCR_e_lang_auto
    e_lang_catalan = _PDFNetPython.OutputOptionsOCR_e_lang_catalan
    e_lang_danish = _PDFNetPython.OutputOptionsOCR_e_lang_danish
    e_lang_german = _PDFNetPython.OutputOptionsOCR_e_lang_german
    e_lang_english = _PDFNetPython.OutputOptionsOCR_e_lang_english
    e_lang_spanish = _PDFNetPython.OutputOptionsOCR_e_lang_spanish
    e_lang_finnish = _PDFNetPython.OutputOptionsOCR_e_lang_finnish
    e_lang_french = _PDFNetPython.OutputOptionsOCR_e_lang_french
    e_lang_italian = _PDFNetPython.OutputOptionsOCR_e_lang_italian
    e_lang_dutch = _PDFNetPython.OutputOptionsOCR_e_lang_dutch
    e_lang_norwegian = _PDFNetPython.OutputOptionsOCR_e_lang_norwegian
    e_lang_portuguese = _PDFNetPython.OutputOptionsOCR_e_lang_portuguese
    e_lang_polish = _PDFNetPython.OutputOptionsOCR_e_lang_polish
    e_lang_romanian = _PDFNetPython.OutputOptionsOCR_e_lang_romanian
    e_lang_russian = _PDFNetPython.OutputOptionsOCR_e_lang_russian
    e_lang_slovenian = _PDFNetPython.OutputOptionsOCR_e_lang_slovenian
    e_lang_swedish = _PDFNetPython.OutputOptionsOCR_e_lang_swedish
    e_lang_turkish = _PDFNetPython.OutputOptionsOCR_e_lang_turkish
    if _newclass:
        LanguageChoiceToString = staticmethod(_PDFNetPython.OutputOptionsOCR_LanguageChoiceToString)
    else:
        LanguageChoiceToString = _PDFNetPython.OutputOptionsOCR_LanguageChoiceToString

    def __init__(self):
        this = _PDFNetPython.new_OutputOptionsOCR()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_OutputOptionsOCR
    __del__ = lambda self: None
OutputOptionsOCR_swigregister = _PDFNetPython.OutputOptionsOCR_swigregister
OutputOptionsOCR_swigregister(OutputOptionsOCR)

def OutputOptionsOCR_LanguageChoiceToString(language):
    return _PDFNetPython.OutputOptionsOCR_LanguageChoiceToString(language)
OutputOptionsOCR_LanguageChoiceToString = _PDFNetPython.OutputOptionsOCR_LanguageChoiceToString

class HTMLOutputOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTMLOutputOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTMLOutputOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_HTMLOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPreferJPG(self, prefer_jpg):
        return _PDFNetPython.HTMLOutputOptions_SetPreferJPG(self, prefer_jpg)

    def SetJPGQuality(self, quality):
        return _PDFNetPython.HTMLOutputOptions_SetJPGQuality(self, quality)

    def SetDPI(self, dpi):
        return _PDFNetPython.HTMLOutputOptions_SetDPI(self, dpi)

    def SetMaximumImagePixels(self, max_pixels):
        return _PDFNetPython.HTMLOutputOptions_SetMaximumImagePixels(self, max_pixels)
    e_fixed_position = _PDFNetPython.HTMLOutputOptions_e_fixed_position
    e_reflow_paragraphs = _PDFNetPython.HTMLOutputOptions_e_reflow_paragraphs
    e_reflow_full = _PDFNetPython.HTMLOutputOptions_e_reflow_full

    def SetContentReflowSetting(self, reflow):
        return _PDFNetPython.HTMLOutputOptions_SetContentReflowSetting(self, reflow)

    def SetScale(self, scale):
        return _PDFNetPython.HTMLOutputOptions_SetScale(self, scale)

    def SetExternalLinks(self, enable):
        return _PDFNetPython.HTMLOutputOptions_SetExternalLinks(self, enable)

    def SetInternalLinks(self, enable):
        return _PDFNetPython.HTMLOutputOptions_SetInternalLinks(self, enable)

    def SetSimplifyText(self, enable):
        return _PDFNetPython.HTMLOutputOptions_SetSimplifyText(self, enable)

    def SetReportFile(self, path):
        return _PDFNetPython.HTMLOutputOptions_SetReportFile(self, path)

    def SetTitle(self, title):
        return _PDFNetPython.HTMLOutputOptions_SetTitle(self, title)

    def SetImageDPI(self, dpi):
        return _PDFNetPython.HTMLOutputOptions_SetImageDPI(self, dpi)

    def SetEmbedImages(self, embed):
        return _PDFNetPython.HTMLOutputOptions_SetEmbedImages(self, embed)

    def SetFileConversionTimeoutSeconds(self, seconds):
        return _PDFNetPython.HTMLOutputOptions_SetFileConversionTimeoutSeconds(self, seconds)

    def SetPages(self, page_from, page_to):
        return _PDFNetPython.HTMLOutputOptions_SetPages(self, page_from, page_to)

    def SetPDFPassword(self, password):
        return _PDFNetPython.HTMLOutputOptions_SetPDFPassword(self, password)
    e_ocr_image_text = _PDFNetPython.HTMLOutputOptions_e_ocr_image_text
    e_ocr_image = _PDFNetPython.HTMLOutputOptions_e_ocr_image
    e_ocr_text = _PDFNetPython.HTMLOutputOptions_e_ocr_text
    e_ocr_off = _PDFNetPython.HTMLOutputOptions_e_ocr_off
    e_ocr_always = _PDFNetPython.HTMLOutputOptions_e_ocr_always

    def SetSearchableImageSetting(self, setting):
        return _PDFNetPython.HTMLOutputOptions_SetSearchableImageSetting(self, setting)

    def SetSimpleLists(self, enable):
        return _PDFNetPython.HTMLOutputOptions_SetSimpleLists(self, enable)

    def SetConnectHyphens(self, connect):
        return _PDFNetPython.HTMLOutputOptions_SetConnectHyphens(self, connect)

    def SetDisableVerticalSplit(self, disable):
        return _PDFNetPython.HTMLOutputOptions_SetDisableVerticalSplit(self, disable)

    def SetNoPageWidth(self, enable):
        return _PDFNetPython.HTMLOutputOptions_SetNoPageWidth(self, enable)

    def SetLanguage(self, language):
        return _PDFNetPython.HTMLOutputOptions_SetLanguage(self, language)
    __swig_destroy__ = _PDFNetPython.delete_HTMLOutputOptions
    __del__ = lambda self: None
HTMLOutputOptions_swigregister = _PDFNetPython.HTMLOutputOptions_swigregister
HTMLOutputOptions_swigregister(HTMLOutputOptions)

class WordOutputOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordOutputOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordOutputOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_WordOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    e_wof_docx = _PDFNetPython.WordOutputOptions_e_wof_docx
    e_wof_doc = _PDFNetPython.WordOutputOptions_e_wof_doc
    e_wof_rtf = _PDFNetPython.WordOutputOptions_e_wof_rtf
    e_wof_txt = _PDFNetPython.WordOutputOptions_e_wof_txt

    def SetWordOutputFormat(self, format):
        return _PDFNetPython.WordOutputOptions_SetWordOutputFormat(self, format)

    def SetPages(self, page_from, page_to):
        return _PDFNetPython.WordOutputOptions_SetPages(self, page_from, page_to)

    def SetPDFPassword(self, password):
        return _PDFNetPython.WordOutputOptions_SetPDFPassword(self, password)
    e_ocr_image_text = _PDFNetPython.WordOutputOptions_e_ocr_image_text
    e_ocr_image = _PDFNetPython.WordOutputOptions_e_ocr_image
    e_ocr_text = _PDFNetPython.WordOutputOptions_e_ocr_text
    e_ocr_off = _PDFNetPython.WordOutputOptions_e_ocr_off
    e_ocr_always = _PDFNetPython.WordOutputOptions_e_ocr_always

    def SetSearchableImageSetting(self, setting):
        return _PDFNetPython.WordOutputOptions_SetSearchableImageSetting(self, setting)

    def SetConnectHyphens(self, connect):
        return _PDFNetPython.WordOutputOptions_SetConnectHyphens(self, connect)

    def SetLanguage(self, language):
        return _PDFNetPython.WordOutputOptions_SetLanguage(self, language)

    def SetPrioritizeVisualAppearance(self, replica):
        return _PDFNetPython.WordOutputOptions_SetPrioritizeVisualAppearance(self, replica)
    __swig_destroy__ = _PDFNetPython.delete_WordOutputOptions
    __del__ = lambda self: None
WordOutputOptions_swigregister = _PDFNetPython.WordOutputOptions_swigregister
WordOutputOptions_swigregister(WordOutputOptions)

class ExcelOutputOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExcelOutputOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExcelOutputOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_ExcelOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPages(self, page_from, page_to):
        return _PDFNetPython.ExcelOutputOptions_SetPages(self, page_from, page_to)

    def SetPDFPassword(self, password):
        return _PDFNetPython.ExcelOutputOptions_SetPDFPassword(self, password)

    def SetLanguage(self, language):
        return _PDFNetPython.ExcelOutputOptions_SetLanguage(self, language)

    def SetNonTableContent(self, non_tables):
        return _PDFNetPython.ExcelOutputOptions_SetNonTableContent(self, non_tables)

    def SetSingleSheet(self, single_sheet):
        return _PDFNetPython.ExcelOutputOptions_SetSingleSheet(self, single_sheet)
    __swig_destroy__ = _PDFNetPython.delete_ExcelOutputOptions
    __del__ = lambda self: None
ExcelOutputOptions_swigregister = _PDFNetPython.ExcelOutputOptions_swigregister
ExcelOutputOptions_swigregister(ExcelOutputOptions)

class PowerPointOutputOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerPointOutputOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PowerPointOutputOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_PowerPointOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPages(self, page_from, page_to):
        return _PDFNetPython.PowerPointOutputOptions_SetPages(self, page_from, page_to)

    def SetPDFPassword(self, password):
        return _PDFNetPython.PowerPointOutputOptions_SetPDFPassword(self, password)

    def SetLanguage(self, language):
        return _PDFNetPython.PowerPointOutputOptions_SetLanguage(self, language)
    __swig_destroy__ = _PDFNetPython.delete_PowerPointOutputOptions
    __del__ = lambda self: None
PowerPointOutputOptions_swigregister = _PDFNetPython.PowerPointOutputOptions_swigregister
PowerPointOutputOptions_swigregister(PowerPointOutputOptions)

class EPUBOutputOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPUBOutputOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EPUBOutputOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_EPUBOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetExpanded(self, expanded):
        return _PDFNetPython.EPUBOutputOptions_SetExpanded(self, expanded)

    def SetReuseCover(self, reuse):
        return _PDFNetPython.EPUBOutputOptions_SetReuseCover(self, reuse)
    __swig_destroy__ = _PDFNetPython.delete_EPUBOutputOptions
    __del__ = lambda self: None
EPUBOutputOptions_swigregister = _PDFNetPython.EPUBOutputOptions_swigregister
EPUBOutputOptions_swigregister(EPUBOutputOptions)

class SVGOutputOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVGOutputOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVGOutputOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_SVGOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetEmbedImages(self, embed_images):
        return _PDFNetPython.SVGOutputOptions_SetEmbedImages(self, embed_images)

    def SetNoFonts(self, no_fonts):
        return _PDFNetPython.SVGOutputOptions_SetNoFonts(self, no_fonts)

    def SetSvgFonts(self, svg_fonts):
        return _PDFNetPython.SVGOutputOptions_SetSvgFonts(self, svg_fonts)

    def SetEmbedFonts(self, embed_fonts):
        return _PDFNetPython.SVGOutputOptions_SetEmbedFonts(self, embed_fonts)

    def SetNoUnicode(self, no_unicode):
        return _PDFNetPython.SVGOutputOptions_SetNoUnicode(self, no_unicode)

    def SetIndividualCharPlacement(self, individual_char_placement):
        return _PDFNetPython.SVGOutputOptions_SetIndividualCharPlacement(self, individual_char_placement)

    def SetRemoveCharPlacement(self, remove_char_placement):
        return _PDFNetPython.SVGOutputOptions_SetRemoveCharPlacement(self, remove_char_placement)

    def SetFlattenContent(self, flatten):
        return _PDFNetPython.SVGOutputOptions_SetFlattenContent(self, flatten)

    def SetFlattenThreshold(self, threshold):
        return _PDFNetPython.SVGOutputOptions_SetFlattenThreshold(self, threshold)

    def SetFlattenDPI(self, dpi):
        return _PDFNetPython.SVGOutputOptions_SetFlattenDPI(self, dpi)

    def SetFlattenMaximumImagePixels(self, max_pixels):
        return _PDFNetPython.SVGOutputOptions_SetFlattenMaximumImagePixels(self, max_pixels)

    def SetCompress(self, svgz):
        return _PDFNetPython.SVGOutputOptions_SetCompress(self, svgz)

    def SetOutputThumbnails(self, include_thumbs):
        return _PDFNetPython.SVGOutputOptions_SetOutputThumbnails(self, include_thumbs)

    def SetThumbnailSize(self, size):
        return _PDFNetPython.SVGOutputOptions_SetThumbnailSize(self, size)

    def SetCreateXmlWrapper(self, xml):
        return _PDFNetPython.SVGOutputOptions_SetCreateXmlWrapper(self, xml)

    def SetDtd(self, dtd):
        return _PDFNetPython.SVGOutputOptions_SetDtd(self, dtd)

    def SetAnnots(self, annots):
        return _PDFNetPython.SVGOutputOptions_SetAnnots(self, annots)

    def SetOverprint(self, mode):
        return _PDFNetPython.SVGOutputOptions_SetOverprint(self, mode)
    __swig_destroy__ = _PDFNetPython.delete_SVGOutputOptions
    __del__ = lambda self: None
SVGOutputOptions_swigregister = _PDFNetPython.SVGOutputOptions_swigregister
SVGOutputOptions_swigregister(SVGOutputOptions)

class TiffOutputOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiffOutputOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TiffOutputOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_TiffOutputOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetBox(self, type):
        return _PDFNetPython.TiffOutputOptions_SetBox(self, type)

    def SetRotate(self, rotation):
        return _PDFNetPython.TiffOutputOptions_SetRotate(self, rotation)

    def SetClip(self, x1, y1, x2, y2):
        return _PDFNetPython.TiffOutputOptions_SetClip(self, x1, y1, x2, y2)

    def SetPages(self, page_desc):
        return _PDFNetPython.TiffOutputOptions_SetPages(self, page_desc)

    def SetOverprint(self, mode):
        return _PDFNetPython.TiffOutputOptions_SetOverprint(self, mode)

    def SetCMYK(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetCMYK(self, enable)

    def SetDither(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetDither(self, enable)

    def SetGray(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetGray(self, enable)

    def SetMono(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetMono(self, enable)

    def SetAnnots(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetAnnots(self, enable)

    def SetSmooth(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetSmooth(self, enable)

    def SetPrintmode(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetPrintmode(self, enable)

    def SetTransparentPage(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetTransparentPage(self, enable)

    def SetPalettized(self, enable):
        return _PDFNetPython.TiffOutputOptions_SetPalettized(self, enable)

    def SetDPI(self, dpi):
        return _PDFNetPython.TiffOutputOptions_SetDPI(self, dpi)

    def SetGamma(self, gamma):
        return _PDFNetPython.TiffOutputOptions_SetGamma(self, gamma)

    def SetHRes(self, hres):
        return _PDFNetPython.TiffOutputOptions_SetHRes(self, hres)

    def SetVRes(self, vres):
        return _PDFNetPython.TiffOutputOptions_SetVRes(self, vres)
    __swig_destroy__ = _PDFNetPython.delete_TiffOutputOptions
    __del__ = lambda self: None
TiffOutputOptions_swigregister = _PDFNetPython.TiffOutputOptions_swigregister
TiffOutputOptions_swigregister(TiffOutputOptions)

class Printer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Printer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Printer, name)
    __repr__ = _swig_repr
    if _newclass:
        Install = staticmethod(_PDFNetPython.Printer_Install)
    else:
        Install = _PDFNetPython.Printer_Install
    if _newclass:
        Uninstall = staticmethod(_PDFNetPython.Printer_Uninstall)
    else:
        Uninstall = _PDFNetPython.Printer_Uninstall
    if _newclass:
        GetPrinterName = staticmethod(_PDFNetPython.Printer_GetPrinterName)
    else:
        GetPrinterName = _PDFNetPython.Printer_GetPrinterName
    if _newclass:
        SetPrinterName = staticmethod(_PDFNetPython.Printer_SetPrinterName)
    else:
        SetPrinterName = _PDFNetPython.Printer_SetPrinterName
    if _newclass:
        IsInstalled = staticmethod(_PDFNetPython.Printer_IsInstalled)
    else:
        IsInstalled = _PDFNetPython.Printer_IsInstalled
    e_auto = _PDFNetPython.Printer_e_auto
    e_interop_only = _PDFNetPython.Printer_e_interop_only
    e_printer_only = _PDFNetPython.Printer_e_printer_only
    e_prefer_builtin_converter = _PDFNetPython.Printer_e_prefer_builtin_converter
    if _newclass:
        SetMode = staticmethod(_PDFNetPython.Printer_SetMode)
    else:
        SetMode = _PDFNetPython.Printer_SetMode
    if _newclass:
        GetMode = staticmethod(_PDFNetPython.Printer_GetMode)
    else:
        GetMode = _PDFNetPython.Printer_GetMode

    def __init__(self):
        this = _PDFNetPython.new_Printer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Printer
    __del__ = lambda self: None
Printer_swigregister = _PDFNetPython.Printer_swigregister
Printer_swigregister(Printer)

def Printer_Install(*args):
    return _PDFNetPython.Printer_Install(*args)
Printer_Install = _PDFNetPython.Printer_Install

def Printer_Uninstall():
    return _PDFNetPython.Printer_Uninstall()
Printer_Uninstall = _PDFNetPython.Printer_Uninstall

def Printer_GetPrinterName():
    return _PDFNetPython.Printer_GetPrinterName()
Printer_GetPrinterName = _PDFNetPython.Printer_GetPrinterName

def Printer_SetPrinterName(*args):
    return _PDFNetPython.Printer_SetPrinterName(*args)
Printer_SetPrinterName = _PDFNetPython.Printer_SetPrinterName

def Printer_IsInstalled(*args):
    return _PDFNetPython.Printer_IsInstalled(*args)
Printer_IsInstalled = _PDFNetPython.Printer_IsInstalled

def Printer_SetMode(mode):
    return _PDFNetPython.Printer_SetMode(mode)
Printer_SetMode = _PDFNetPython.Printer_SetMode

def Printer_GetMode():
    return _PDFNetPython.Printer_GetMode()
Printer_GetMode = _PDFNetPython.Printer_GetMode

class PathData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathData, name)
    __repr__ = _swig_repr
    e_moveto = _PDFNetPython.PathData_e_moveto
    e_lineto = _PDFNetPython.PathData_e_lineto
    e_cubicto = _PDFNetPython.PathData_e_cubicto
    e_conicto = _PDFNetPython.PathData_e_conicto
    e_rect = _PDFNetPython.PathData_e_rect
    e_closepath = _PDFNetPython.PathData_e_closepath

    def SetOperators(self, operators):
        return _PDFNetPython.PathData_SetOperators(self, operators)

    def SetPoints(self, points):
        return _PDFNetPython.PathData_SetPoints(self, points)

    def GetOperators(self):
        return _PDFNetPython.PathData_GetOperators(self)

    def GetPoints(self):
        return _PDFNetPython.PathData_GetPoints(self)

    def IsDefined(self):
        return _PDFNetPython.PathData_IsDefined(self)

    def GetGlyphIndex(self):
        return _PDFNetPython.PathData_GetGlyphIndex(self)
    __swig_setmethods__["is_def"] = _PDFNetPython.PathData_is_def_set
    __swig_getmethods__["is_def"] = _PDFNetPython.PathData_is_def_get
    if _newclass:
        is_def = _swig_property(_PDFNetPython.PathData_is_def_get, _PDFNetPython.PathData_is_def_set)
    __swig_setmethods__["glyph_index"] = _PDFNetPython.PathData_glyph_index_set
    __swig_getmethods__["glyph_index"] = _PDFNetPython.PathData_glyph_index_get
    if _newclass:
        glyph_index = _swig_property(_PDFNetPython.PathData_glyph_index_get, _PDFNetPython.PathData_glyph_index_set)
    __swig_setmethods__["oprs"] = _PDFNetPython.PathData_oprs_set
    __swig_getmethods__["oprs"] = _PDFNetPython.PathData_oprs_get
    if _newclass:
        oprs = _swig_property(_PDFNetPython.PathData_oprs_get, _PDFNetPython.PathData_oprs_set)
    __swig_setmethods__["pts"] = _PDFNetPython.PathData_pts_set
    __swig_getmethods__["pts"] = _PDFNetPython.PathData_pts_get
    if _newclass:
        pts = _swig_property(_PDFNetPython.PathData_pts_get, _PDFNetPython.PathData_pts_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_PathData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PathData
    __del__ = lambda self: None
PathData_swigregister = _PDFNetPython.PathData_swigregister
PathData_swigregister(PathData)

class ShapedText(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapedText, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapedText, name)
    __repr__ = _swig_repr
    e_FullShaping = _PDFNetPython.ShapedText_e_FullShaping
    e_PartialShaping = _PDFNetPython.ShapedText_e_PartialShaping
    e_NoShaping = _PDFNetPython.ShapedText_e_NoShaping
    e_NoFailure = _PDFNetPython.ShapedText_e_NoFailure
    e_UnsupportedFontType = _PDFNetPython.ShapedText_e_UnsupportedFontType
    e_NotIndexEncoded = _PDFNetPython.ShapedText_e_NotIndexEncoded
    e_FontDataNotFound = _PDFNetPython.ShapedText_e_FontDataNotFound

    def __init__(self, *args):
        this = _PDFNetPython.new_ShapedText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_ShapedText
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.ShapedText_Destroy(self)

    def GetScale(self):
        return _PDFNetPython.ShapedText_GetScale(self)

    def GetShapingStatus(self):
        return _PDFNetPython.ShapedText_GetShapingStatus(self)

    def GetFailureReason(self):
        return _PDFNetPython.ShapedText_GetFailureReason(self)

    def GetText(self):
        return _PDFNetPython.ShapedText_GetText(self)

    def GetNumGlyphs(self):
        return _PDFNetPython.ShapedText_GetNumGlyphs(self)

    def GetGlyph(self, index):
        return _PDFNetPython.ShapedText_GetGlyph(self, index)

    def GetGlyphXPos(self, index):
        return _PDFNetPython.ShapedText_GetGlyphXPos(self, index)

    def GetGlyphYPos(self, index):
        return _PDFNetPython.ShapedText_GetGlyphYPos(self, index)
    __swig_setmethods__["m_impl"] = _PDFNetPython.ShapedText_m_impl_set
    __swig_getmethods__["m_impl"] = _PDFNetPython.ShapedText_m_impl_get
    if _newclass:
        m_impl = _swig_property(_PDFNetPython.ShapedText_m_impl_get, _PDFNetPython.ShapedText_m_impl_set)
ShapedText_swigregister = _PDFNetPython.ShapedText_swigregister
ShapedText_swigregister(ShapedText)

class Font(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    __repr__ = _swig_repr
    e_times_roman = _PDFNetPython.Font_e_times_roman
    e_times_bold = _PDFNetPython.Font_e_times_bold
    e_times_italic = _PDFNetPython.Font_e_times_italic
    e_times_bold_italic = _PDFNetPython.Font_e_times_bold_italic
    e_helvetica = _PDFNetPython.Font_e_helvetica
    e_helvetica_bold = _PDFNetPython.Font_e_helvetica_bold
    e_helvetica_oblique = _PDFNetPython.Font_e_helvetica_oblique
    e_helvetica_bold_oblique = _PDFNetPython.Font_e_helvetica_bold_oblique
    e_courier = _PDFNetPython.Font_e_courier
    e_courier_bold = _PDFNetPython.Font_e_courier_bold
    e_courier_oblique = _PDFNetPython.Font_e_courier_oblique
    e_courier_bold_oblique = _PDFNetPython.Font_e_courier_bold_oblique
    e_symbol = _PDFNetPython.Font_e_symbol
    e_zapf_dingbats = _PDFNetPython.Font_e_zapf_dingbats
    e_null = _PDFNetPython.Font_e_null
    if _newclass:
        CreateTrueTypeFont = staticmethod(_PDFNetPython.Font_CreateTrueTypeFont)
    else:
        CreateTrueTypeFont = _PDFNetPython.Font_CreateTrueTypeFont
    e_IdentityH = _PDFNetPython.Font_e_IdentityH
    e_Indices = _PDFNetPython.Font_e_Indices
    if _newclass:
        CreateCIDTrueTypeFont = staticmethod(_PDFNetPython.Font_CreateCIDTrueTypeFont)
    else:
        CreateCIDTrueTypeFont = _PDFNetPython.Font_CreateCIDTrueTypeFont
    if _newclass:
        Create = staticmethod(_PDFNetPython.Font_Create)
    else:
        Create = _PDFNetPython.Font_Create
    if _newclass:
        CreateType1Font = staticmethod(_PDFNetPython.Font_CreateType1Font)
    else:
        CreateType1Font = _PDFNetPython.Font_CreateType1Font
    e_Type1 = _PDFNetPython.Font_e_Type1
    e_TrueType = _PDFNetPython.Font_e_TrueType
    e_MMType1 = _PDFNetPython.Font_e_MMType1
    e_Type3 = _PDFNetPython.Font_e_Type3
    e_Type0 = _PDFNetPython.Font_e_Type0
    e_CIDType0 = _PDFNetPython.Font_e_CIDType0
    e_CIDType2 = _PDFNetPython.Font_e_CIDType2

    def GetType(self):
        return _PDFNetPython.Font_GetType(self)

    def IsSimple(self):
        return _PDFNetPython.Font_IsSimple(self)

    def GetSDFObj(self):
        return _PDFNetPython.Font_GetSDFObj(self)

    def GetDescriptor(self):
        return _PDFNetPython.Font_GetDescriptor(self)

    def GetName(self):
        return _PDFNetPython.Font_GetName(self)

    def GetFamilyName(self):
        return _PDFNetPython.Font_GetFamilyName(self)

    def IsFixedWidth(self):
        return _PDFNetPython.Font_IsFixedWidth(self)

    def IsSerif(self):
        return _PDFNetPython.Font_IsSerif(self)

    def IsSymbolic(self):
        return _PDFNetPython.Font_IsSymbolic(self)

    def IsItalic(self):
        return _PDFNetPython.Font_IsItalic(self)

    def IsAllCap(self):
        return _PDFNetPython.Font_IsAllCap(self)

    def IsForceBold(self):
        return _PDFNetPython.Font_IsForceBold(self)

    def IsHorizontalMode(self):
        return _PDFNetPython.Font_IsHorizontalMode(self)

    def GetWidth(self, char_code):
        return _PDFNetPython.Font_GetWidth(self, char_code)

    def GetMaxWidth(self):
        return _PDFNetPython.Font_GetMaxWidth(self)

    def GetMissingWidth(self):
        return _PDFNetPython.Font_GetMissingWidth(self)

    def GetCharCodeIterator(self):
        return _PDFNetPython.Font_GetCharCodeIterator(self)

    def GetGlyphPath(self, char_code, conics2cubics, transform=None):
        return _PDFNetPython.Font_GetGlyphPath(self, char_code, conics2cubics, transform)

    def GetShapedText(self, text_to_shape):
        return _PDFNetPython.Font_GetShapedText(self, text_to_shape)

    def MapToUnicode(self, char_code):
        return _PDFNetPython.Font_MapToUnicode(self, char_code)

    def IsEmbedded(self):
        return _PDFNetPython.Font_IsEmbedded(self)

    def GetEmbeddedFontName(self):
        return _PDFNetPython.Font_GetEmbeddedFontName(self)

    def GetEmbeddedFont(self):
        return _PDFNetPython.Font_GetEmbeddedFont(self)

    def GetEmbeddedFontBufSize(self):
        return _PDFNetPython.Font_GetEmbeddedFontBufSize(self)

    def GetUnitsPerEm(self):
        return _PDFNetPython.Font_GetUnitsPerEm(self)

    def GetBBox(self):
        return _PDFNetPython.Font_GetBBox(self)

    def GetAscent(self):
        return _PDFNetPython.Font_GetAscent(self)

    def GetDescent(self):
        return _PDFNetPython.Font_GetDescent(self)

    def GetStandardType1FontType(self):
        return _PDFNetPython.Font_GetStandardType1FontType(self)

    def IsCFF(self):
        return _PDFNetPython.Font_IsCFF(self)

    def GetType3FontMatrix(self):
        return _PDFNetPython.Font_GetType3FontMatrix(self)

    def GetType3GlyphStream(self, char_code):
        return _PDFNetPython.Font_GetType3GlyphStream(self, char_code)

    def GetVerticalAdvance(self, char_code):
        return _PDFNetPython.Font_GetVerticalAdvance(self, char_code)

    def GetDescendant(self):
        return _PDFNetPython.Font_GetDescendant(self)

    def MapToCID(self, char_code):
        return _PDFNetPython.Font_MapToCID(self, char_code)

    def Destroy(self):
        return _PDFNetPython.Font_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Font(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Font
    __del__ = lambda self: None
    __swig_setmethods__["mp_font"] = _PDFNetPython.Font_mp_font_set
    __swig_getmethods__["mp_font"] = _PDFNetPython.Font_mp_font_get
    if _newclass:
        mp_font = _swig_property(_PDFNetPython.Font_mp_font_get, _PDFNetPython.Font_mp_font_set)
Font_swigregister = _PDFNetPython.Font_swigregister
Font_swigregister(Font)

def Font_CreateTrueTypeFont(doc, font_path, embed=True, subset=True):
    return _PDFNetPython.Font_CreateTrueTypeFont(doc, font_path, embed, subset)
Font_CreateTrueTypeFont = _PDFNetPython.Font_CreateTrueTypeFont

def Font_CreateCIDTrueTypeFont(*args):
    return _PDFNetPython.Font_CreateCIDTrueTypeFont(*args)
Font_CreateCIDTrueTypeFont = _PDFNetPython.Font_CreateCIDTrueTypeFont

def Font_Create(*args):
    return _PDFNetPython.Font_Create(*args)
Font_Create = _PDFNetPython.Font_Create

def Font_CreateType1Font(doc, font_path, embed=True):
    return _PDFNetPython.Font_CreateType1Font(doc, font_path, embed)
Font_CreateType1Font = _PDFNetPython.Font_CreateType1Font

class Shading(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shading, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_Shading
    __del__ = lambda self: None
    e_function_shading = _PDFNetPython.Shading_e_function_shading
    e_axial_shading = _PDFNetPython.Shading_e_axial_shading
    e_radial_shading = _PDFNetPython.Shading_e_radial_shading
    e_free_gouraud_shading = _PDFNetPython.Shading_e_free_gouraud_shading
    e_lattice_gouraud_shading = _PDFNetPython.Shading_e_lattice_gouraud_shading
    e_coons_shading = _PDFNetPython.Shading_e_coons_shading
    e_tensor_shading = _PDFNetPython.Shading_e_tensor_shading
    e_null = _PDFNetPython.Shading_e_null

    def GetType(self):
        return _PDFNetPython.Shading_GetType(self)

    def GetSDFObj(self):
        return _PDFNetPython.Shading_GetSDFObj(self)

    def GetBaseColorSpace(self):
        return _PDFNetPython.Shading_GetBaseColorSpace(self)

    def HasBBox(self):
        return _PDFNetPython.Shading_HasBBox(self)

    def GetBBox(self):
        return _PDFNetPython.Shading_GetBBox(self)

    def HasBackground(self):
        return _PDFNetPython.Shading_HasBackground(self)

    def GetBackground(self):
        return _PDFNetPython.Shading_GetBackground(self)

    def GetAntialias(self):
        return _PDFNetPython.Shading_GetAntialias(self)

    def GetParamStart(self):
        return _PDFNetPython.Shading_GetParamStart(self)

    def GetParamEnd(self):
        return _PDFNetPython.Shading_GetParamEnd(self)

    def IsExtendStart(self):
        return _PDFNetPython.Shading_IsExtendStart(self)

    def IsExtendEnd(self):
        return _PDFNetPython.Shading_IsExtendEnd(self)

    def GetCoordsAxial(self):
        return _PDFNetPython.Shading_GetCoordsAxial(self)

    def GetCoordsRadial(self):
        return _PDFNetPython.Shading_GetCoordsRadial(self)

    def GetDomain(self):
        return _PDFNetPython.Shading_GetDomain(self)

    def GetMatrix(self):
        return _PDFNetPython.Shading_GetMatrix(self)

    def GetColor(self, *args):
        return _PDFNetPython.Shading_GetColor(self, *args)

    def Destroy(self):
        return _PDFNetPython.Shading_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Shading(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_shade"] = _PDFNetPython.Shading_mp_shade_set
    __swig_getmethods__["mp_shade"] = _PDFNetPython.Shading_mp_shade_get
    if _newclass:
        mp_shade = _swig_property(_PDFNetPython.Shading_mp_shade_get, _PDFNetPython.Shading_mp_shade_set)
Shading_swigregister = _PDFNetPython.Shading_swigregister
Shading_swigregister(Shading)

class PatternColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PatternColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PatternColor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_PatternColor
    __del__ = lambda self: None
    e_uncolored_tiling_pattern = _PDFNetPython.PatternColor_e_uncolored_tiling_pattern
    e_colored_tiling_pattern = _PDFNetPython.PatternColor_e_colored_tiling_pattern
    e_shading = _PDFNetPython.PatternColor_e_shading
    e_null = _PDFNetPython.PatternColor_e_null

    def GetType(self):
        return _PDFNetPython.PatternColor_GetType(self)

    def GetSDFObj(self):
        return _PDFNetPython.PatternColor_GetSDFObj(self)

    def GetMatrix(self):
        return _PDFNetPython.PatternColor_GetMatrix(self)

    def GetShading(self):
        return _PDFNetPython.PatternColor_GetShading(self)
    e_constant_spacing = _PDFNetPython.PatternColor_e_constant_spacing
    e_no_distortion = _PDFNetPython.PatternColor_e_no_distortion
    e_constant_spacing_fast_fill = _PDFNetPython.PatternColor_e_constant_spacing_fast_fill

    def GetTilingType(self):
        return _PDFNetPython.PatternColor_GetTilingType(self)

    def GetBBox(self):
        return _PDFNetPython.PatternColor_GetBBox(self)

    def GetXStep(self):
        return _PDFNetPython.PatternColor_GetXStep(self)

    def GetYStep(self):
        return _PDFNetPython.PatternColor_GetYStep(self)

    def Destroy(self):
        return _PDFNetPython.PatternColor_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_PatternColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_pc"] = _PDFNetPython.PatternColor_mp_pc_set
    __swig_getmethods__["mp_pc"] = _PDFNetPython.PatternColor_mp_pc_get
    if _newclass:
        mp_pc = _swig_property(_PDFNetPython.PatternColor_mp_pc_get, _PDFNetPython.PatternColor_mp_pc_set)
PatternColor_swigregister = _PDFNetPython.PatternColor_swigregister
PatternColor_swigregister(PatternColor)

class GState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GState, name)
    __repr__ = _swig_repr
    e_transform = _PDFNetPython.GState_e_transform
    e_rendering_intent = _PDFNetPython.GState_e_rendering_intent
    e_stroke_cs = _PDFNetPython.GState_e_stroke_cs
    e_stroke_color = _PDFNetPython.GState_e_stroke_color
    e_fill_cs = _PDFNetPython.GState_e_fill_cs
    e_fill_color = _PDFNetPython.GState_e_fill_color
    e_line_width = _PDFNetPython.GState_e_line_width
    e_line_cap = _PDFNetPython.GState_e_line_cap
    e_line_join = _PDFNetPython.GState_e_line_join
    e_flatness = _PDFNetPython.GState_e_flatness
    e_miter_limit = _PDFNetPython.GState_e_miter_limit
    e_dash_pattern = _PDFNetPython.GState_e_dash_pattern
    e_char_spacing = _PDFNetPython.GState_e_char_spacing
    e_word_spacing = _PDFNetPython.GState_e_word_spacing
    e_horizontal_scale = _PDFNetPython.GState_e_horizontal_scale
    e_leading = _PDFNetPython.GState_e_leading
    e_font = _PDFNetPython.GState_e_font
    e_font_size = _PDFNetPython.GState_e_font_size
    e_text_render_mode = _PDFNetPython.GState_e_text_render_mode
    e_text_rise = _PDFNetPython.GState_e_text_rise
    e_text_knockout = _PDFNetPython.GState_e_text_knockout
    e_text_pos_offset = _PDFNetPython.GState_e_text_pos_offset
    e_blend_mode = _PDFNetPython.GState_e_blend_mode
    e_opacity_fill = _PDFNetPython.GState_e_opacity_fill
    e_opacity_stroke = _PDFNetPython.GState_e_opacity_stroke
    e_alpha_is_shape = _PDFNetPython.GState_e_alpha_is_shape
    e_soft_mask = _PDFNetPython.GState_e_soft_mask
    e_smoothnes = _PDFNetPython.GState_e_smoothnes
    e_auto_stoke_adjust = _PDFNetPython.GState_e_auto_stoke_adjust
    e_stroke_overprint = _PDFNetPython.GState_e_stroke_overprint
    e_fill_overprint = _PDFNetPython.GState_e_fill_overprint
    e_overprint_mode = _PDFNetPython.GState_e_overprint_mode
    e_transfer_funct = _PDFNetPython.GState_e_transfer_funct
    e_BG_funct = _PDFNetPython.GState_e_BG_funct
    e_UCR_funct = _PDFNetPython.GState_e_UCR_funct
    e_halftone = _PDFNetPython.GState_e_halftone
    e_null = _PDFNetPython.GState_e_null

    def GetTransform(self):
        return _PDFNetPython.GState_GetTransform(self)

    def GetStrokeColorSpace(self):
        return _PDFNetPython.GState_GetStrokeColorSpace(self)

    def GetFillColorSpace(self):
        return _PDFNetPython.GState_GetFillColorSpace(self)

    def GetStrokeColor(self):
        return _PDFNetPython.GState_GetStrokeColor(self)

    def GetStrokePattern(self):
        return _PDFNetPython.GState_GetStrokePattern(self)

    def GetFillColor(self):
        return _PDFNetPython.GState_GetFillColor(self)

    def GetFillPattern(self):
        return _PDFNetPython.GState_GetFillPattern(self)

    def GetFlatness(self):
        return _PDFNetPython.GState_GetFlatness(self)
    e_butt_cap = _PDFNetPython.GState_e_butt_cap
    e_round_cap = _PDFNetPython.GState_e_round_cap
    e_square_cap = _PDFNetPython.GState_e_square_cap

    def GetLineCap(self):
        return _PDFNetPython.GState_GetLineCap(self)
    e_miter_join = _PDFNetPython.GState_e_miter_join
    e_round_join = _PDFNetPython.GState_e_round_join
    e_bevel_join = _PDFNetPython.GState_e_bevel_join

    def GetLineJoin(self):
        return _PDFNetPython.GState_GetLineJoin(self)

    def GetLineWidth(self):
        return _PDFNetPython.GState_GetLineWidth(self)

    def GetMiterLimit(self):
        return _PDFNetPython.GState_GetMiterLimit(self)

    def GetDashes(self):
        return _PDFNetPython.GState_GetDashes(self)

    def GetPhase(self):
        return _PDFNetPython.GState_GetPhase(self)

    def GetCharSpacing(self):
        return _PDFNetPython.GState_GetCharSpacing(self)

    def GetWordSpacing(self):
        return _PDFNetPython.GState_GetWordSpacing(self)

    def GetHorizontalScale(self):
        return _PDFNetPython.GState_GetHorizontalScale(self)

    def GetLeading(self):
        return _PDFNetPython.GState_GetLeading(self)

    def GetFont(self):
        return _PDFNetPython.GState_GetFont(self)

    def GetFontSize(self):
        return _PDFNetPython.GState_GetFontSize(self)
    e_fill_text = _PDFNetPython.GState_e_fill_text
    e_stroke_text = _PDFNetPython.GState_e_stroke_text
    e_fill_stroke_text = _PDFNetPython.GState_e_fill_stroke_text
    e_invisible_text = _PDFNetPython.GState_e_invisible_text
    e_fill_clip_text = _PDFNetPython.GState_e_fill_clip_text
    e_stroke_clip_text = _PDFNetPython.GState_e_stroke_clip_text
    e_fill_stroke_clip_text = _PDFNetPython.GState_e_fill_stroke_clip_text
    e_clip_text = _PDFNetPython.GState_e_clip_text

    def GetTextRenderMode(self):
        return _PDFNetPython.GState_GetTextRenderMode(self)

    def GetTextRise(self):
        return _PDFNetPython.GState_GetTextRise(self)

    def IsTextKnockout(self):
        return _PDFNetPython.GState_IsTextKnockout(self)
    e_absolute_colorimetric = _PDFNetPython.GState_e_absolute_colorimetric
    e_relative_colorimetric = _PDFNetPython.GState_e_relative_colorimetric
    e_saturation = _PDFNetPython.GState_e_saturation
    e_perceptual = _PDFNetPython.GState_e_perceptual

    def GetRenderingIntent(self):
        return _PDFNetPython.GState_GetRenderingIntent(self)
    if _newclass:
        GetRenderingIntentType = staticmethod(_PDFNetPython.GState_GetRenderingIntentType)
    else:
        GetRenderingIntentType = _PDFNetPython.GState_GetRenderingIntentType
    e_bl_compatible = _PDFNetPython.GState_e_bl_compatible
    e_bl_normal = _PDFNetPython.GState_e_bl_normal
    e_bl_multiply = _PDFNetPython.GState_e_bl_multiply
    e_bl_screen = _PDFNetPython.GState_e_bl_screen
    e_bl_difference = _PDFNetPython.GState_e_bl_difference
    e_bl_darken = _PDFNetPython.GState_e_bl_darken
    e_bl_lighten = _PDFNetPython.GState_e_bl_lighten
    e_bl_color_dodge = _PDFNetPython.GState_e_bl_color_dodge
    e_bl_color_burn = _PDFNetPython.GState_e_bl_color_burn
    e_bl_exclusion = _PDFNetPython.GState_e_bl_exclusion
    e_bl_hard_light = _PDFNetPython.GState_e_bl_hard_light
    e_bl_overlay = _PDFNetPython.GState_e_bl_overlay
    e_bl_soft_light = _PDFNetPython.GState_e_bl_soft_light
    e_bl_luminosity = _PDFNetPython.GState_e_bl_luminosity
    e_bl_hue = _PDFNetPython.GState_e_bl_hue
    e_bl_saturation = _PDFNetPython.GState_e_bl_saturation
    e_bl_color = _PDFNetPython.GState_e_bl_color

    def GetBlendMode(self):
        return _PDFNetPython.GState_GetBlendMode(self)

    def GetFillOpacity(self):
        return _PDFNetPython.GState_GetFillOpacity(self)

    def GetStrokeOpacity(self):
        return _PDFNetPython.GState_GetStrokeOpacity(self)

    def GetAISFlag(self):
        return _PDFNetPython.GState_GetAISFlag(self)

    def GetSoftMask(self):
        return _PDFNetPython.GState_GetSoftMask(self)

    def GetSoftMaskTransform(self):
        return _PDFNetPython.GState_GetSoftMaskTransform(self)

    def GetStrokeOverprint(self):
        return _PDFNetPython.GState_GetStrokeOverprint(self)

    def GetFillOverprint(self):
        return _PDFNetPython.GState_GetFillOverprint(self)

    def GetOverprintMode(self):
        return _PDFNetPython.GState_GetOverprintMode(self)

    def GetAutoStrokeAdjust(self):
        return _PDFNetPython.GState_GetAutoStrokeAdjust(self)

    def GetSmoothnessTolerance(self):
        return _PDFNetPython.GState_GetSmoothnessTolerance(self)

    def GetTransferFunct(self):
        return _PDFNetPython.GState_GetTransferFunct(self)

    def GetBlackGenFunct(self):
        return _PDFNetPython.GState_GetBlackGenFunct(self)

    def GetUCRFunct(self):
        return _PDFNetPython.GState_GetUCRFunct(self)

    def GetHalftone(self):
        return _PDFNetPython.GState_GetHalftone(self)

    def SetTransform(self, *args):
        return _PDFNetPython.GState_SetTransform(self, *args)

    def Concat(self, *args):
        return _PDFNetPython.GState_Concat(self, *args)

    def SetStrokeColorSpace(self, cs):
        return _PDFNetPython.GState_SetStrokeColorSpace(self, cs)

    def SetFillColorSpace(self, cs):
        return _PDFNetPython.GState_SetFillColorSpace(self, cs)

    def SetStrokeColor(self, *args):
        return _PDFNetPython.GState_SetStrokeColor(self, *args)

    def SetFillColor(self, *args):
        return _PDFNetPython.GState_SetFillColor(self, *args)

    def SetFlatness(self, flatness):
        return _PDFNetPython.GState_SetFlatness(self, flatness)

    def SetLineCap(self, cap):
        return _PDFNetPython.GState_SetLineCap(self, cap)

    def SetLineJoin(self, join):
        return _PDFNetPython.GState_SetLineJoin(self, join)

    def SetLineWidth(self, width):
        return _PDFNetPython.GState_SetLineWidth(self, width)

    def SetMiterLimit(self, miter_limit):
        return _PDFNetPython.GState_SetMiterLimit(self, miter_limit)

    def SetDashPattern(self, dash_array, phase):
        return _PDFNetPython.GState_SetDashPattern(self, dash_array, phase)

    def SetCharSpacing(self, char_spacing):
        return _PDFNetPython.GState_SetCharSpacing(self, char_spacing)

    def SetWordSpacing(self, word_spacing):
        return _PDFNetPython.GState_SetWordSpacing(self, word_spacing)

    def SetHorizontalScale(self, hscale):
        return _PDFNetPython.GState_SetHorizontalScale(self, hscale)

    def SetLeading(self, leading):
        return _PDFNetPython.GState_SetLeading(self, leading)

    def SetFont(self, font, font_sz):
        return _PDFNetPython.GState_SetFont(self, font, font_sz)

    def SetTextRenderMode(self, rmode):
        return _PDFNetPython.GState_SetTextRenderMode(self, rmode)

    def SetTextRise(self, rise):
        return _PDFNetPython.GState_SetTextRise(self, rise)

    def SetTextKnockout(self, knockout):
        return _PDFNetPython.GState_SetTextKnockout(self, knockout)

    def SetRenderingIntent(self, intent):
        return _PDFNetPython.GState_SetRenderingIntent(self, intent)

    def SetBlendMode(self, BM):
        return _PDFNetPython.GState_SetBlendMode(self, BM)

    def SetFillOpacity(self, ca):
        return _PDFNetPython.GState_SetFillOpacity(self, ca)

    def SetStrokeOpacity(self, ca):
        return _PDFNetPython.GState_SetStrokeOpacity(self, ca)

    def SetAISFlag(self, AIS):
        return _PDFNetPython.GState_SetAISFlag(self, AIS)

    def SetSoftMask(self, SM):
        return _PDFNetPython.GState_SetSoftMask(self, SM)

    def SetStrokeOverprint(self, OP):
        return _PDFNetPython.GState_SetStrokeOverprint(self, OP)

    def SetFillOverprint(self, op):
        return _PDFNetPython.GState_SetFillOverprint(self, op)

    def SetOverprintMode(self, OPM):
        return _PDFNetPython.GState_SetOverprintMode(self, OPM)

    def SetAutoStrokeAdjust(self, SA):
        return _PDFNetPython.GState_SetAutoStrokeAdjust(self, SA)

    def SetSmoothnessTolerance(self, SM):
        return _PDFNetPython.GState_SetSmoothnessTolerance(self, SM)

    def SetBlackGenFunct(self, BG):
        return _PDFNetPython.GState_SetBlackGenFunct(self, BG)

    def SetUCRFunct(self, UCR):
        return _PDFNetPython.GState_SetUCRFunct(self, UCR)

    def SetTransferFunct(self, TR):
        return _PDFNetPython.GState_SetTransferFunct(self, TR)

    def SetHalftone(self, HT):
        return _PDFNetPython.GState_SetHalftone(self, HT)

    def __init__(self, *args):
        this = _PDFNetPython.new_GState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_state"] = _PDFNetPython.GState_mp_state_set
    __swig_getmethods__["mp_state"] = _PDFNetPython.GState_mp_state_get
    if _newclass:
        mp_state = _swig_property(_PDFNetPython.GState_mp_state_get, _PDFNetPython.GState_mp_state_set)
    __swig_destroy__ = _PDFNetPython.delete_GState
    __del__ = lambda self: None
GState_swigregister = _PDFNetPython.GState_swigregister
GState_swigregister(GState)

def GState_GetRenderingIntentType(name):
    return _PDFNetPython.GState_GetRenderingIntentType(name)
GState_GetRenderingIntentType = _PDFNetPython.GState_GetRenderingIntentType

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    if _newclass:
        CreateImageMask = staticmethod(_PDFNetPython.Image_CreateImageMask)
    else:
        CreateImageMask = _PDFNetPython.Image_CreateImageMask
    if _newclass:
        CreateSoftMask = staticmethod(_PDFNetPython.Image_CreateSoftMask)
    else:
        CreateSoftMask = _PDFNetPython.Image_CreateSoftMask
    e_none = _PDFNetPython.Image_e_none
    e_jpeg = _PDFNetPython.Image_e_jpeg
    e_jp2 = _PDFNetPython.Image_e_jp2
    e_flate = _PDFNetPython.Image_e_flate
    e_g3 = _PDFNetPython.Image_e_g3
    e_g4 = _PDFNetPython.Image_e_g4
    e_ascii_hex = _PDFNetPython.Image_e_ascii_hex
    if _newclass:
        Create = staticmethod(_PDFNetPython.Image_Create)
    else:
        Create = _PDFNetPython.Image_Create

    def GetSDFObj(self):
        return _PDFNetPython.Image_GetSDFObj(self)

    def IsValid(self):
        return _PDFNetPython.Image_IsValid(self)

    def GetImageData(self):
        return _PDFNetPython.Image_GetImageData(self)

    def GetImageDataSize(self):
        return _PDFNetPython.Image_GetImageDataSize(self)

    def GetImageColorSpace(self):
        return _PDFNetPython.Image_GetImageColorSpace(self)

    def GetImageWidth(self):
        return _PDFNetPython.Image_GetImageWidth(self)

    def GetImageHeight(self):
        return _PDFNetPython.Image_GetImageHeight(self)

    def GetDecodeArray(self):
        return _PDFNetPython.Image_GetDecodeArray(self)

    def GetBitsPerComponent(self):
        return _PDFNetPython.Image_GetBitsPerComponent(self)

    def GetComponentNum(self):
        return _PDFNetPython.Image_GetComponentNum(self)

    def IsImageMask(self):
        return _PDFNetPython.Image_IsImageMask(self)

    def IsImageInterpolate(self):
        return _PDFNetPython.Image_IsImageInterpolate(self)

    def GetMask(self):
        return _PDFNetPython.Image_GetMask(self)

    def SetMask(self, *args):
        return _PDFNetPython.Image_SetMask(self, *args)

    def GetSoftMask(self):
        return _PDFNetPython.Image_GetSoftMask(self)

    def SetSoftMask(self, soft_mask):
        return _PDFNetPython.Image_SetSoftMask(self, soft_mask)

    def GetImageRenderingIntent(self):
        return _PDFNetPython.Image_GetImageRenderingIntent(self)

    def Export(self, *args):
        return _PDFNetPython.Image_Export(self, *args)

    def ExportAsTiff(self, *args):
        return _PDFNetPython.Image_ExportAsTiff(self, *args)

    def ExportAsPng(self, *args):
        return _PDFNetPython.Image_ExportAsPng(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_Image(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_image"] = _PDFNetPython.Image_mp_image_set
    __swig_getmethods__["mp_image"] = _PDFNetPython.Image_mp_image_get
    if _newclass:
        mp_image = _swig_property(_PDFNetPython.Image_mp_image_get, _PDFNetPython.Image_mp_image_set)
    __swig_destroy__ = _PDFNetPython.delete_Image
    __del__ = lambda self: None
Image_swigregister = _PDFNetPython.Image_swigregister
Image_swigregister(Image)

def Image_CreateImageMask(*args):
    return _PDFNetPython.Image_CreateImageMask(*args)
Image_CreateImageMask = _PDFNetPython.Image_CreateImageMask

def Image_CreateSoftMask(*args):
    return _PDFNetPython.Image_CreateSoftMask(*args)
Image_CreateSoftMask = _PDFNetPython.Image_CreateSoftMask

def Image_Create(*args):
    return _PDFNetPython.Image_Create(*args)
Image_Create = _PDFNetPython.Image_Create

class PageLabel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageLabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageLabel, name)
    __repr__ = _swig_repr
    e_decimal = _PDFNetPython.PageLabel_e_decimal
    e_roman_uppercase = _PDFNetPython.PageLabel_e_roman_uppercase
    e_roman_lowercase = _PDFNetPython.PageLabel_e_roman_lowercase
    e_alphabetic_uppercase = _PDFNetPython.PageLabel_e_alphabetic_uppercase
    e_alphabetic_lowercase = _PDFNetPython.PageLabel_e_alphabetic_lowercase
    e_none = _PDFNetPython.PageLabel_e_none
    if _newclass:
        Create = staticmethod(_PDFNetPython.PageLabel_Create)
    else:
        Create = _PDFNetPython.PageLabel_Create

    def __eq__(self, d):
        return _PDFNetPython.PageLabel___eq__(self, d)

    def IsValid(self):
        return _PDFNetPython.PageLabel_IsValid(self)

    def GetLabelTitle(self, page_num):
        return _PDFNetPython.PageLabel_GetLabelTitle(self, page_num)

    def SetStyle(self, style):
        return _PDFNetPython.PageLabel_SetStyle(self, style)

    def GetStyle(self):
        return _PDFNetPython.PageLabel_GetStyle(self)

    def GetPrefix(self):
        return _PDFNetPython.PageLabel_GetPrefix(self)

    def SetPrefix(self, prefix):
        return _PDFNetPython.PageLabel_SetPrefix(self, prefix)

    def GetStart(self):
        return _PDFNetPython.PageLabel_GetStart(self)

    def SetStart(self, start_at):
        return _PDFNetPython.PageLabel_SetStart(self, start_at)

    def GetFirstPageNum(self):
        return _PDFNetPython.PageLabel_GetFirstPageNum(self)

    def GetLastPageNum(self):
        return _PDFNetPython.PageLabel_GetLastPageNum(self)

    def GetSDFObj(self):
        return _PDFNetPython.PageLabel_GetSDFObj(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_PageLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PageLabel
    __del__ = lambda self: None
PageLabel_swigregister = _PDFNetPython.PageLabel_swigregister
PageLabel_swigregister(PageLabel)

def PageLabel_Create(*args):
    return _PDFNetPython.PageLabel_Create(*args)
PageLabel_Create = _PDFNetPython.PageLabel_Create

e_downloadedtype_page = _PDFNetPython.e_downloadedtype_page
e_downloadedtype_thumb = _PDFNetPython.e_downloadedtype_thumb
e_downloadedtype_named_dests = _PDFNetPython.e_downloadedtype_named_dests
e_downloadedtype_outline = _PDFNetPython.e_downloadedtype_outline
e_downloadedtype_finished = _PDFNetPython.e_downloadedtype_finished
e_downloadedtype_failed = _PDFNetPython.e_downloadedtype_failed
e_downloadedtype_opened = _PDFNetPython.e_downloadedtype_opened
class Separation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Separation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Separation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_Separation
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PDFNetPython.new_Separation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def C(self):
        return _PDFNetPython.Separation_C(self)

    def M(self):
        return _PDFNetPython.Separation_M(self)

    def Y(self):
        return _PDFNetPython.Separation_Y(self)

    def K(self):
        return _PDFNetPython.Separation_K(self)

    def GetDataSize(self):
        return _PDFNetPython.Separation_GetDataSize(self)

    def GetSeparationName(self):
        return _PDFNetPython.Separation_GetSeparationName(self)

    def GetData(self):
        return _PDFNetPython.Separation_GetData(self)
    __swig_setmethods__["m_separation_name"] = _PDFNetPython.Separation_m_separation_name_set
    __swig_getmethods__["m_separation_name"] = _PDFNetPython.Separation_m_separation_name_get
    if _newclass:
        m_separation_name = _swig_property(_PDFNetPython.Separation_m_separation_name_get, _PDFNetPython.Separation_m_separation_name_set)
Separation_swigregister = _PDFNetPython.Separation_swigregister
Separation_swigregister(Separation)

class PDFRasterizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFRasterizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFRasterizer, name)
    __repr__ = _swig_repr
    e_BuiltIn = _PDFNetPython.PDFRasterizer_e_BuiltIn
    e_GDIPlus = _PDFNetPython.PDFRasterizer_e_GDIPlus
    e_op_off = _PDFNetPython.PDFRasterizer_e_op_off
    e_op_on = _PDFNetPython.PDFRasterizer_e_op_on
    e_op_pdfx_on = _PDFNetPython.PDFRasterizer_e_op_pdfx_on

    def __init__(self, *args):
        this = _PDFNetPython.new_PDFRasterizer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDFRasterizer
    __del__ = lambda self: None

    def Rasterize(self, page, width, height, stride, num_comps, demult, device_mtx, clip=None, scrl_clip_regions=None):
        return _PDFNetPython.PDFRasterizer_Rasterize(self, page, width, height, stride, num_comps, demult, device_mtx, clip, scrl_clip_regions)

    def RasterizeSeparations(self, page, width, height, mtx, clip, cancel):
        return _PDFNetPython.PDFRasterizer_RasterizeSeparations(self, page, width, height, mtx, clip, cancel)

    def SetDrawAnnotations(self, render_annots):
        return _PDFNetPython.PDFRasterizer_SetDrawAnnotations(self, render_annots)

    def SetHighlightFields(self, highlight_fields):
        return _PDFNetPython.PDFRasterizer_SetHighlightFields(self, highlight_fields)

    def SetAntiAliasing(self, enable_aa):
        return _PDFNetPython.PDFRasterizer_SetAntiAliasing(self, enable_aa)

    def SetPathHinting(self, enable_hinting):
        return _PDFNetPython.PDFRasterizer_SetPathHinting(self, enable_hinting)

    def SetThinLineAdjustment(self, pixel_grid_fit, stroke_adjust):
        return _PDFNetPython.PDFRasterizer_SetThinLineAdjustment(self, pixel_grid_fit, stroke_adjust)

    def SetImageSmoothing(self, smoothing_enabled=True, hq_image_resampling=False):
        return _PDFNetPython.PDFRasterizer_SetImageSmoothing(self, smoothing_enabled, hq_image_resampling)

    def SetCaching(self, enabled=True):
        return _PDFNetPython.PDFRasterizer_SetCaching(self, enabled)

    def SetGamma(self, expgamma):
        return _PDFNetPython.PDFRasterizer_SetGamma(self, expgamma)

    def SetOCGContext(self, ctx):
        return _PDFNetPython.PDFRasterizer_SetOCGContext(self, ctx)

    def SetPrintMode(self, is_printing):
        return _PDFNetPython.PDFRasterizer_SetPrintMode(self, is_printing)

    def SetOverprint(self, op):
        return _PDFNetPython.PDFRasterizer_SetOverprint(self, op)

    def SetErrorReportProc(self, instance):
        return _PDFNetPython.PDFRasterizer_SetErrorReportProc(self, instance)

    def SetRasterizerType(self, type):
        return _PDFNetPython.PDFRasterizer_SetRasterizerType(self, type)

    def GetRasterizerType(self):
        return _PDFNetPython.PDFRasterizer_GetRasterizerType(self)
    e_postprocess_none = _PDFNetPython.PDFRasterizer_e_postprocess_none
    e_postprocess_invert = _PDFNetPython.PDFRasterizer_e_postprocess_invert
    e_postprocess_gradient_map = _PDFNetPython.PDFRasterizer_e_postprocess_gradient_map
    e_postprocess_night_mode = _PDFNetPython.PDFRasterizer_e_postprocess_night_mode

    def SetColorPostProcessMode(self, mode):
        return _PDFNetPython.PDFRasterizer_SetColorPostProcessMode(self, mode)

    def GetColorPostProcessMode(self):
        return _PDFNetPython.PDFRasterizer_GetColorPostProcessMode(self)

    def UpdateBuffer(self):
        return _PDFNetPython.PDFRasterizer_UpdateBuffer(self)

    def Destroy(self):
        return _PDFNetPython.PDFRasterizer_Destroy(self)
    __swig_setmethods__["mp_rast"] = _PDFNetPython.PDFRasterizer_mp_rast_set
    __swig_getmethods__["mp_rast"] = _PDFNetPython.PDFRasterizer_mp_rast_get
    if _newclass:
        mp_rast = _swig_property(_PDFNetPython.PDFRasterizer_mp_rast_get, _PDFNetPython.PDFRasterizer_mp_rast_set)
PDFRasterizer_swigregister = _PDFNetPython.PDFRasterizer_swigregister
PDFRasterizer_swigregister(PDFRasterizer)

class ViewerOptimizedOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerOptimizedOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerOptimizedOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_ViewerOptimizedOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetThumbnailRenderingThreshold(self, threshold):
        return _PDFNetPython.ViewerOptimizedOptions_SetThumbnailRenderingThreshold(self, threshold)

    def SetMinimumInitialThumbnails(self, initial_thumbs):
        return _PDFNetPython.ViewerOptimizedOptions_SetMinimumInitialThumbnails(self, initial_thumbs)

    def SetThumbnailSize(self, size):
        return _PDFNetPython.ViewerOptimizedOptions_SetThumbnailSize(self, size)

    def SetOverprint(self, mode):
        return _PDFNetPython.ViewerOptimizedOptions_SetOverprint(self, mode)
    __swig_setmethods__["m_obj"] = _PDFNetPython.ViewerOptimizedOptions_m_obj_set
    __swig_getmethods__["m_obj"] = _PDFNetPython.ViewerOptimizedOptions_m_obj_get
    if _newclass:
        m_obj = _swig_property(_PDFNetPython.ViewerOptimizedOptions_m_obj_get, _PDFNetPython.ViewerOptimizedOptions_m_obj_set)
    __swig_setmethods__["m_objset"] = _PDFNetPython.ViewerOptimizedOptions_m_objset_set
    __swig_getmethods__["m_objset"] = _PDFNetPython.ViewerOptimizedOptions_m_objset_get
    if _newclass:
        m_objset = _swig_property(_PDFNetPython.ViewerOptimizedOptions_m_objset_get, _PDFNetPython.ViewerOptimizedOptions_m_objset_set)
    __swig_destroy__ = _PDFNetPython.delete_ViewerOptimizedOptions
    __del__ = lambda self: None
ViewerOptimizedOptions_swigregister = _PDFNetPython.ViewerOptimizedOptions_swigregister
ViewerOptimizedOptions_swigregister(ViewerOptimizedOptions)

class RefreshOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefreshOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefreshOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_RefreshOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_RefreshOptions
    __del__ = lambda self: None

    def GetDrawBackgroundOnly(self):
        return _PDFNetPython.RefreshOptions_GetDrawBackgroundOnly(self)

    def SetDrawBackgroundOnly(self, value):
        return _PDFNetPython.RefreshOptions_SetDrawBackgroundOnly(self, value)

    def GetRefreshExisting(self):
        return _PDFNetPython.RefreshOptions_GetRefreshExisting(self)

    def SetRefreshExisting(self, value):
        return _PDFNetPython.RefreshOptions_SetRefreshExisting(self, value)

    def GetUseNonStandardRotation(self):
        return _PDFNetPython.RefreshOptions_GetUseNonStandardRotation(self)

    def SetUseNonStandardRotation(self, value):
        return _PDFNetPython.RefreshOptions_SetUseNonStandardRotation(self, value)

    def GetUseRoundedCorners(self):
        return _PDFNetPython.RefreshOptions_GetUseRoundedCorners(self)

    def SetUseRoundedCorners(self, value):
        return _PDFNetPython.RefreshOptions_SetUseRoundedCorners(self, value)

    def GetInternalObj(self):
        return _PDFNetPython.RefreshOptions_GetInternalObj(self)
RefreshOptions_swigregister = _PDFNetPython.RefreshOptions_swigregister
RefreshOptions_swigregister(RefreshOptions)

class PDFDocViewPrefs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDocViewPrefs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDocViewPrefs, name)
    __repr__ = _swig_repr

    def SetInitialPage(self, dest):
        return _PDFNetPython.PDFDocViewPrefs_SetInitialPage(self, dest)
    e_UseNone = _PDFNetPython.PDFDocViewPrefs_e_UseNone
    e_UseThumbs = _PDFNetPython.PDFDocViewPrefs_e_UseThumbs
    e_UseBookmarks = _PDFNetPython.PDFDocViewPrefs_e_UseBookmarks
    e_FullScreen = _PDFNetPython.PDFDocViewPrefs_e_FullScreen
    e_UseOC = _PDFNetPython.PDFDocViewPrefs_e_UseOC
    e_UseAttachments = _PDFNetPython.PDFDocViewPrefs_e_UseAttachments

    def SetPageMode(self, mode):
        return _PDFNetPython.PDFDocViewPrefs_SetPageMode(self, mode)

    def GetPageMode(self):
        return _PDFNetPython.PDFDocViewPrefs_GetPageMode(self)
    e_Default = _PDFNetPython.PDFDocViewPrefs_e_Default
    e_SinglePage = _PDFNetPython.PDFDocViewPrefs_e_SinglePage
    e_OneColumn = _PDFNetPython.PDFDocViewPrefs_e_OneColumn
    e_TwoColumnLeft = _PDFNetPython.PDFDocViewPrefs_e_TwoColumnLeft
    e_TwoColumnRight = _PDFNetPython.PDFDocViewPrefs_e_TwoColumnRight
    e_TwoPageLeft = _PDFNetPython.PDFDocViewPrefs_e_TwoPageLeft
    e_TwoPageRight = _PDFNetPython.PDFDocViewPrefs_e_TwoPageRight

    def SetLayoutMode(self, layout):
        return _PDFNetPython.PDFDocViewPrefs_SetLayoutMode(self, layout)

    def GetLayoutMode(self):
        return _PDFNetPython.PDFDocViewPrefs_GetLayoutMode(self)
    e_HideToolbar = _PDFNetPython.PDFDocViewPrefs_e_HideToolbar
    e_HideMenubar = _PDFNetPython.PDFDocViewPrefs_e_HideMenubar
    e_HideWindowUI = _PDFNetPython.PDFDocViewPrefs_e_HideWindowUI
    e_FitWindow = _PDFNetPython.PDFDocViewPrefs_e_FitWindow
    e_CenterWindow = _PDFNetPython.PDFDocViewPrefs_e_CenterWindow
    e_DisplayDocTitle = _PDFNetPython.PDFDocViewPrefs_e_DisplayDocTitle

    def SetPref(self, pref, value):
        return _PDFNetPython.PDFDocViewPrefs_SetPref(self, pref, value)

    def GetPref(self, pref):
        return _PDFNetPython.PDFDocViewPrefs_GetPref(self, pref)

    def SetNonFullScreenPageMode(self, mode):
        return _PDFNetPython.PDFDocViewPrefs_SetNonFullScreenPageMode(self, mode)

    def GetNonFullScreenPageMode(self):
        return _PDFNetPython.PDFDocViewPrefs_GetNonFullScreenPageMode(self)

    def SetDirection(self, left_to_right):
        return _PDFNetPython.PDFDocViewPrefs_SetDirection(self, left_to_right)

    def GetDirection(self):
        return _PDFNetPython.PDFDocViewPrefs_GetDirection(self)

    def SetViewArea(self, box):
        return _PDFNetPython.PDFDocViewPrefs_SetViewArea(self, box)

    def GetViewArea(self):
        return _PDFNetPython.PDFDocViewPrefs_GetViewArea(self)

    def SetViewClip(self, box):
        return _PDFNetPython.PDFDocViewPrefs_SetViewClip(self, box)

    def GetViewClip(self):
        return _PDFNetPython.PDFDocViewPrefs_GetViewClip(self)

    def SetPrintArea(self, box):
        return _PDFNetPython.PDFDocViewPrefs_SetPrintArea(self, box)

    def GetPrintArea(self):
        return _PDFNetPython.PDFDocViewPrefs_GetPrintArea(self)

    def SetPrintClip(self, box):
        return _PDFNetPython.PDFDocViewPrefs_SetPrintClip(self, box)

    def GetPrintClip(self):
        return _PDFNetPython.PDFDocViewPrefs_GetPrintClip(self)

    def GetSDFObj(self):
        return _PDFNetPython.PDFDocViewPrefs_GetSDFObj(self)
    __swig_setmethods__["mp_prefs"] = _PDFNetPython.PDFDocViewPrefs_mp_prefs_set
    __swig_getmethods__["mp_prefs"] = _PDFNetPython.PDFDocViewPrefs_mp_prefs_get
    if _newclass:
        mp_prefs = _swig_property(_PDFNetPython.PDFDocViewPrefs_mp_prefs_get, _PDFNetPython.PDFDocViewPrefs_mp_prefs_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_PDFDocViewPrefs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDFDocViewPrefs
    __del__ = lambda self: None
PDFDocViewPrefs_swigregister = _PDFNetPython.PDFDocViewPrefs_swigregister
PDFDocViewPrefs_swigregister(PDFDocViewPrefs)

class PDFDocInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDocInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDocInfo, name)
    __repr__ = _swig_repr

    def GetTitle(self):
        return _PDFNetPython.PDFDocInfo_GetTitle(self)

    def GetTitleObj(self):
        return _PDFNetPython.PDFDocInfo_GetTitleObj(self)

    def SetTitle(self, title):
        return _PDFNetPython.PDFDocInfo_SetTitle(self, title)

    def GetAuthor(self):
        return _PDFNetPython.PDFDocInfo_GetAuthor(self)

    def GetAuthorObj(self):
        return _PDFNetPython.PDFDocInfo_GetAuthorObj(self)

    def SetAuthor(self, author):
        return _PDFNetPython.PDFDocInfo_SetAuthor(self, author)

    def GetSubject(self):
        return _PDFNetPython.PDFDocInfo_GetSubject(self)

    def GetSubjectObj(self):
        return _PDFNetPython.PDFDocInfo_GetSubjectObj(self)

    def SetSubject(self, subject):
        return _PDFNetPython.PDFDocInfo_SetSubject(self, subject)

    def GetKeywords(self):
        return _PDFNetPython.PDFDocInfo_GetKeywords(self)

    def GetKeywordsObj(self):
        return _PDFNetPython.PDFDocInfo_GetKeywordsObj(self)

    def SetKeywords(self, keywords):
        return _PDFNetPython.PDFDocInfo_SetKeywords(self, keywords)

    def GetCreator(self):
        return _PDFNetPython.PDFDocInfo_GetCreator(self)

    def GetCreatorObj(self):
        return _PDFNetPython.PDFDocInfo_GetCreatorObj(self)

    def SetCreator(self, creator):
        return _PDFNetPython.PDFDocInfo_SetCreator(self, creator)

    def GetProducer(self):
        return _PDFNetPython.PDFDocInfo_GetProducer(self)

    def GetProducerObj(self):
        return _PDFNetPython.PDFDocInfo_GetProducerObj(self)

    def SetProducer(self, producer):
        return _PDFNetPython.PDFDocInfo_SetProducer(self, producer)

    def GetCreationDate(self):
        return _PDFNetPython.PDFDocInfo_GetCreationDate(self)

    def SetCreationDate(self, creation_date):
        return _PDFNetPython.PDFDocInfo_SetCreationDate(self, creation_date)

    def GetModDate(self):
        return _PDFNetPython.PDFDocInfo_GetModDate(self)

    def SetModDate(self, mod_date):
        return _PDFNetPython.PDFDocInfo_SetModDate(self, mod_date)

    def GetSDFObj(self):
        return _PDFNetPython.PDFDocInfo_GetSDFObj(self)
    __swig_setmethods__["mp_info"] = _PDFNetPython.PDFDocInfo_mp_info_set
    __swig_getmethods__["mp_info"] = _PDFNetPython.PDFDocInfo_mp_info_get
    if _newclass:
        mp_info = _swig_property(_PDFNetPython.PDFDocInfo_mp_info_get, _PDFNetPython.PDFDocInfo_mp_info_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_PDFDocInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDFDocInfo
    __del__ = lambda self: None
PDFDocInfo_swigregister = _PDFNetPython.PDFDocInfo_swigregister
PDFDocInfo_swigregister(PDFDocInfo)

class PDFDoc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDoc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDoc, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_PDFDoc
    __del__ = lambda self: None

    def Close(self):
        return _PDFNetPython.PDFDoc_Close(self)

    def IsEncrypted(self):
        return _PDFNetPython.PDFDoc_IsEncrypted(self)

    def InitSecurityHandler(self):
        return _PDFNetPython.PDFDoc_InitSecurityHandler(self)

    def InitStdSecurityHandler(self, *args):
        return _PDFNetPython.PDFDoc_InitStdSecurityHandler(self, *args)

    def GetSecurityHandler(self):
        return _PDFNetPython.PDFDoc_GetSecurityHandler(self)

    def SetSecurityHandler(self, handler):
        return _PDFNetPython.PDFDoc_SetSecurityHandler(self, handler)

    def RemoveSecurity(self):
        return _PDFNetPython.PDFDoc_RemoveSecurity(self)

    def HasSignatures(self):
        return _PDFNetPython.PDFDoc_HasSignatures(self)

    def AddSignatureHandler(self, signature_handler):
        return _PDFNetPython.PDFDoc_AddSignatureHandler(self, signature_handler)

    def AddStdSignatureHandler(self, *args):
        return _PDFNetPython.PDFDoc_AddStdSignatureHandler(self, *args)

    def RemoveSignatureHandler(self, signature_handler_id):
        return _PDFNetPython.PDFDoc_RemoveSignatureHandler(self, signature_handler_id)

    def GetSignatureHandler(self, signature_handler_id):
        return _PDFNetPython.PDFDoc_GetSignatureHandler(self, signature_handler_id)

    def GetUndoManager(self):
        return _PDFNetPython.PDFDoc_GetUndoManager(self)

    def CreateDigitalSignatureField(self, *args):
        return _PDFNetPython.PDFDoc_CreateDigitalSignatureField(self, *args)

    def GetDigitalSignatureFieldIterator(self):
        return _PDFNetPython.PDFDoc_GetDigitalSignatureFieldIterator(self)

    def GetDigitalSignaturePermissions(self):
        return _PDFNetPython.PDFDoc_GetDigitalSignaturePermissions(self)

    def GetDocInfo(self):
        return _PDFNetPython.PDFDoc_GetDocInfo(self)

    def GetViewPrefs(self):
        return _PDFNetPython.PDFDoc_GetViewPrefs(self)
    e_action_trigger_doc_will_close = _PDFNetPython.PDFDoc_e_action_trigger_doc_will_close
    e_action_trigger_doc_will_save = _PDFNetPython.PDFDoc_e_action_trigger_doc_will_save
    e_action_trigger_doc_did_save = _PDFNetPython.PDFDoc_e_action_trigger_doc_did_save
    e_action_trigger_doc_will_print = _PDFNetPython.PDFDoc_e_action_trigger_doc_will_print
    e_action_trigger_doc_did_print = _PDFNetPython.PDFDoc_e_action_trigger_doc_did_print

    def GetTriggerAction(self, trigger):
        return _PDFNetPython.PDFDoc_GetTriggerAction(self, trigger)

    def IsModified(self):
        return _PDFNetPython.PDFDoc_IsModified(self)

    def HasRepairedXRef(self):
        return _PDFNetPython.PDFDoc_HasRepairedXRef(self)

    def IsLinearized(self):
        return _PDFNetPython.PDFDoc_IsLinearized(self)

    def HasDownloader(self):
        return _PDFNetPython.PDFDoc_HasDownloader(self)

    def GetDownloadedByteCount(self):
        return _PDFNetPython.PDFDoc_GetDownloadedByteCount(self)

    def GetTotalRemoteByteCount(self):
        return _PDFNetPython.PDFDoc_GetTotalRemoteByteCount(self)

    def Save(self, *args):
        return _PDFNetPython.PDFDoc_Save(self, *args)

    def SaveCustomSignature(self, *args):
        return _PDFNetPython.PDFDoc_SaveCustomSignature(self, *args)

    def GetPageIterator(self, page_number=1):
        return _PDFNetPython.PDFDoc_GetPageIterator(self, page_number)

    def GetPage(self, page_number):
        return _PDFNetPython.PDFDoc_GetPage(self, page_number)

    def PageRemove(self, page_itr):
        return _PDFNetPython.PDFDoc_PageRemove(self, page_itr)
    e_none = _PDFNetPython.PDFDoc_e_none
    e_insert_bookmark = _PDFNetPython.PDFDoc_e_insert_bookmark
    e_insert_goto_bookmark = _PDFNetPython.PDFDoc_e_insert_goto_bookmark

    def PageInsert(self, where, page):
        return _PDFNetPython.PDFDoc_PageInsert(self, where, page)

    def InsertPages(self, *args):
        return _PDFNetPython.PDFDoc_InsertPages(self, *args)

    def MovePages(self, *args):
        return _PDFNetPython.PDFDoc_MovePages(self, *args)

    def PagePushFront(self, page):
        return _PDFNetPython.PDFDoc_PagePushFront(self, page)

    def PagePushBack(self, page):
        return _PDFNetPython.PDFDoc_PagePushBack(self, page)

    def ImportPages(self, pages, import_bookmarks=False):
        return _PDFNetPython.PDFDoc_ImportPages(self, pages, import_bookmarks)

    def PageCreate(self, *args):
        return _PDFNetPython.PDFDoc_PageCreate(self, *args)

    def AppendTextDiff(self, *args):
        return _PDFNetPython.PDFDoc_AppendTextDiff(self, *args)
    if _newclass:
        HighlightTextDiff = staticmethod(_PDFNetPython.PDFDoc_HighlightTextDiff)
    else:
        HighlightTextDiff = _PDFNetPython.PDFDoc_HighlightTextDiff

    def GetFirstBookmark(self):
        return _PDFNetPython.PDFDoc_GetFirstBookmark(self)

    def AddRootBookmark(self, root_bookmark):
        return _PDFNetPython.PDFDoc_AddRootBookmark(self, root_bookmark)

    def GetTrailer(self):
        return _PDFNetPython.PDFDoc_GetTrailer(self)

    def GetRoot(self):
        return _PDFNetPython.PDFDoc_GetRoot(self)

    def GetPages(self):
        return _PDFNetPython.PDFDoc_GetPages(self)

    def GetPageCount(self):
        return _PDFNetPython.PDFDoc_GetPageCount(self)

    def GetFieldIterator(self, *args):
        return _PDFNetPython.PDFDoc_GetFieldIterator(self, *args)

    def GetField(self, field_name):
        return _PDFNetPython.PDFDoc_GetField(self, field_name)

    def FieldCreate(self, *args):
        return _PDFNetPython.PDFDoc_FieldCreate(self, *args)

    def RefreshFieldAppearances(self):
        return _PDFNetPython.PDFDoc_RefreshFieldAppearances(self)

    def RefreshAnnotAppearances(self, options=None):
        return _PDFNetPython.PDFDoc_RefreshAnnotAppearances(self, options)

    def FlattenAnnotations(self, forms_only=False):
        return _PDFNetPython.PDFDoc_FlattenAnnotations(self, forms_only)

    def GetAcroForm(self):
        return _PDFNetPython.PDFDoc_GetAcroForm(self)
    e_forms_only = _PDFNetPython.PDFDoc_e_forms_only
    e_annots_only = _PDFNetPython.PDFDoc_e_annots_only
    e_both = _PDFNetPython.PDFDoc_e_both
    e_annots_only_no_links = _PDFNetPython.PDFDoc_e_annots_only_no_links

    def FDFExtract(self, *args):
        return _PDFNetPython.PDFDoc_FDFExtract(self, *args)

    def FDFMerge(self, fdf_doc):
        return _PDFNetPython.PDFDoc_FDFMerge(self, fdf_doc)

    def FDFUpdate(self, fdf_doc):
        return _PDFNetPython.PDFDoc_FDFUpdate(self, fdf_doc)

    def GetOpenAction(self):
        return _PDFNetPython.PDFDoc_GetOpenAction(self)

    def SetOpenAction(self, action):
        return _PDFNetPython.PDFDoc_SetOpenAction(self, action)

    def AddFileAttachment(self, file_key, embedded_file):
        return _PDFNetPython.PDFDoc_AddFileAttachment(self, file_key, embedded_file)

    def GetPageLabel(self, page_num):
        return _PDFNetPython.PDFDoc_GetPageLabel(self, page_num)

    def SetPageLabel(self, page_num, label):
        return _PDFNetPython.PDFDoc_SetPageLabel(self, page_num, label)

    def RemovePageLabel(self, page_num):
        return _PDFNetPython.PDFDoc_RemovePageLabel(self, page_num)

    def IsTagged(self):
        return _PDFNetPython.PDFDoc_IsTagged(self)

    def GetStructTree(self):
        return _PDFNetPython.PDFDoc_GetStructTree(self)

    def HasOC(self):
        return _PDFNetPython.PDFDoc_HasOC(self)

    def GetOCGs(self):
        return _PDFNetPython.PDFDoc_GetOCGs(self)

    def GetOCGConfig(self):
        return _PDFNetPython.PDFDoc_GetOCGConfig(self)

    def AddHighlights(self, hilite):
        return _PDFNetPython.PDFDoc_AddHighlights(self, hilite)

    def CreateIndirectName(self, name):
        return _PDFNetPython.PDFDoc_CreateIndirectName(self, name)

    def CreateIndirectArray(self):
        return _PDFNetPython.PDFDoc_CreateIndirectArray(self)

    def CreateIndirectBool(self, value):
        return _PDFNetPython.PDFDoc_CreateIndirectBool(self, value)

    def CreateIndirectDict(self):
        return _PDFNetPython.PDFDoc_CreateIndirectDict(self)

    def CreateIndirectNull(self):
        return _PDFNetPython.PDFDoc_CreateIndirectNull(self)

    def CreateIndirectNumber(self, value):
        return _PDFNetPython.PDFDoc_CreateIndirectNumber(self, value)

    def CreateIndirectString(self, *args):
        return _PDFNetPython.PDFDoc_CreateIndirectString(self, *args)

    def CreateIndirectStream(self, *args):
        return _PDFNetPython.PDFDoc_CreateIndirectStream(self, *args)

    def GetSDFDoc(self):
        return _PDFNetPython.PDFDoc_GetSDFDoc(self)

    def Lock(self):
        return _PDFNetPython.PDFDoc_Lock(self)

    def Unlock(self):
        return _PDFNetPython.PDFDoc_Unlock(self)

    def TryLock(self, milliseconds=0):
        return _PDFNetPython.PDFDoc_TryLock(self, milliseconds)

    def LockRead(self):
        return _PDFNetPython.PDFDoc_LockRead(self)

    def UnlockRead(self):
        return _PDFNetPython.PDFDoc_UnlockRead(self)

    def TryLockRead(self, milliseconds=0):
        return _PDFNetPython.PDFDoc_TryLockRead(self, milliseconds)

    def GetFileName(self):
        return _PDFNetPython.PDFDoc_GetFileName(self)

    def GenerateThumbnails(self, size):
        return _PDFNetPython.PDFDoc_GenerateThumbnails(self, size)

    def AppendVisualDiff(self, p1, p2, opts):
        return _PDFNetPython.PDFDoc_AppendVisualDiff(self, p1, p2, opts)

    def SaveViewerOptimized(self, *args):
        return _PDFNetPython.PDFDoc_SaveViewerOptimized(self, *args)
    e_unsigned = _PDFNetPython.PDFDoc_e_unsigned
    e_failure = _PDFNetPython.PDFDoc_e_failure
    e_untrusted = _PDFNetPython.PDFDoc_e_untrusted
    e_unsupported = _PDFNetPython.PDFDoc_e_unsupported
    e_verified = _PDFNetPython.PDFDoc_e_verified

    def VerifySignedDigitalSignatures(self, in_opts):
        return _PDFNetPython.PDFDoc_VerifySignedDigitalSignatures(self, in_opts)

    def MergeXFDF(self, *args):
        return _PDFNetPython.PDFDoc_MergeXFDF(self, *args)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.PDFDoc_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.PDFDoc_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.PDFDoc_GetHandleInternal(self)
    __swig_setmethods__["mp_doc"] = _PDFNetPython.PDFDoc_mp_doc_set
    __swig_getmethods__["mp_doc"] = _PDFNetPython.PDFDoc_mp_doc_get
    if _newclass:
        mp_doc = _swig_property(_PDFNetPython.PDFDoc_mp_doc_get, _PDFNetPython.PDFDoc_mp_doc_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_PDFDoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
PDFDoc_swigregister = _PDFNetPython.PDFDoc_swigregister
PDFDoc_swigregister(PDFDoc)

def PDFDoc_HighlightTextDiff(doc1, doc2, options):
    return _PDFNetPython.PDFDoc_HighlightTextDiff(doc1, doc2, options)
PDFDoc_HighlightTextDiff = _PDFNetPython.PDFDoc_HighlightTextDiff

def PDFDoc_CreateInternal(impl):
    return _PDFNetPython.PDFDoc_CreateInternal(impl)
PDFDoc_CreateInternal = _PDFNetPython.PDFDoc_CreateInternal

class Caret(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Caret, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Caret, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Caret_Create)
    else:
        Create = _PDFNetPython.Caret_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Caret_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Caret_CreateAnnot

    def GetSymbol(self):
        return _PDFNetPython.Caret_GetSymbol(self)

    def SetSymbol(self, symbol):
        return _PDFNetPython.Caret_SetSymbol(self, symbol)

    def __init__(self, *args):
        this = _PDFNetPython.new_Caret(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Caret
    __del__ = lambda self: None
Caret_swigregister = _PDFNetPython.Caret_swigregister
Caret_swigregister(Caret)

def Caret_Create(*args):
    return _PDFNetPython.Caret_Create(*args)
Caret_Create = _PDFNetPython.Caret_Create

def Caret_CreateAnnot(*args):
    return _PDFNetPython.Caret_CreateAnnot(*args)
Caret_CreateAnnot = _PDFNetPython.Caret_CreateAnnot

class Circle(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circle, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Circle, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Circle_Create)
    else:
        Create = _PDFNetPython.Circle_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Circle_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Circle_CreateAnnot

    def __init__(self, *args):
        this = _PDFNetPython.new_Circle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Circle
    __del__ = lambda self: None
Circle_swigregister = _PDFNetPython.Circle_swigregister
Circle_swigregister(Circle)

def Circle_Create(doc, pos):
    return _PDFNetPython.Circle_Create(doc, pos)
Circle_Create = _PDFNetPython.Circle_Create

def Circle_CreateAnnot(doc, pos):
    return _PDFNetPython.Circle_CreateAnnot(doc, pos)
Circle_CreateAnnot = _PDFNetPython.Circle_CreateAnnot

class HighlightAnnot(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighlightAnnot, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HighlightAnnot, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.HighlightAnnot_Create)
    else:
        Create = _PDFNetPython.HighlightAnnot_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.HighlightAnnot_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.HighlightAnnot_CreateAnnot

    def __init__(self, *args):
        this = _PDFNetPython.new_HighlightAnnot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_HighlightAnnot
    __del__ = lambda self: None
HighlightAnnot_swigregister = _PDFNetPython.HighlightAnnot_swigregister
HighlightAnnot_swigregister(HighlightAnnot)

def HighlightAnnot_Create(doc, pos):
    return _PDFNetPython.HighlightAnnot_Create(doc, pos)
HighlightAnnot_Create = _PDFNetPython.HighlightAnnot_Create

def HighlightAnnot_CreateAnnot(doc, pos):
    return _PDFNetPython.HighlightAnnot_CreateAnnot(doc, pos)
HighlightAnnot_CreateAnnot = _PDFNetPython.HighlightAnnot_CreateAnnot

class LineAnnot(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineAnnot, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineAnnot, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.LineAnnot_Create)
    else:
        Create = _PDFNetPython.LineAnnot_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.LineAnnot_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.LineAnnot_CreateAnnot

    def GetStartPoint(self):
        return _PDFNetPython.LineAnnot_GetStartPoint(self)

    def SetStartPoint(self, sp):
        return _PDFNetPython.LineAnnot_SetStartPoint(self, sp)

    def GetEndPoint(self):
        return _PDFNetPython.LineAnnot_GetEndPoint(self)

    def SetEndPoint(self, ep):
        return _PDFNetPython.LineAnnot_SetEndPoint(self, ep)
    e_Square = _PDFNetPython.LineAnnot_e_Square
    e_Circle = _PDFNetPython.LineAnnot_e_Circle
    e_Diamond = _PDFNetPython.LineAnnot_e_Diamond
    e_OpenArrow = _PDFNetPython.LineAnnot_e_OpenArrow
    e_ClosedArrow = _PDFNetPython.LineAnnot_e_ClosedArrow
    e_Butt = _PDFNetPython.LineAnnot_e_Butt
    e_ROpenArrow = _PDFNetPython.LineAnnot_e_ROpenArrow
    e_RClosedArrow = _PDFNetPython.LineAnnot_e_RClosedArrow
    e_Slash = _PDFNetPython.LineAnnot_e_Slash
    e_None = _PDFNetPython.LineAnnot_e_None
    e_Unknown = _PDFNetPython.LineAnnot_e_Unknown

    def GetStartStyle(self):
        return _PDFNetPython.LineAnnot_GetStartStyle(self)

    def SetStartStyle(self, sst):
        return _PDFNetPython.LineAnnot_SetStartStyle(self, sst)

    def GetEndStyle(self):
        return _PDFNetPython.LineAnnot_GetEndStyle(self)

    def SetEndStyle(self, est):
        return _PDFNetPython.LineAnnot_SetEndStyle(self, est)

    def GetLeaderLineLength(self):
        return _PDFNetPython.LineAnnot_GetLeaderLineLength(self)

    def SetLeaderLineLength(self, length):
        return _PDFNetPython.LineAnnot_SetLeaderLineLength(self, length)

    def GetLeaderLineExtensionLength(self):
        return _PDFNetPython.LineAnnot_GetLeaderLineExtensionLength(self)

    def SetLeaderLineExtensionLength(self, length):
        return _PDFNetPython.LineAnnot_SetLeaderLineExtensionLength(self, length)

    def GetShowCaption(self):
        return _PDFNetPython.LineAnnot_GetShowCaption(self)

    def SetShowCaption(self, showCaption):
        return _PDFNetPython.LineAnnot_SetShowCaption(self, showCaption)
    e_LineArrow = _PDFNetPython.LineAnnot_e_LineArrow
    e_LineDimension = _PDFNetPython.LineAnnot_e_LineDimension
    e_null = _PDFNetPython.LineAnnot_e_null

    def GetIntentType(self):
        return _PDFNetPython.LineAnnot_GetIntentType(self)

    def SetIntentType(self, it):
        return _PDFNetPython.LineAnnot_SetIntentType(self, it)

    def GetLeaderLineOffset(self):
        return _PDFNetPython.LineAnnot_GetLeaderLineOffset(self)

    def SetLeaderLineOffset(self, length):
        return _PDFNetPython.LineAnnot_SetLeaderLineOffset(self, length)
    e_Inline = _PDFNetPython.LineAnnot_e_Inline
    e_Top = _PDFNetPython.LineAnnot_e_Top

    def GetCaptionPosition(self):
        return _PDFNetPython.LineAnnot_GetCaptionPosition(self)

    def SetCaptionPosition(self, style):
        return _PDFNetPython.LineAnnot_SetCaptionPosition(self, style)

    def GetTextHOffset(self):
        return _PDFNetPython.LineAnnot_GetTextHOffset(self)

    def SetTextHOffset(self, offset):
        return _PDFNetPython.LineAnnot_SetTextHOffset(self, offset)

    def GetTextVOffset(self):
        return _PDFNetPython.LineAnnot_GetTextVOffset(self)

    def SetTextVOffset(self, offset):
        return _PDFNetPython.LineAnnot_SetTextVOffset(self, offset)

    def __init__(self, *args):
        this = _PDFNetPython.new_LineAnnot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_LineAnnot
    __del__ = lambda self: None
LineAnnot_swigregister = _PDFNetPython.LineAnnot_swigregister
LineAnnot_swigregister(LineAnnot)

def LineAnnot_Create(doc, pos):
    return _PDFNetPython.LineAnnot_Create(doc, pos)
LineAnnot_Create = _PDFNetPython.LineAnnot_Create

def LineAnnot_CreateAnnot(doc, pos):
    return _PDFNetPython.LineAnnot_CreateAnnot(doc, pos)
LineAnnot_CreateAnnot = _PDFNetPython.LineAnnot_CreateAnnot

class FreeText(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreeText, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FreeText, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.FreeText_Create)
    else:
        Create = _PDFNetPython.FreeText_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.FreeText_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.FreeText_CreateAnnot

    def GetDefaultAppearance(self):
        return _PDFNetPython.FreeText_GetDefaultAppearance(self)

    def SetDefaultAppearance(self, app_str):
        return _PDFNetPython.FreeText_SetDefaultAppearance(self, app_str)

    def GetQuaddingFormat(self):
        return _PDFNetPython.FreeText_GetQuaddingFormat(self)

    def SetQuaddingFormat(self, format):
        return _PDFNetPython.FreeText_SetQuaddingFormat(self, format)

    def GetCalloutLinePoint1(self):
        return _PDFNetPython.FreeText_GetCalloutLinePoint1(self)

    def GetCalloutLinePoint2(self):
        return _PDFNetPython.FreeText_GetCalloutLinePoint2(self)

    def GetCalloutLinePoint3(self):
        return _PDFNetPython.FreeText_GetCalloutLinePoint3(self)

    def SetCalloutLinePoints(self, *args):
        return _PDFNetPython.FreeText_SetCalloutLinePoints(self, *args)
    e_FreeText = _PDFNetPython.FreeText_e_FreeText
    e_FreeTextCallout = _PDFNetPython.FreeText_e_FreeTextCallout
    e_FreeTextTypeWriter = _PDFNetPython.FreeText_e_FreeTextTypeWriter
    e_Unknown = _PDFNetPython.FreeText_e_Unknown

    def GetIntentName(self):
        return _PDFNetPython.FreeText_GetIntentName(self)

    def SetIntentName(self, *args):
        return _PDFNetPython.FreeText_SetIntentName(self, *args)

    def GetEndingStyle(self):
        return _PDFNetPython.FreeText_GetEndingStyle(self)

    def SetEndingStyle(self, *args):
        return _PDFNetPython.FreeText_SetEndingStyle(self, *args)

    def SetTextColor(self, color, col_comp):
        return _PDFNetPython.FreeText_SetTextColor(self, color, col_comp)

    def GetTextColor(self):
        return _PDFNetPython.FreeText_GetTextColor(self)

    def GetTextColorCompNum(self):
        return _PDFNetPython.FreeText_GetTextColorCompNum(self)

    def SetLineColor(self, color, col_comp):
        return _PDFNetPython.FreeText_SetLineColor(self, color, col_comp)

    def GetLineColor(self):
        return _PDFNetPython.FreeText_GetLineColor(self)

    def GetLineColorCompNum(self):
        return _PDFNetPython.FreeText_GetLineColorCompNum(self)

    def SetFontName(self, fontName):
        return _PDFNetPython.FreeText_SetFontName(self, fontName)

    def SetFontSize(self, font_size):
        return _PDFNetPython.FreeText_SetFontSize(self, font_size)

    def GetFontSize(self):
        return _PDFNetPython.FreeText_GetFontSize(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_FreeText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_FreeText
    __del__ = lambda self: None
FreeText_swigregister = _PDFNetPython.FreeText_swigregister
FreeText_swigregister(FreeText)

def FreeText_Create(doc, pos):
    return _PDFNetPython.FreeText_Create(doc, pos)
FreeText_Create = _PDFNetPython.FreeText_Create

def FreeText_CreateAnnot(doc, pos):
    return _PDFNetPython.FreeText_CreateAnnot(doc, pos)
FreeText_CreateAnnot = _PDFNetPython.FreeText_CreateAnnot

class Link(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Link, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Link, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Link_Create)
    else:
        Create = _PDFNetPython.Link_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Link_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Link_CreateAnnot

    def RemoveAction(self):
        return _PDFNetPython.Link_RemoveAction(self)

    def GetAction(self):
        return _PDFNetPython.Link_GetAction(self)

    def SetAction(self, action):
        return _PDFNetPython.Link_SetAction(self, action)
    e_none = _PDFNetPython.Link_e_none
    e_invert = _PDFNetPython.Link_e_invert
    e_outline = _PDFNetPython.Link_e_outline
    e_push = _PDFNetPython.Link_e_push

    def GetHighlightingMode(self):
        return _PDFNetPython.Link_GetHighlightingMode(self)

    def SetHighlightingMode(self, mode):
        return _PDFNetPython.Link_SetHighlightingMode(self, mode)

    def GetQuadPointCount(self):
        return _PDFNetPython.Link_GetQuadPointCount(self)

    def GetQuadPoint(self, idx):
        return _PDFNetPython.Link_GetQuadPoint(self, idx)

    def SetQuadPoint(self, idx, qp):
        return _PDFNetPython.Link_SetQuadPoint(self, idx, qp)
    if _newclass:
        GetNormalizedUrl = staticmethod(_PDFNetPython.Link_GetNormalizedUrl)
    else:
        GetNormalizedUrl = _PDFNetPython.Link_GetNormalizedUrl

    def __init__(self, *args):
        this = _PDFNetPython.new_Link(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Link
    __del__ = lambda self: None
Link_swigregister = _PDFNetPython.Link_swigregister
Link_swigregister(Link)

def Link_Create(*args):
    return _PDFNetPython.Link_Create(*args)
Link_Create = _PDFNetPython.Link_Create

def Link_CreateAnnot(*args):
    return _PDFNetPython.Link_CreateAnnot(*args)
Link_CreateAnnot = _PDFNetPython.Link_CreateAnnot

def Link_GetNormalizedUrl(url):
    return _PDFNetPython.Link_GetNormalizedUrl(url)
Link_GetNormalizedUrl = _PDFNetPython.Link_GetNormalizedUrl

class Movie(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Movie, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Movie, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Movie_Create)
    else:
        Create = _PDFNetPython.Movie_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Movie_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Movie_CreateAnnot

    def GetTitle(self):
        return _PDFNetPython.Movie_GetTitle(self)

    def SetTitle(self, title):
        return _PDFNetPython.Movie_SetTitle(self, title)

    def IsToBePlayed(self):
        return _PDFNetPython.Movie_IsToBePlayed(self)

    def SetToBePlayed(self, isplay=True):
        return _PDFNetPython.Movie_SetToBePlayed(self, isplay)

    def __init__(self, *args):
        this = _PDFNetPython.new_Movie(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Movie
    __del__ = lambda self: None
Movie_swigregister = _PDFNetPython.Movie_swigregister
Movie_swigregister(Movie)

def Movie_Create(doc, pos):
    return _PDFNetPython.Movie_Create(doc, pos)
Movie_Create = _PDFNetPython.Movie_Create

def Movie_CreateAnnot(doc, pos):
    return _PDFNetPython.Movie_CreateAnnot(doc, pos)
Movie_CreateAnnot = _PDFNetPython.Movie_CreateAnnot

class PolyLine(LineAnnot):
    __swig_setmethods__ = {}
    for _s in [LineAnnot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyLine, name, value)
    __swig_getmethods__ = {}
    for _s in [LineAnnot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyLine, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.PolyLine_Create)
    else:
        Create = _PDFNetPython.PolyLine_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.PolyLine_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.PolyLine_CreateAnnot

    def GetVertexCount(self):
        return _PDFNetPython.PolyLine_GetVertexCount(self)

    def GetVertex(self, idx):
        return _PDFNetPython.PolyLine_GetVertex(self, idx)

    def SetVertex(self, idx, pt):
        return _PDFNetPython.PolyLine_SetVertex(self, idx, pt)
    e_PolygonCloud = _PDFNetPython.PolyLine_e_PolygonCloud
    e_PolyLineDimension = _PDFNetPython.PolyLine_e_PolyLineDimension
    e_PolygonDimension = _PDFNetPython.PolyLine_e_PolygonDimension
    e_Unknown = _PDFNetPython.PolyLine_e_Unknown

    def GetIntentName(self):
        return _PDFNetPython.PolyLine_GetIntentName(self)

    def SetIntentName(self, mode):
        return _PDFNetPython.PolyLine_SetIntentName(self, mode)

    def __init__(self, *args):
        this = _PDFNetPython.new_PolyLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PolyLine
    __del__ = lambda self: None
PolyLine_swigregister = _PDFNetPython.PolyLine_swigregister
PolyLine_swigregister(PolyLine)

def PolyLine_Create(doc, pos):
    return _PDFNetPython.PolyLine_Create(doc, pos)
PolyLine_Create = _PDFNetPython.PolyLine_Create

def PolyLine_CreateAnnot(doc, pos):
    return _PDFNetPython.PolyLine_CreateAnnot(doc, pos)
PolyLine_CreateAnnot = _PDFNetPython.PolyLine_CreateAnnot

class Polygon(PolyLine):
    __swig_setmethods__ = {}
    for _s in [PolyLine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon, name, value)
    __swig_getmethods__ = {}
    for _s in [PolyLine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Polygon_Create)
    else:
        Create = _PDFNetPython.Polygon_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Polygon_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Polygon_CreateAnnot

    def __init__(self, *args):
        this = _PDFNetPython.new_Polygon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Polygon
    __del__ = lambda self: None
Polygon_swigregister = _PDFNetPython.Polygon_swigregister
Polygon_swigregister(Polygon)

def Polygon_Create(doc, pos):
    return _PDFNetPython.Polygon_Create(doc, pos)
Polygon_Create = _PDFNetPython.Polygon_Create

def Polygon_CreateAnnot(doc, pos):
    return _PDFNetPython.Polygon_CreateAnnot(doc, pos)
Polygon_CreateAnnot = _PDFNetPython.Polygon_CreateAnnot

class RedactionAnnot(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RedactionAnnot, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RedactionAnnot, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.RedactionAnnot_Create)
    else:
        Create = _PDFNetPython.RedactionAnnot_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.RedactionAnnot_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.RedactionAnnot_CreateAnnot

    def GetQuadPointCount(self):
        return _PDFNetPython.RedactionAnnot_GetQuadPointCount(self)

    def GetQuadPoint(self, idx):
        return _PDFNetPython.RedactionAnnot_GetQuadPoint(self, idx)

    def SetQuadPoint(self, idx, qp):
        return _PDFNetPython.RedactionAnnot_SetQuadPoint(self, idx, qp)

    def GetAppFormXO(self):
        return _PDFNetPython.RedactionAnnot_GetAppFormXO(self)

    def SetAppFormXO(self, formxo):
        return _PDFNetPython.RedactionAnnot_SetAppFormXO(self, formxo)

    def GetOverlayText(self):
        return _PDFNetPython.RedactionAnnot_GetOverlayText(self)

    def SetOverlayText(self, title):
        return _PDFNetPython.RedactionAnnot_SetOverlayText(self, title)

    def GetUseRepeat(self):
        return _PDFNetPython.RedactionAnnot_GetUseRepeat(self)

    def SetUseRepeat(self, userepeat=False):
        return _PDFNetPython.RedactionAnnot_SetUseRepeat(self, userepeat)

    def GetOverlayTextAppearance(self):
        return _PDFNetPython.RedactionAnnot_GetOverlayTextAppearance(self)

    def SetOverlayTextAppearance(self, app):
        return _PDFNetPython.RedactionAnnot_SetOverlayTextAppearance(self, app)
    e_LeftJustified = _PDFNetPython.RedactionAnnot_e_LeftJustified
    e_Centered = _PDFNetPython.RedactionAnnot_e_Centered
    e_RightJustified = _PDFNetPython.RedactionAnnot_e_RightJustified
    e_None = _PDFNetPython.RedactionAnnot_e_None

    def GetQuadForm(self):
        return _PDFNetPython.RedactionAnnot_GetQuadForm(self)

    def SetQuadForm(self, *args):
        return _PDFNetPython.RedactionAnnot_SetQuadForm(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_RedactionAnnot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_RedactionAnnot
    __del__ = lambda self: None
RedactionAnnot_swigregister = _PDFNetPython.RedactionAnnot_swigregister
RedactionAnnot_swigregister(RedactionAnnot)

def RedactionAnnot_Create(doc, pos):
    return _PDFNetPython.RedactionAnnot_Create(doc, pos)
RedactionAnnot_Create = _PDFNetPython.RedactionAnnot_Create

def RedactionAnnot_CreateAnnot(doc, pos):
    return _PDFNetPython.RedactionAnnot_CreateAnnot(doc, pos)
RedactionAnnot_CreateAnnot = _PDFNetPython.RedactionAnnot_CreateAnnot

class RubberStamp(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RubberStamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RubberStamp, name)
    __repr__ = _swig_repr
    e_Approved = _PDFNetPython.RubberStamp_e_Approved
    e_Experimental = _PDFNetPython.RubberStamp_e_Experimental
    e_NotApproved = _PDFNetPython.RubberStamp_e_NotApproved
    e_AsIs = _PDFNetPython.RubberStamp_e_AsIs
    e_Expired = _PDFNetPython.RubberStamp_e_Expired
    e_NotForPublicRelease = _PDFNetPython.RubberStamp_e_NotForPublicRelease
    e_Confidential = _PDFNetPython.RubberStamp_e_Confidential
    e_Final = _PDFNetPython.RubberStamp_e_Final
    e_Sold = _PDFNetPython.RubberStamp_e_Sold
    e_Departmental = _PDFNetPython.RubberStamp_e_Departmental
    e_ForComment = _PDFNetPython.RubberStamp_e_ForComment
    e_TopSecret = _PDFNetPython.RubberStamp_e_TopSecret
    e_ForPublicRelease = _PDFNetPython.RubberStamp_e_ForPublicRelease
    e_Draft = _PDFNetPython.RubberStamp_e_Draft
    e_Unknown = _PDFNetPython.RubberStamp_e_Unknown
    if _newclass:
        Create = staticmethod(_PDFNetPython.RubberStamp_Create)
    else:
        Create = _PDFNetPython.RubberStamp_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.RubberStamp_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.RubberStamp_CreateAnnot

    def GetIcon(self):
        return _PDFNetPython.RubberStamp_GetIcon(self)

    def GetIconName(self):
        return _PDFNetPython.RubberStamp_GetIconName(self)

    def SetIcon(self, *args):
        return _PDFNetPython.RubberStamp_SetIcon(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_RubberStamp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_RubberStamp
    __del__ = lambda self: None
RubberStamp_swigregister = _PDFNetPython.RubberStamp_swigregister
RubberStamp_swigregister(RubberStamp)

def RubberStamp_Create(*args):
    return _PDFNetPython.RubberStamp_Create(*args)
RubberStamp_Create = _PDFNetPython.RubberStamp_Create

def RubberStamp_CreateAnnot(*args):
    return _PDFNetPython.RubberStamp_CreateAnnot(*args)
RubberStamp_CreateAnnot = _PDFNetPython.RubberStamp_CreateAnnot

class Screen(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Screen, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Screen, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Screen_Create)
    else:
        Create = _PDFNetPython.Screen_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Screen_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Screen_CreateAnnot

    def GetTitle(self):
        return _PDFNetPython.Screen_GetTitle(self)

    def SetTitle(self, title):
        return _PDFNetPython.Screen_SetTitle(self, title)

    def GetAction(self):
        return _PDFNetPython.Screen_GetAction(self)

    def SetAction(self, action):
        return _PDFNetPython.Screen_SetAction(self, action)

    def GetBorderColorCompNum(self):
        return _PDFNetPython.Screen_GetBorderColorCompNum(self)

    def GetBorderColor(self):
        return _PDFNetPython.Screen_GetBorderColor(self)

    def SetBorderColor(self, col, numcomp):
        return _PDFNetPython.Screen_SetBorderColor(self, col, numcomp)

    def GetBackgroundColorCompNum(self):
        return _PDFNetPython.Screen_GetBackgroundColorCompNum(self)

    def GetBackgroundColor(self):
        return _PDFNetPython.Screen_GetBackgroundColor(self)

    def SetBackgroundColor(self, col, numcomp):
        return _PDFNetPython.Screen_SetBackgroundColor(self, col, numcomp)

    def GetStaticCaptionText(self):
        return _PDFNetPython.Screen_GetStaticCaptionText(self)

    def SetStaticCaptionText(self, contents):
        return _PDFNetPython.Screen_SetStaticCaptionText(self, contents)

    def GetRolloverCaptionText(self):
        return _PDFNetPython.Screen_GetRolloverCaptionText(self)

    def SetRolloverCaptionText(self, contents):
        return _PDFNetPython.Screen_SetRolloverCaptionText(self, contents)

    def GetMouseDownCaptionText(self):
        return _PDFNetPython.Screen_GetMouseDownCaptionText(self)

    def SetMouseDownCaptionText(self, contents):
        return _PDFNetPython.Screen_SetMouseDownCaptionText(self, contents)

    def GetStaticIcon(self):
        return _PDFNetPython.Screen_GetStaticIcon(self)

    def SetStaticIcon(self, icon):
        return _PDFNetPython.Screen_SetStaticIcon(self, icon)

    def GetRolloverIcon(self):
        return _PDFNetPython.Screen_GetRolloverIcon(self)

    def SetRolloverIcon(self, icon):
        return _PDFNetPython.Screen_SetRolloverIcon(self, icon)

    def GetMouseDownIcon(self):
        return _PDFNetPython.Screen_GetMouseDownIcon(self)

    def SetMouseDownIcon(self, icon):
        return _PDFNetPython.Screen_SetMouseDownIcon(self, icon)
    e_NoIcon = _PDFNetPython.Screen_e_NoIcon
    e_NoCaption = _PDFNetPython.Screen_e_NoCaption
    e_CBelowI = _PDFNetPython.Screen_e_CBelowI
    e_CAboveI = _PDFNetPython.Screen_e_CAboveI
    e_CRightILeft = _PDFNetPython.Screen_e_CRightILeft
    e_CLeftIRight = _PDFNetPython.Screen_e_CLeftIRight
    e_COverlayI = _PDFNetPython.Screen_e_COverlayI

    def GetIconCaptionRelation(self):
        return _PDFNetPython.Screen_GetIconCaptionRelation(self)

    def SetIconCaptionRelation(self, icr):
        return _PDFNetPython.Screen_SetIconCaptionRelation(self, icr)
    e_Always = _PDFNetPython.Screen_e_Always
    e_WhenBigger = _PDFNetPython.Screen_e_WhenBigger
    e_WhenSmaller = _PDFNetPython.Screen_e_WhenSmaller
    e_Never = _PDFNetPython.Screen_e_Never

    def GetScaleCondition(self):
        return _PDFNetPython.Screen_GetScaleCondition(self)

    def SetScaleCondition(self, sc):
        return _PDFNetPython.Screen_SetScaleCondition(self, sc)
    e_Anamorphic = _PDFNetPython.Screen_e_Anamorphic
    e_Proportional = _PDFNetPython.Screen_e_Proportional

    def GetScaleType(self):
        return _PDFNetPython.Screen_GetScaleType(self)

    def SetScaleType(self, st):
        return _PDFNetPython.Screen_SetScaleType(self, st)

    def GetHIconLeftOver(self):
        return _PDFNetPython.Screen_GetHIconLeftOver(self)

    def SetHIconLeftOver(self, hl):
        return _PDFNetPython.Screen_SetHIconLeftOver(self, hl)

    def GetVIconLeftOver(self):
        return _PDFNetPython.Screen_GetVIconLeftOver(self)

    def SetVIconLeftOver(self, vl):
        return _PDFNetPython.Screen_SetVIconLeftOver(self, vl)

    def GetFitFull(self):
        return _PDFNetPython.Screen_GetFitFull(self)

    def SetFitFull(self, ff):
        return _PDFNetPython.Screen_SetFitFull(self, ff)

    def __init__(self, *args):
        this = _PDFNetPython.new_Screen(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Screen
    __del__ = lambda self: None
Screen_swigregister = _PDFNetPython.Screen_swigregister
Screen_swigregister(Screen)

def Screen_Create(doc, pos):
    return _PDFNetPython.Screen_Create(doc, pos)
Screen_Create = _PDFNetPython.Screen_Create

def Screen_CreateAnnot(doc, pos):
    return _PDFNetPython.Screen_CreateAnnot(doc, pos)
Screen_CreateAnnot = _PDFNetPython.Screen_CreateAnnot

class Sound(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sound, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sound, name)
    __repr__ = _swig_repr
    e_Speaker = _PDFNetPython.Sound_e_Speaker
    e_Mic = _PDFNetPython.Sound_e_Mic
    e_Unknown = _PDFNetPython.Sound_e_Unknown
    if _newclass:
        CreateWithData = staticmethod(_PDFNetPython.Sound_CreateWithData)
    else:
        CreateWithData = _PDFNetPython.Sound_CreateWithData
    if _newclass:
        Create = staticmethod(_PDFNetPython.Sound_Create)
    else:
        Create = _PDFNetPython.Sound_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Sound_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Sound_CreateAnnot

    def GetSoundStream(self):
        return _PDFNetPython.Sound_GetSoundStream(self)

    def SetSoundStream(self, icon):
        return _PDFNetPython.Sound_SetSoundStream(self, icon)

    def GetIcon(self):
        return _PDFNetPython.Sound_GetIcon(self)

    def GetIconName(self):
        return _PDFNetPython.Sound_GetIconName(self)

    def SetIcon(self, *args):
        return _PDFNetPython.Sound_SetIcon(self, *args)

    def __init__(self, *args):
        this = _PDFNetPython.new_Sound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Sound
    __del__ = lambda self: None
Sound_swigregister = _PDFNetPython.Sound_swigregister
Sound_swigregister(Sound)

def Sound_CreateWithData(*args):
    return _PDFNetPython.Sound_CreateWithData(*args)
Sound_CreateWithData = _PDFNetPython.Sound_CreateWithData

def Sound_Create(*args):
    return _PDFNetPython.Sound_Create(*args)
Sound_Create = _PDFNetPython.Sound_Create

def Sound_CreateAnnot(*args):
    return _PDFNetPython.Sound_CreateAnnot(*args)
Sound_CreateAnnot = _PDFNetPython.Sound_CreateAnnot

class Square(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Square, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Square, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Square_Create)
    else:
        Create = _PDFNetPython.Square_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Square_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Square_CreateAnnot

    def __init__(self, *args):
        this = _PDFNetPython.new_Square(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Square
    __del__ = lambda self: None
Square_swigregister = _PDFNetPython.Square_swigregister
Square_swigregister(Square)

def Square_Create(doc, pos):
    return _PDFNetPython.Square_Create(doc, pos)
Square_Create = _PDFNetPython.Square_Create

def Square_CreateAnnot(doc, pos):
    return _PDFNetPython.Square_CreateAnnot(doc, pos)
Square_CreateAnnot = _PDFNetPython.Square_CreateAnnot

class Squiggly(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Squiggly, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Squiggly, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Squiggly_Create)
    else:
        Create = _PDFNetPython.Squiggly_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Squiggly_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Squiggly_CreateAnnot

    def __init__(self, *args):
        this = _PDFNetPython.new_Squiggly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Squiggly
    __del__ = lambda self: None
Squiggly_swigregister = _PDFNetPython.Squiggly_swigregister
Squiggly_swigregister(Squiggly)

def Squiggly_Create(doc, pos):
    return _PDFNetPython.Squiggly_Create(doc, pos)
Squiggly_Create = _PDFNetPython.Squiggly_Create

def Squiggly_CreateAnnot(doc, pos):
    return _PDFNetPython.Squiggly_CreateAnnot(doc, pos)
Squiggly_CreateAnnot = _PDFNetPython.Squiggly_CreateAnnot

class StrikeOut(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeOut, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeOut, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.StrikeOut_Create)
    else:
        Create = _PDFNetPython.StrikeOut_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.StrikeOut_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.StrikeOut_CreateAnnot

    def __init__(self, *args):
        this = _PDFNetPython.new_StrikeOut(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_StrikeOut
    __del__ = lambda self: None
StrikeOut_swigregister = _PDFNetPython.StrikeOut_swigregister
StrikeOut_swigregister(StrikeOut)

def StrikeOut_Create(doc, pos):
    return _PDFNetPython.StrikeOut_Create(doc, pos)
StrikeOut_Create = _PDFNetPython.StrikeOut_Create

def StrikeOut_CreateAnnot(doc, pos):
    return _PDFNetPython.StrikeOut_CreateAnnot(doc, pos)
StrikeOut_CreateAnnot = _PDFNetPython.StrikeOut_CreateAnnot

class Text(Markup):
    __swig_setmethods__ = {}
    for _s in [Markup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [Markup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Text_Create)
    else:
        Create = _PDFNetPython.Text_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Text_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Text_CreateAnnot

    def IsOpen(self):
        return _PDFNetPython.Text_IsOpen(self)

    def SetOpen(self, isopen):
        return _PDFNetPython.Text_SetOpen(self, isopen)
    e_Comment = _PDFNetPython.Text_e_Comment
    e_Key = _PDFNetPython.Text_e_Key
    e_Help = _PDFNetPython.Text_e_Help
    e_NewParagraph = _PDFNetPython.Text_e_NewParagraph
    e_Paragraph = _PDFNetPython.Text_e_Paragraph
    e_Insert = _PDFNetPython.Text_e_Insert
    e_Note = _PDFNetPython.Text_e_Note
    e_Unknown = _PDFNetPython.Text_e_Unknown

    def GetIcon(self):
        return _PDFNetPython.Text_GetIcon(self)

    def GetIconName(self):
        return _PDFNetPython.Text_GetIconName(self)

    def SetIcon(self, *args):
        return _PDFNetPython.Text_SetIcon(self, *args)

    def GetState(self):
        return _PDFNetPython.Text_GetState(self)

    def SetState(self, *args):
        return _PDFNetPython.Text_SetState(self, *args)

    def GetStateModel(self):
        return _PDFNetPython.Text_GetStateModel(self)

    def SetStateModel(self, sm):
        return _PDFNetPython.Text_SetStateModel(self, sm)

    def GetAnchorPosition(self):
        return _PDFNetPython.Text_GetAnchorPosition(self)

    def SetAnchorPosition(self, pt):
        return _PDFNetPython.Text_SetAnchorPosition(self, pt)

    def __init__(self, *args):
        this = _PDFNetPython.new_Text(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Text
    __del__ = lambda self: None
Text_swigregister = _PDFNetPython.Text_swigregister
Text_swigregister(Text)

def Text_Create(*args):
    return _PDFNetPython.Text_Create(*args)
Text_Create = _PDFNetPython.Text_Create

def Text_CreateAnnot(*args):
    return _PDFNetPython.Text_CreateAnnot(*args)
Text_CreateAnnot = _PDFNetPython.Text_CreateAnnot

class Underline(TextMarkup):
    __swig_setmethods__ = {}
    for _s in [TextMarkup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Underline, name, value)
    __swig_getmethods__ = {}
    for _s in [TextMarkup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Underline, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Underline_Create)
    else:
        Create = _PDFNetPython.Underline_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Underline_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Underline_CreateAnnot

    def __init__(self, *args):
        this = _PDFNetPython.new_Underline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Underline
    __del__ = lambda self: None
Underline_swigregister = _PDFNetPython.Underline_swigregister
Underline_swigregister(Underline)

def Underline_Create(doc, pos):
    return _PDFNetPython.Underline_Create(doc, pos)
Underline_Create = _PDFNetPython.Underline_Create

def Underline_CreateAnnot(doc, pos):
    return _PDFNetPython.Underline_CreateAnnot(doc, pos)
Underline_CreateAnnot = _PDFNetPython.Underline_CreateAnnot

class Watermark(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Watermark, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Watermark, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Watermark_Create)
    else:
        Create = _PDFNetPython.Watermark_Create
    if _newclass:
        CreateAnnot = staticmethod(_PDFNetPython.Watermark_CreateAnnot)
    else:
        CreateAnnot = _PDFNetPython.Watermark_CreateAnnot

    def __init__(self, *args):
        this = _PDFNetPython.new_Watermark(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Watermark
    __del__ = lambda self: None
Watermark_swigregister = _PDFNetPython.Watermark_swigregister
Watermark_swigregister(Watermark)

def Watermark_Create(doc, pos):
    return _PDFNetPython.Watermark_Create(doc, pos)
Watermark_Create = _PDFNetPython.Watermark_Create

def Watermark_CreateAnnot(doc, pos):
    return _PDFNetPython.Watermark_CreateAnnot(doc, pos)
Watermark_CreateAnnot = _PDFNetPython.Watermark_CreateAnnot

class Widget(Annot):
    __swig_setmethods__ = {}
    for _s in [Annot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Widget, name, value)
    __swig_getmethods__ = {}
    for _s in [Annot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Widget, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.Widget_Create)
    else:
        Create = _PDFNetPython.Widget_Create

    def GetField(self):
        return _PDFNetPython.Widget_GetField(self)
    e_none = _PDFNetPython.Widget_e_none
    e_invert = _PDFNetPython.Widget_e_invert
    e_outline = _PDFNetPython.Widget_e_outline
    e_push = _PDFNetPython.Widget_e_push
    e_toggle = _PDFNetPython.Widget_e_toggle

    def GetHighlightingMode(self):
        return _PDFNetPython.Widget_GetHighlightingMode(self)

    def SetHighlightingMode(self, *args):
        return _PDFNetPython.Widget_SetHighlightingMode(self, *args)

    def GetAction(self):
        return _PDFNetPython.Widget_GetAction(self)

    def SetAction(self, action):
        return _PDFNetPython.Widget_SetAction(self, action)

    def GetBorderColorCompNum(self):
        return _PDFNetPython.Widget_GetBorderColorCompNum(self)

    def GetBorderColor(self):
        return _PDFNetPython.Widget_GetBorderColor(self)

    def SetBorderColor(self, col, compnum):
        return _PDFNetPython.Widget_SetBorderColor(self, col, compnum)

    def GetBackgroundColorCompNum(self):
        return _PDFNetPython.Widget_GetBackgroundColorCompNum(self)

    def GetBackgroundColor(self):
        return _PDFNetPython.Widget_GetBackgroundColor(self)

    def SetBackgroundColor(self, c, compnum):
        return _PDFNetPython.Widget_SetBackgroundColor(self, c, compnum)

    def GetStaticCaptionText(self):
        return _PDFNetPython.Widget_GetStaticCaptionText(self)

    def SetStaticCaptionText(self, contents):
        return _PDFNetPython.Widget_SetStaticCaptionText(self, contents)

    def GetRolloverCaptionText(self):
        return _PDFNetPython.Widget_GetRolloverCaptionText(self)

    def SetRolloverCaptionText(self, contents):
        return _PDFNetPython.Widget_SetRolloverCaptionText(self, contents)

    def GetMouseDownCaptionText(self):
        return _PDFNetPython.Widget_GetMouseDownCaptionText(self)

    def SetMouseDownCaptionText(self, contents):
        return _PDFNetPython.Widget_SetMouseDownCaptionText(self, contents)

    def GetStaticIcon(self):
        return _PDFNetPython.Widget_GetStaticIcon(self)

    def SetStaticIcon(self, icon):
        return _PDFNetPython.Widget_SetStaticIcon(self, icon)

    def GetRolloverIcon(self):
        return _PDFNetPython.Widget_GetRolloverIcon(self)

    def SetRolloverIcon(self, icon):
        return _PDFNetPython.Widget_SetRolloverIcon(self, icon)

    def GetMouseDownIcon(self):
        return _PDFNetPython.Widget_GetMouseDownIcon(self)

    def SetMouseDownIcon(self, icon):
        return _PDFNetPython.Widget_SetMouseDownIcon(self, icon)
    e_NoIcon = _PDFNetPython.Widget_e_NoIcon
    e_NoCaption = _PDFNetPython.Widget_e_NoCaption
    e_CBelowI = _PDFNetPython.Widget_e_CBelowI
    e_CAboveI = _PDFNetPython.Widget_e_CAboveI
    e_CRightILeft = _PDFNetPython.Widget_e_CRightILeft
    e_CLeftIRight = _PDFNetPython.Widget_e_CLeftIRight
    e_COverlayI = _PDFNetPython.Widget_e_COverlayI

    def GetIconCaptionRelation(self):
        return _PDFNetPython.Widget_GetIconCaptionRelation(self)

    def SetIconCaptionRelation(self, icr):
        return _PDFNetPython.Widget_SetIconCaptionRelation(self, icr)
    e_Always = _PDFNetPython.Widget_e_Always
    e_WhenBigger = _PDFNetPython.Widget_e_WhenBigger
    e_WhenSmaller = _PDFNetPython.Widget_e_WhenSmaller
    e_Never = _PDFNetPython.Widget_e_Never

    def GetScaleCondition(self):
        return _PDFNetPython.Widget_GetScaleCondition(self)

    def SetScaleCondition(self, sd):
        return _PDFNetPython.Widget_SetScaleCondition(self, sd)
    e_Anamorphic = _PDFNetPython.Widget_e_Anamorphic
    e_Proportional = _PDFNetPython.Widget_e_Proportional

    def GetScaleType(self):
        return _PDFNetPython.Widget_GetScaleType(self)

    def SetScaleType(self, st):
        return _PDFNetPython.Widget_SetScaleType(self, st)

    def GetHIconLeftOver(self):
        return _PDFNetPython.Widget_GetHIconLeftOver(self)

    def SetHIconLeftOver(self, hl):
        return _PDFNetPython.Widget_SetHIconLeftOver(self, hl)

    def GetVIconLeftOver(self):
        return _PDFNetPython.Widget_GetVIconLeftOver(self)

    def SetVIconLeftOver(self, vl):
        return _PDFNetPython.Widget_SetVIconLeftOver(self, vl)

    def GetFitFull(self):
        return _PDFNetPython.Widget_GetFitFull(self)

    def SetFitFull(self, ff):
        return _PDFNetPython.Widget_SetFitFull(self, ff)

    def GetTextColor(self):
        return _PDFNetPython.Widget_GetTextColor(self)

    def GetTextColorCompNum(self):
        return _PDFNetPython.Widget_GetTextColorCompNum(self)

    def SetTextColor(self, color, col_comp):
        return _PDFNetPython.Widget_SetTextColor(self, color, col_comp)

    def GetFontSize(self):
        return _PDFNetPython.Widget_GetFontSize(self)

    def SetFontSize(self, font_size):
        return _PDFNetPython.Widget_SetFontSize(self, font_size)

    def GetFont(self):
        return _PDFNetPython.Widget_GetFont(self)

    def SetFont(self, font):
        return _PDFNetPython.Widget_SetFont(self, font)

    def __init__(self, *args):
        this = _PDFNetPython.new_Widget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Widget
    __del__ = lambda self: None
Widget_swigregister = _PDFNetPython.Widget_swigregister
Widget_swigregister(Widget)

def Widget_Create(doc, pos, field):
    return _PDFNetPython.Widget_Create(doc, pos, field)
Widget_Create = _PDFNetPython.Widget_Create

class SignatureWidget(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureWidget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_SignatureWidget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetDigitalSignatureField(self):
        return _PDFNetPython.SignatureWidget_GetDigitalSignatureField(self)

    def CreateSignatureAppearance(self, img):
        return _PDFNetPython.SignatureWidget_CreateSignatureAppearance(self, img)
    if _newclass:
        Create = staticmethod(_PDFNetPython.SignatureWidget_Create)
    else:
        Create = _PDFNetPython.SignatureWidget_Create
    __swig_destroy__ = _PDFNetPython.delete_SignatureWidget
    __del__ = lambda self: None
SignatureWidget_swigregister = _PDFNetPython.SignatureWidget_swigregister
SignatureWidget_swigregister(SignatureWidget)

def SignatureWidget_Create(*args):
    return _PDFNetPython.SignatureWidget_Create(*args)
SignatureWidget_Create = _PDFNetPython.SignatureWidget_Create

class CheckBoxWidget(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckBoxWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckBoxWidget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_CheckBoxWidget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        Create = staticmethod(_PDFNetPython.CheckBoxWidget_Create)
    else:
        Create = _PDFNetPython.CheckBoxWidget_Create

    def IsChecked(self):
        return _PDFNetPython.CheckBoxWidget_IsChecked(self)

    def SetChecked(self, checked):
        return _PDFNetPython.CheckBoxWidget_SetChecked(self, checked)
    __swig_destroy__ = _PDFNetPython.delete_CheckBoxWidget
    __del__ = lambda self: None
CheckBoxWidget_swigregister = _PDFNetPython.CheckBoxWidget_swigregister
CheckBoxWidget_swigregister(CheckBoxWidget)

def CheckBoxWidget_Create(*args):
    return _PDFNetPython.CheckBoxWidget_Create(*args)
CheckBoxWidget_Create = _PDFNetPython.CheckBoxWidget_Create

class PushButtonWidget(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PushButtonWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PushButtonWidget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_PushButtonWidget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        Create = staticmethod(_PDFNetPython.PushButtonWidget_Create)
    else:
        Create = _PDFNetPython.PushButtonWidget_Create
    __swig_destroy__ = _PDFNetPython.delete_PushButtonWidget
    __del__ = lambda self: None
PushButtonWidget_swigregister = _PDFNetPython.PushButtonWidget_swigregister
PushButtonWidget_swigregister(PushButtonWidget)

def PushButtonWidget_Create(*args):
    return _PDFNetPython.PushButtonWidget_Create(*args)
PushButtonWidget_Create = _PDFNetPython.PushButtonWidget_Create

class TextWidget(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextWidget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_TextWidget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        Create = staticmethod(_PDFNetPython.TextWidget_Create)
    else:
        Create = _PDFNetPython.TextWidget_Create

    def SetText(self, text):
        return _PDFNetPython.TextWidget_SetText(self, text)

    def GetText(self):
        return _PDFNetPython.TextWidget_GetText(self)
    __swig_destroy__ = _PDFNetPython.delete_TextWidget
    __del__ = lambda self: None
TextWidget_swigregister = _PDFNetPython.TextWidget_swigregister
TextWidget_swigregister(TextWidget)

def TextWidget_Create(*args):
    return _PDFNetPython.TextWidget_Create(*args)
TextWidget_Create = _PDFNetPython.TextWidget_Create

class ComboBoxWidget(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComboBoxWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComboBoxWidget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_ComboBoxWidget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        Create = staticmethod(_PDFNetPython.ComboBoxWidget_Create)
    else:
        Create = _PDFNetPython.ComboBoxWidget_Create

    def AddOption(self, value):
        return _PDFNetPython.ComboBoxWidget_AddOption(self, value)

    def AddOptions(self, opts):
        return _PDFNetPython.ComboBoxWidget_AddOptions(self, opts)

    def GetOptions(self):
        return _PDFNetPython.ComboBoxWidget_GetOptions(self)

    def ReplaceOptions(self, new_opts):
        return _PDFNetPython.ComboBoxWidget_ReplaceOptions(self, new_opts)

    def SetSelectedOption(self, value):
        return _PDFNetPython.ComboBoxWidget_SetSelectedOption(self, value)

    def GetSelectedOption(self):
        return _PDFNetPython.ComboBoxWidget_GetSelectedOption(self)

    def RemoveOption(self, value):
        return _PDFNetPython.ComboBoxWidget_RemoveOption(self, value)
    __swig_destroy__ = _PDFNetPython.delete_ComboBoxWidget
    __del__ = lambda self: None
ComboBoxWidget_swigregister = _PDFNetPython.ComboBoxWidget_swigregister
ComboBoxWidget_swigregister(ComboBoxWidget)

def ComboBoxWidget_Create(*args):
    return _PDFNetPython.ComboBoxWidget_Create(*args)
ComboBoxWidget_Create = _PDFNetPython.ComboBoxWidget_Create

class ListBoxWidget(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListBoxWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListBoxWidget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_ListBoxWidget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        Create = staticmethod(_PDFNetPython.ListBoxWidget_Create)
    else:
        Create = _PDFNetPython.ListBoxWidget_Create

    def AddOption(self, value):
        return _PDFNetPython.ListBoxWidget_AddOption(self, value)

    def AddOptions(self, opts):
        return _PDFNetPython.ListBoxWidget_AddOptions(self, opts)

    def SetSelectedOptions(self, selected_opts):
        return _PDFNetPython.ListBoxWidget_SetSelectedOptions(self, selected_opts)

    def GetSelectedOptions(self):
        return _PDFNetPython.ListBoxWidget_GetSelectedOptions(self)

    def GetOptions(self):
        return _PDFNetPython.ListBoxWidget_GetOptions(self)

    def ReplaceOptions(self, new_opts):
        return _PDFNetPython.ListBoxWidget_ReplaceOptions(self, new_opts)

    def RemoveOption(self, value):
        return _PDFNetPython.ListBoxWidget_RemoveOption(self, value)
    __swig_destroy__ = _PDFNetPython.delete_ListBoxWidget
    __del__ = lambda self: None
ListBoxWidget_swigregister = _PDFNetPython.ListBoxWidget_swigregister
ListBoxWidget_swigregister(ListBoxWidget)

def ListBoxWidget_Create(*args):
    return _PDFNetPython.ListBoxWidget_Create(*args)
ListBoxWidget_Create = _PDFNetPython.ListBoxWidget_Create

class RadioButtonWidget(Widget):
    __swig_setmethods__ = {}
    for _s in [Widget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadioButtonWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [Widget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadioButtonWidget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_RadioButtonWidget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetGroup(self):
        return _PDFNetPython.RadioButtonWidget_GetGroup(self)

    def EnableButton(self):
        return _PDFNetPython.RadioButtonWidget_EnableButton(self)

    def IsEnabled(self):
        return _PDFNetPython.RadioButtonWidget_IsEnabled(self)
    __swig_destroy__ = _PDFNetPython.delete_RadioButtonWidget
    __del__ = lambda self: None
RadioButtonWidget_swigregister = _PDFNetPython.RadioButtonWidget_swigregister
RadioButtonWidget_swigregister(RadioButtonWidget)

class RadioButtonGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadioButtonGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadioButtonGroup, name)
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_PDFNetPython.RadioButtonGroup_Create)
    else:
        Create = _PDFNetPython.RadioButtonGroup_Create

    def Add(self, *args):
        return _PDFNetPython.RadioButtonGroup_Add(self, *args)

    def GetNumButtons(self):
        return _PDFNetPython.RadioButtonGroup_GetNumButtons(self)

    def GetButton(self, index):
        return _PDFNetPython.RadioButtonGroup_GetButton(self, index)

    def GetField(self):
        return _PDFNetPython.RadioButtonGroup_GetField(self)

    def AddGroupButtonsToPage(self, page):
        return _PDFNetPython.RadioButtonGroup_AddGroupButtonsToPage(self, page)

    def __init__(self, *args):
        this = _PDFNetPython.new_RadioButtonGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_RadioButtonGroup
    __del__ = lambda self: None
RadioButtonGroup_swigregister = _PDFNetPython.RadioButtonGroup_swigregister
RadioButtonGroup_swigregister(RadioButtonGroup)

def RadioButtonGroup_Create(*args):
    return _PDFNetPython.RadioButtonGroup_Create(*args)
RadioButtonGroup_Create = _PDFNetPython.RadioButtonGroup_Create

class Element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
    __repr__ = _swig_repr
    e_null = _PDFNetPython.Element_e_null
    e_path = _PDFNetPython.Element_e_path
    e_text_begin = _PDFNetPython.Element_e_text_begin
    e_text = _PDFNetPython.Element_e_text
    e_text_new_line = _PDFNetPython.Element_e_text_new_line
    e_text_end = _PDFNetPython.Element_e_text_end
    e_image = _PDFNetPython.Element_e_image
    e_inline_image = _PDFNetPython.Element_e_inline_image
    e_shading = _PDFNetPython.Element_e_shading
    e_form = _PDFNetPython.Element_e_form
    e_group_begin = _PDFNetPython.Element_e_group_begin
    e_group_end = _PDFNetPython.Element_e_group_end
    e_marked_content_begin = _PDFNetPython.Element_e_marked_content_begin
    e_marked_content_end = _PDFNetPython.Element_e_marked_content_end
    e_marked_content_point = _PDFNetPython.Element_e_marked_content_point

    def __nonzero__(self):
        return _PDFNetPython.Element___nonzero__(self)
    __bool__ = __nonzero__



    def GetType(self):
        return _PDFNetPython.Element_GetType(self)

    def GetGState(self):
        return _PDFNetPython.Element_GetGState(self)

    def GetCTM(self):
        return _PDFNetPython.Element_GetCTM(self)

    def GetBBox(self):
        return _PDFNetPython.Element_GetBBox(self)

    def GetParentStructElement(self):
        return _PDFNetPython.Element_GetParentStructElement(self)

    def GetStructMCID(self):
        return _PDFNetPython.Element_GetStructMCID(self)

    def IsOCVisible(self):
        return _PDFNetPython.Element_IsOCVisible(self)

    def IsClippingPath(self):
        return _PDFNetPython.Element_IsClippingPath(self)

    def IsStroked(self):
        return _PDFNetPython.Element_IsStroked(self)

    def IsFilled(self):
        return _PDFNetPython.Element_IsFilled(self)

    def IsWindingFill(self):
        return _PDFNetPython.Element_IsWindingFill(self)

    def IsClipWindingFill(self):
        return _PDFNetPython.Element_IsClipWindingFill(self)

    def GetPathData(self):
        return _PDFNetPython.Element_GetPathData(self)

    def SetPathData(self, data):
        return _PDFNetPython.Element_SetPathData(self, data)

    def SetPathClip(self, clip):
        return _PDFNetPython.Element_SetPathClip(self, clip)

    def SetPathStroke(self, stroke):
        return _PDFNetPython.Element_SetPathStroke(self, stroke)

    def SetPathFill(self, fill):
        return _PDFNetPython.Element_SetPathFill(self, fill)

    def SetWindingFill(self, winding_rule):
        return _PDFNetPython.Element_SetWindingFill(self, winding_rule)

    def SetClipWindingFill(self, winding_rule):
        return _PDFNetPython.Element_SetClipWindingFill(self, winding_rule)

    def GetXObject(self):
        return _PDFNetPython.Element_GetXObject(self)

    def GetImageData(self):
        return _PDFNetPython.Element_GetImageData(self)

    def GetImageDataSize(self):
        return _PDFNetPython.Element_GetImageDataSize(self)

    def GetImageColorSpace(self):
        return _PDFNetPython.Element_GetImageColorSpace(self)

    def GetImageWidth(self):
        return _PDFNetPython.Element_GetImageWidth(self)

    def GetImageHeight(self):
        return _PDFNetPython.Element_GetImageHeight(self)

    def GetDecodeArray(self):
        return _PDFNetPython.Element_GetDecodeArray(self)

    def GetBitsPerComponent(self):
        return _PDFNetPython.Element_GetBitsPerComponent(self)

    def GetComponentNum(self):
        return _PDFNetPython.Element_GetComponentNum(self)

    def IsImageMask(self):
        return _PDFNetPython.Element_IsImageMask(self)

    def IsImageInterpolate(self):
        return _PDFNetPython.Element_IsImageInterpolate(self)

    def GetMask(self):
        return _PDFNetPython.Element_GetMask(self)

    def GetImageRenderingIntent(self):
        return _PDFNetPython.Element_GetImageRenderingIntent(self)

    def GetTextString(self):
        return _PDFNetPython.Element_GetTextString(self)

    def GetTextData(self):
        return _PDFNetPython.Element_GetTextData(self)

    def GetTextDataSize(self):
        return _PDFNetPython.Element_GetTextDataSize(self)

    def GetTextMatrix(self):
        return _PDFNetPython.Element_GetTextMatrix(self)

    def GetCharIterator(self):
        return _PDFNetPython.Element_GetCharIterator(self)

    def GetTextLength(self):
        return _PDFNetPython.Element_GetTextLength(self)

    def GetPosAdjustment(self):
        return _PDFNetPython.Element_GetPosAdjustment(self)

    def GetNewTextLineOffset(self):
        return _PDFNetPython.Element_GetNewTextLineOffset(self)

    def SetNewTextLineOffset(self, dx, dy):
        return _PDFNetPython.Element_SetNewTextLineOffset(self, dx, dy)

    def HasTextMatrix(self):
        return _PDFNetPython.Element_HasTextMatrix(self)

    def SetTextData(self, buf_text_data, text_data_size):
        return _PDFNetPython.Element_SetTextData(self, buf_text_data, text_data_size)

    def SetTextMatrix(self, *args):
        return _PDFNetPython.Element_SetTextMatrix(self, *args)

    def SetPosAdjustment(self, adjust):
        return _PDFNetPython.Element_SetPosAdjustment(self, adjust)

    def UpdateTextMetrics(self):
        return _PDFNetPython.Element_UpdateTextMetrics(self)

    def GetShading(self):
        return _PDFNetPython.Element_GetShading(self)

    def GetMCPropertyDict(self):
        return _PDFNetPython.Element_GetMCPropertyDict(self)

    def GetMCTag(self):
        return _PDFNetPython.Element_GetMCTag(self)
    __swig_destroy__ = _PDFNetPython.delete_Element
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _PDFNetPython.new_Element(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_elem"] = _PDFNetPython.Element_mp_elem_set
    __swig_getmethods__["mp_elem"] = _PDFNetPython.Element_mp_elem_get
    if _newclass:
        mp_elem = _swig_property(_PDFNetPython.Element_mp_elem_get, _PDFNetPython.Element_mp_elem_set)
Element_swigregister = _PDFNetPython.Element_swigregister
Element_swigregister(Element)

class ElementBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementBuilder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_ElementBuilder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_ElementBuilder
    __del__ = lambda self: None

    def Reset(self, *args):
        return _PDFNetPython.ElementBuilder_Reset(self, *args)

    def CreateImage(self, *args):
        return _PDFNetPython.ElementBuilder_CreateImage(self, *args)

    def CreateGroupBegin(self):
        return _PDFNetPython.ElementBuilder_CreateGroupBegin(self)

    def CreateGroupEnd(self):
        return _PDFNetPython.ElementBuilder_CreateGroupEnd(self)

    def CreateShading(self, sh):
        return _PDFNetPython.ElementBuilder_CreateShading(self, sh)

    def CreateForm(self, *args):
        return _PDFNetPython.ElementBuilder_CreateForm(self, *args)

    def CreateTextBegin(self, *args):
        return _PDFNetPython.ElementBuilder_CreateTextBegin(self, *args)

    def CreateTextEnd(self):
        return _PDFNetPython.ElementBuilder_CreateTextEnd(self)

    def CreateTextRun(self, *args):
        return _PDFNetPython.ElementBuilder_CreateTextRun(self, *args)

    def CreateUnicodeTextRun(self, text_data, text_data_sz):
        return _PDFNetPython.ElementBuilder_CreateUnicodeTextRun(self, text_data, text_data_sz)

    def CreateShapedTextRun(self, text_data):
        return _PDFNetPython.ElementBuilder_CreateShapedTextRun(self, text_data)

    def CreateTextNewLine(self, *args):
        return _PDFNetPython.ElementBuilder_CreateTextNewLine(self, *args)

    def CreatePath(self, points, seg_types):
        return _PDFNetPython.ElementBuilder_CreatePath(self, points, seg_types)

    def CreateRect(self, x, y, width, height):
        return _PDFNetPython.ElementBuilder_CreateRect(self, x, y, width, height)

    def CreateEllipse(self, x, y, width, height):
        return _PDFNetPython.ElementBuilder_CreateEllipse(self, x, y, width, height)

    def PathBegin(self):
        return _PDFNetPython.ElementBuilder_PathBegin(self)

    def PathEnd(self):
        return _PDFNetPython.ElementBuilder_PathEnd(self)

    def MoveTo(self, x, y):
        return _PDFNetPython.ElementBuilder_MoveTo(self, x, y)

    def LineTo(self, x, y):
        return _PDFNetPython.ElementBuilder_LineTo(self, x, y)

    def CurveTo(self, cx1, cy1, cx2, cy2, x2, y2):
        return _PDFNetPython.ElementBuilder_CurveTo(self, cx1, cy1, cx2, cy2, x2, y2)

    def ArcTo(self, *args):
        return _PDFNetPython.ElementBuilder_ArcTo(self, *args)

    def Ellipse(self, x, y, width, height):
        return _PDFNetPython.ElementBuilder_Ellipse(self, x, y, width, height)

    def Rect(self, x, y, width, height):
        return _PDFNetPython.ElementBuilder_Rect(self, x, y, width, height)

    def ClosePath(self):
        return _PDFNetPython.ElementBuilder_ClosePath(self)

    def CreateMarkedContentBeginInlineProperties(self, tag):
        return _PDFNetPython.ElementBuilder_CreateMarkedContentBeginInlineProperties(self, tag)

    def CreateMarkedContentBegin(self, tag, property_dict):
        return _PDFNetPython.ElementBuilder_CreateMarkedContentBegin(self, tag, property_dict)

    def CreateMarkedContentEnd(self):
        return _PDFNetPython.ElementBuilder_CreateMarkedContentEnd(self)

    def CreateMarkedContentPointInlineProperties(self, tag):
        return _PDFNetPython.ElementBuilder_CreateMarkedContentPointInlineProperties(self, tag)

    def CreateMarkedContentPoint(self, tag, property_dict):
        return _PDFNetPython.ElementBuilder_CreateMarkedContentPoint(self, tag, property_dict)

    def Destroy(self):
        return _PDFNetPython.ElementBuilder_Destroy(self)
    __swig_setmethods__["mp_builder"] = _PDFNetPython.ElementBuilder_mp_builder_set
    __swig_getmethods__["mp_builder"] = _PDFNetPython.ElementBuilder_mp_builder_get
    if _newclass:
        mp_builder = _swig_property(_PDFNetPython.ElementBuilder_mp_builder_get, _PDFNetPython.ElementBuilder_mp_builder_set)
ElementBuilder_swigregister = _PDFNetPython.ElementBuilder_swigregister
ElementBuilder_swigregister(ElementBuilder)

class ElementReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementReader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_ElementReader
    __del__ = lambda self: None

    def Begin(self, *args):
        return _PDFNetPython.ElementReader_Begin(self, *args)

    def Next(self):
        return _PDFNetPython.ElementReader_Next(self)

    def Current(self):
        return _PDFNetPython.ElementReader_Current(self)

    def FormBegin(self):
        return _PDFNetPython.ElementReader_FormBegin(self)

    def PatternBegin(self, fill_pattern, reset_ctm_tfm=False):
        return _PDFNetPython.ElementReader_PatternBegin(self, fill_pattern, reset_ctm_tfm)

    def Type3FontBegin(self, char_data, resource_dict=0):
        return _PDFNetPython.ElementReader_Type3FontBegin(self, char_data, resource_dict)

    def End(self):
        return _PDFNetPython.ElementReader_End(self)

    def GetChangesIterator(self):
        return _PDFNetPython.ElementReader_GetChangesIterator(self)

    def IsChanged(self, attrib):
        return _PDFNetPython.ElementReader_IsChanged(self, attrib)

    def ClearChangeList(self):
        return _PDFNetPython.ElementReader_ClearChangeList(self)

    def AppendResource(self, res):
        return _PDFNetPython.ElementReader_AppendResource(self, res)

    def GetFont(self, name):
        return _PDFNetPython.ElementReader_GetFont(self, name)

    def GetXObject(self, name):
        return _PDFNetPython.ElementReader_GetXObject(self, name)

    def GetShading(self, name):
        return _PDFNetPython.ElementReader_GetShading(self, name)

    def GetColorSpace(self, name):
        return _PDFNetPython.ElementReader_GetColorSpace(self, name)

    def GetPattern(self, name):
        return _PDFNetPython.ElementReader_GetPattern(self, name)

    def GetExtGState(self, name):
        return _PDFNetPython.ElementReader_GetExtGState(self, name)

    def Destroy(self):
        return _PDFNetPython.ElementReader_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_ElementReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_reader"] = _PDFNetPython.ElementReader_mp_reader_set
    __swig_getmethods__["mp_reader"] = _PDFNetPython.ElementReader_mp_reader_get
    if _newclass:
        mp_reader = _swig_property(_PDFNetPython.ElementReader_mp_reader_get, _PDFNetPython.ElementReader_mp_reader_set)
ElementReader_swigregister = _PDFNetPython.ElementReader_swigregister
ElementReader_swigregister(ElementReader)

class ElementWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementWriter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_ElementWriter
    __del__ = lambda self: None
    e_underlay = _PDFNetPython.ElementWriter_e_underlay
    e_overlay = _PDFNetPython.ElementWriter_e_overlay
    e_replacement = _PDFNetPython.ElementWriter_e_replacement

    def Begin(self, *args):
        return _PDFNetPython.ElementWriter_Begin(self, *args)

    def End(self):
        return _PDFNetPython.ElementWriter_End(self)

    def WriteElement(self, element):
        return _PDFNetPython.ElementWriter_WriteElement(self, element)

    def WritePlacedElement(self, element):
        return _PDFNetPython.ElementWriter_WritePlacedElement(self, element)

    def Flush(self):
        return _PDFNetPython.ElementWriter_Flush(self)

    def WriteBuffer(self, data):
        return _PDFNetPython.ElementWriter_WriteBuffer(self, data)

    def WriteString(self, str):
        return _PDFNetPython.ElementWriter_WriteString(self, str)

    def WriteGStateChanges(self, element):
        return _PDFNetPython.ElementWriter_WriteGStateChanges(self, element)

    def SetDefaultGState(self, reader):
        return _PDFNetPython.ElementWriter_SetDefaultGState(self, reader)

    def Destroy(self):
        return _PDFNetPython.ElementWriter_Destroy(self)
    __swig_setmethods__["mp_writer"] = _PDFNetPython.ElementWriter_mp_writer_set
    __swig_getmethods__["mp_writer"] = _PDFNetPython.ElementWriter_mp_writer_get
    if _newclass:
        mp_writer = _swig_property(_PDFNetPython.ElementWriter_mp_writer_get, _PDFNetPython.ElementWriter_mp_writer_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_ElementWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ElementWriter_swigregister = _PDFNetPython.ElementWriter_swigregister
ElementWriter_swigregister(ElementWriter)

class Image2RGB(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image2RGB, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image2RGB, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_Image2RGB(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Image2RGB
    __del__ = lambda self: None
Image2RGB_swigregister = _PDFNetPython.Image2RGB_swigregister
Image2RGB_swigregister(Image2RGB)

class Image2RGBA(Filter):
    __swig_setmethods__ = {}
    for _s in [Filter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image2RGBA, name, value)
    __swig_getmethods__ = {}
    for _s in [Filter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image2RGBA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_Image2RGBA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Image2RGBA
    __del__ = lambda self: None
Image2RGBA_swigregister = _PDFNetPython.Image2RGBA_swigregister
Image2RGBA_swigregister(Image2RGBA)

class Highlight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Highlight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Highlight, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PDFNetPython.new_Highlight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["page_num"] = _PDFNetPython.Highlight_page_num_set
    __swig_getmethods__["page_num"] = _PDFNetPython.Highlight_page_num_get
    if _newclass:
        page_num = _swig_property(_PDFNetPython.Highlight_page_num_get, _PDFNetPython.Highlight_page_num_set)
    __swig_setmethods__["position"] = _PDFNetPython.Highlight_position_set
    __swig_getmethods__["position"] = _PDFNetPython.Highlight_position_get
    if _newclass:
        position = _swig_property(_PDFNetPython.Highlight_position_get, _PDFNetPython.Highlight_position_set)
    __swig_setmethods__["length"] = _PDFNetPython.Highlight_length_set
    __swig_getmethods__["length"] = _PDFNetPython.Highlight_length_get
    if _newclass:
        length = _swig_property(_PDFNetPython.Highlight_length_get, _PDFNetPython.Highlight_length_set)
    __swig_destroy__ = _PDFNetPython.delete_Highlight
    __del__ = lambda self: None
Highlight_swigregister = _PDFNetPython.Highlight_swigregister
Highlight_swigregister(Highlight)

class Highlights(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Highlights, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Highlights, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_Highlights
    __del__ = lambda self: None

    def Load(self, file_name):
        return _PDFNetPython.Highlights_Load(self, file_name)

    def Save(self, file_name):
        return _PDFNetPython.Highlights_Save(self, file_name)

    def SaveToString(self):
        return _PDFNetPython.Highlights_SaveToString(self)

    def Add(self, hlts):
        return _PDFNetPython.Highlights_Add(self, hlts)

    def Clear(self):
        return _PDFNetPython.Highlights_Clear(self)

    def Begin(self, doc):
        return _PDFNetPython.Highlights_Begin(self, doc)

    def HasNext(self):
        return _PDFNetPython.Highlights_HasNext(self)

    def Next(self):
        return _PDFNetPython.Highlights_Next(self)

    def GetCurrentPageNumber(self):
        return _PDFNetPython.Highlights_GetCurrentPageNumber(self)

    def GetCurrentQuads(self):
        return _PDFNetPython.Highlights_GetCurrentQuads(self)

    def GetCurrentTextRange(self):
        return _PDFNetPython.Highlights_GetCurrentTextRange(self)

    def Destroy(self):
        return _PDFNetPython.Highlights_Destroy(self)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.Highlights_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.Highlights_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.Highlights_GetHandleInternal(self)
    __swig_setmethods__["mp_highlights"] = _PDFNetPython.Highlights_mp_highlights_set
    __swig_getmethods__["mp_highlights"] = _PDFNetPython.Highlights_mp_highlights_get
    if _newclass:
        mp_highlights = _swig_property(_PDFNetPython.Highlights_mp_highlights_get, _PDFNetPython.Highlights_mp_highlights_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_Highlights(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Highlights_swigregister = _PDFNetPython.Highlights_swigregister
Highlights_swigregister(Highlights)

def Highlights_CreateInternal(impl):
    return _PDFNetPython.Highlights_CreateInternal(impl)
Highlights_CreateInternal = _PDFNetPython.Highlights_CreateInternal

class TextRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextRange, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_TextRange
    __del__ = lambda self: None

    def GetPageNumber(self):
        return _PDFNetPython.TextRange_GetPageNumber(self)

    def GetQuads(self):
        return _PDFNetPython.TextRange_GetQuads(self)

    def GetText(self):
        return _PDFNetPython.TextRange_GetText(self)

    def GetTextBefore(self, count):
        return _PDFNetPython.TextRange_GetTextBefore(self, count)

    def GetTextAfter(self, count):
        return _PDFNetPython.TextRange_GetTextAfter(self, count)

    def Destroy(self):
        return _PDFNetPython.TextRange_Destroy(self)
    if _newclass:
        CreateInternal = staticmethod(_PDFNetPython.TextRange_CreateInternal)
    else:
        CreateInternal = _PDFNetPython.TextRange_CreateInternal

    def GetHandleInternal(self):
        return _PDFNetPython.TextRange_GetHandleInternal(self)
    __swig_setmethods__["mp_textrange"] = _PDFNetPython.TextRange_mp_textrange_set
    __swig_getmethods__["mp_textrange"] = _PDFNetPython.TextRange_mp_textrange_get
    if _newclass:
        mp_textrange = _swig_property(_PDFNetPython.TextRange_mp_textrange_get, _PDFNetPython.TextRange_mp_textrange_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_TextRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
TextRange_swigregister = _PDFNetPython.TextRange_swigregister
TextRange_swigregister(TextRange)

def TextRange_CreateInternal(impl):
    return _PDFNetPython.TextRange_CreateInternal(impl)
TextRange_CreateInternal = _PDFNetPython.TextRange_CreateInternal

class OCROptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OCROptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OCROptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_OCROptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_OCROptions
    __del__ = lambda self: None

    def AddIgnoreZonesForPage(self, regions, page_num):
        return _PDFNetPython.OCROptions_AddIgnoreZonesForPage(self, regions, page_num)

    def AddLang(self, lang):
        return _PDFNetPython.OCROptions_AddLang(self, lang)

    def AddTextZonesForPage(self, regions, page_num):
        return _PDFNetPython.OCROptions_AddTextZonesForPage(self, regions, page_num)

    def AddDPI(self, dpi):
        return _PDFNetPython.OCROptions_AddDPI(self, dpi)

    def SetUsePDFPageCoords(self, value):
        return _PDFNetPython.OCROptions_SetUsePDFPageCoords(self, value)

    def SetIgnoreExistingText(self, value):
        return _PDFNetPython.OCROptions_SetIgnoreExistingText(self, value)

    def GetAutoRotate(self):
        return _PDFNetPython.OCROptions_GetAutoRotate(self)

    def SetAutoRotate(self, value):
        return _PDFNetPython.OCROptions_SetAutoRotate(self, value)

    def GetOCREngine(self):
        return _PDFNetPython.OCROptions_GetOCREngine(self)

    def SetOCREngine(self, value):
        return _PDFNetPython.OCROptions_SetOCREngine(self, value)

    def GetInternalObj(self):
        return _PDFNetPython.OCROptions_GetInternalObj(self)
OCROptions_swigregister = _PDFNetPython.OCROptions_swigregister
OCROptions_swigregister(OCROptions)

class OCRModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OCRModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OCRModule, name)
    __repr__ = _swig_repr
    if _newclass:
        IsModuleAvailable = staticmethod(_PDFNetPython.OCRModule_IsModuleAvailable)
    else:
        IsModuleAvailable = _PDFNetPython.OCRModule_IsModuleAvailable
    if _newclass:
        IsIRISModuleAvailable = staticmethod(_PDFNetPython.OCRModule_IsIRISModuleAvailable)
    else:
        IsIRISModuleAvailable = _PDFNetPython.OCRModule_IsIRISModuleAvailable
    if _newclass:
        ImageToPDF = staticmethod(_PDFNetPython.OCRModule_ImageToPDF)
    else:
        ImageToPDF = _PDFNetPython.OCRModule_ImageToPDF
    if _newclass:
        ProcessPDF = staticmethod(_PDFNetPython.OCRModule_ProcessPDF)
    else:
        ProcessPDF = _PDFNetPython.OCRModule_ProcessPDF
    if _newclass:
        GetOCRJsonFromImage = staticmethod(_PDFNetPython.OCRModule_GetOCRJsonFromImage)
    else:
        GetOCRJsonFromImage = _PDFNetPython.OCRModule_GetOCRJsonFromImage
    if _newclass:
        GetOCRJsonFromPDF = staticmethod(_PDFNetPython.OCRModule_GetOCRJsonFromPDF)
    else:
        GetOCRJsonFromPDF = _PDFNetPython.OCRModule_GetOCRJsonFromPDF
    if _newclass:
        ApplyOCRJsonToPDF = staticmethod(_PDFNetPython.OCRModule_ApplyOCRJsonToPDF)
    else:
        ApplyOCRJsonToPDF = _PDFNetPython.OCRModule_ApplyOCRJsonToPDF
    if _newclass:
        GetOCRXmlFromImage = staticmethod(_PDFNetPython.OCRModule_GetOCRXmlFromImage)
    else:
        GetOCRXmlFromImage = _PDFNetPython.OCRModule_GetOCRXmlFromImage
    if _newclass:
        GetOCRXmlFromPDF = staticmethod(_PDFNetPython.OCRModule_GetOCRXmlFromPDF)
    else:
        GetOCRXmlFromPDF = _PDFNetPython.OCRModule_GetOCRXmlFromPDF
    if _newclass:
        ApplyOCRXmlToPDF = staticmethod(_PDFNetPython.OCRModule_ApplyOCRXmlToPDF)
    else:
        ApplyOCRXmlToPDF = _PDFNetPython.OCRModule_ApplyOCRXmlToPDF

    def __init__(self):
        this = _PDFNetPython.new_OCRModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_OCRModule
    __del__ = lambda self: None
OCRModule_swigregister = _PDFNetPython.OCRModule_swigregister
OCRModule_swigregister(OCRModule)

def OCRModule_IsModuleAvailable():
    return _PDFNetPython.OCRModule_IsModuleAvailable()
OCRModule_IsModuleAvailable = _PDFNetPython.OCRModule_IsModuleAvailable

def OCRModule_IsIRISModuleAvailable():
    return _PDFNetPython.OCRModule_IsIRISModuleAvailable()
OCRModule_IsIRISModuleAvailable = _PDFNetPython.OCRModule_IsIRISModuleAvailable

def OCRModule_ImageToPDF(dst, src, options):
    return _PDFNetPython.OCRModule_ImageToPDF(dst, src, options)
OCRModule_ImageToPDF = _PDFNetPython.OCRModule_ImageToPDF

def OCRModule_ProcessPDF(dst, options):
    return _PDFNetPython.OCRModule_ProcessPDF(dst, options)
OCRModule_ProcessPDF = _PDFNetPython.OCRModule_ProcessPDF

def OCRModule_GetOCRJsonFromImage(dst, src, options):
    return _PDFNetPython.OCRModule_GetOCRJsonFromImage(dst, src, options)
OCRModule_GetOCRJsonFromImage = _PDFNetPython.OCRModule_GetOCRJsonFromImage

def OCRModule_GetOCRJsonFromPDF(src, options):
    return _PDFNetPython.OCRModule_GetOCRJsonFromPDF(src, options)
OCRModule_GetOCRJsonFromPDF = _PDFNetPython.OCRModule_GetOCRJsonFromPDF

def OCRModule_ApplyOCRJsonToPDF(dst, json):
    return _PDFNetPython.OCRModule_ApplyOCRJsonToPDF(dst, json)
OCRModule_ApplyOCRJsonToPDF = _PDFNetPython.OCRModule_ApplyOCRJsonToPDF

def OCRModule_GetOCRXmlFromImage(dst, src, options):
    return _PDFNetPython.OCRModule_GetOCRXmlFromImage(dst, src, options)
OCRModule_GetOCRXmlFromImage = _PDFNetPython.OCRModule_GetOCRXmlFromImage

def OCRModule_GetOCRXmlFromPDF(src, options):
    return _PDFNetPython.OCRModule_GetOCRXmlFromPDF(src, options)
OCRModule_GetOCRXmlFromPDF = _PDFNetPython.OCRModule_GetOCRXmlFromPDF

def OCRModule_ApplyOCRXmlToPDF(dst, xml):
    return _PDFNetPython.OCRModule_ApplyOCRXmlToPDF(dst, xml)
OCRModule_ApplyOCRXmlToPDF = _PDFNetPython.OCRModule_ApplyOCRXmlToPDF

class CADModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CADModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CADModule, name)
    __repr__ = _swig_repr
    if _newclass:
        IsModuleAvailable = staticmethod(_PDFNetPython.CADModule_IsModuleAvailable)
    else:
        IsModuleAvailable = _PDFNetPython.CADModule_IsModuleAvailable

    def __init__(self):
        this = _PDFNetPython.new_CADModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_CADModule
    __del__ = lambda self: None
CADModule_swigregister = _PDFNetPython.CADModule_swigregister
CADModule_swigregister(CADModule)

def CADModule_IsModuleAvailable():
    return _PDFNetPython.CADModule_IsModuleAvailable()
CADModule_IsModuleAvailable = _PDFNetPython.CADModule_IsModuleAvailable

class AdvancedImagingModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedImagingModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedImagingModule, name)
    __repr__ = _swig_repr
    if _newclass:
        IsModuleAvailable = staticmethod(_PDFNetPython.AdvancedImagingModule_IsModuleAvailable)
    else:
        IsModuleAvailable = _PDFNetPython.AdvancedImagingModule_IsModuleAvailable

    def __init__(self):
        this = _PDFNetPython.new_AdvancedImagingModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_AdvancedImagingModule
    __del__ = lambda self: None
AdvancedImagingModule_swigregister = _PDFNetPython.AdvancedImagingModule_swigregister
AdvancedImagingModule_swigregister(AdvancedImagingModule)

def AdvancedImagingModule_IsModuleAvailable():
    return _PDFNetPython.AdvancedImagingModule_IsModuleAvailable()
AdvancedImagingModule_IsModuleAvailable = _PDFNetPython.AdvancedImagingModule_IsModuleAvailable

class PDF2HtmlReflowParagraphsModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2HtmlReflowParagraphsModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2HtmlReflowParagraphsModule, name)
    __repr__ = _swig_repr
    if _newclass:
        IsModuleAvailable = staticmethod(_PDFNetPython.PDF2HtmlReflowParagraphsModule_IsModuleAvailable)
    else:
        IsModuleAvailable = _PDFNetPython.PDF2HtmlReflowParagraphsModule_IsModuleAvailable

    def __init__(self):
        this = _PDFNetPython.new_PDF2HtmlReflowParagraphsModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDF2HtmlReflowParagraphsModule
    __del__ = lambda self: None
PDF2HtmlReflowParagraphsModule_swigregister = _PDFNetPython.PDF2HtmlReflowParagraphsModule_swigregister
PDF2HtmlReflowParagraphsModule_swigregister(PDF2HtmlReflowParagraphsModule)

def PDF2HtmlReflowParagraphsModule_IsModuleAvailable():
    return _PDFNetPython.PDF2HtmlReflowParagraphsModule_IsModuleAvailable()
PDF2HtmlReflowParagraphsModule_IsModuleAvailable = _PDFNetPython.PDF2HtmlReflowParagraphsModule_IsModuleAvailable

class PDF2WordModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDF2WordModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDF2WordModule, name)
    __repr__ = _swig_repr
    if _newclass:
        IsModuleAvailable = staticmethod(_PDFNetPython.PDF2WordModule_IsModuleAvailable)
    else:
        IsModuleAvailable = _PDFNetPython.PDF2WordModule_IsModuleAvailable

    def __init__(self):
        this = _PDFNetPython.new_PDF2WordModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDF2WordModule
    __del__ = lambda self: None
PDF2WordModule_swigregister = _PDFNetPython.PDF2WordModule_swigregister
PDF2WordModule_swigregister(PDF2WordModule)

def PDF2WordModule_IsModuleAvailable():
    return _PDFNetPython.PDF2WordModule_IsModuleAvailable()
PDF2WordModule_IsModuleAvailable = _PDFNetPython.PDF2WordModule_IsModuleAvailable

class StructuredOutputModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructuredOutputModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructuredOutputModule, name)
    __repr__ = _swig_repr
    if _newclass:
        IsModuleAvailable = staticmethod(_PDFNetPython.StructuredOutputModule_IsModuleAvailable)
    else:
        IsModuleAvailable = _PDFNetPython.StructuredOutputModule_IsModuleAvailable

    def __init__(self):
        this = _PDFNetPython.new_StructuredOutputModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_StructuredOutputModule
    __del__ = lambda self: None
StructuredOutputModule_swigregister = _PDFNetPython.StructuredOutputModule_swigregister
StructuredOutputModule_swigregister(StructuredOutputModule)

def StructuredOutputModule_IsModuleAvailable():
    return _PDFNetPython.StructuredOutputModule_IsModuleAvailable()
StructuredOutputModule_IsModuleAvailable = _PDFNetPython.StructuredOutputModule_IsModuleAvailable

class Optimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Optimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Optimizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Optimize = staticmethod(_PDFNetPython.Optimizer_Optimize)
    else:
        Optimize = _PDFNetPython.Optimizer_Optimize
    __swig_destroy__ = _PDFNetPython.delete_Optimizer
    __del__ = lambda self: None
Optimizer_swigregister = _PDFNetPython.Optimizer_swigregister
Optimizer_swigregister(Optimizer)

def Optimizer_Optimize(*args):
    return _PDFNetPython.Optimizer_Optimize(*args)
Optimizer_Optimize = _PDFNetPython.Optimizer_Optimize

class ImageSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSettings, name)
    __repr__ = _swig_repr
    e_retain = _PDFNetPython.ImageSettings_e_retain
    e_flate = _PDFNetPython.ImageSettings_e_flate
    e_jpeg = _PDFNetPython.ImageSettings_e_jpeg
    e_jpeg2000 = _PDFNetPython.ImageSettings_e_jpeg2000
    e_none = _PDFNetPython.ImageSettings_e_none
    e_off = _PDFNetPython.ImageSettings_e_off
    e_default = _PDFNetPython.ImageSettings_e_default

    def __init__(self):
        this = _PDFNetPython.new_ImageSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetImageDPI(self, maximum, resampling):
        return _PDFNetPython.ImageSettings_SetImageDPI(self, maximum, resampling)

    def SetCompressionMode(self, mode):
        return _PDFNetPython.ImageSettings_SetCompressionMode(self, mode)

    def SetDownsampleMode(self, mode):
        return _PDFNetPython.ImageSettings_SetDownsampleMode(self, mode)

    def SetQuality(self, quality):
        return _PDFNetPython.ImageSettings_SetQuality(self, quality)

    def ForceRecompression(self, force):
        return _PDFNetPython.ImageSettings_ForceRecompression(self, force)

    def ForceChanges(self, force):
        return _PDFNetPython.ImageSettings_ForceChanges(self, force)
    __swig_destroy__ = _PDFNetPython.delete_ImageSettings
    __del__ = lambda self: None
ImageSettings_swigregister = _PDFNetPython.ImageSettings_swigregister
ImageSettings_swigregister(ImageSettings)

class MonoImageSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonoImageSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonoImageSettings, name)
    __repr__ = _swig_repr
    e_jbig2 = _PDFNetPython.MonoImageSettings_e_jbig2
    e_flate = _PDFNetPython.MonoImageSettings_e_flate
    e_none = _PDFNetPython.MonoImageSettings_e_none
    e_ccitt = _PDFNetPython.MonoImageSettings_e_ccitt
    e_off = _PDFNetPython.MonoImageSettings_e_off
    e_default = _PDFNetPython.MonoImageSettings_e_default

    def __init__(self):
        this = _PDFNetPython.new_MonoImageSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetImageDPI(self, maximum, resampling):
        return _PDFNetPython.MonoImageSettings_SetImageDPI(self, maximum, resampling)

    def SetCompressionMode(self, mode):
        return _PDFNetPython.MonoImageSettings_SetCompressionMode(self, mode)

    def SetDownsampleMode(self, mode):
        return _PDFNetPython.MonoImageSettings_SetDownsampleMode(self, mode)

    def ForceRecompression(self, force):
        return _PDFNetPython.MonoImageSettings_ForceRecompression(self, force)

    def ForceChanges(self, force):
        return _PDFNetPython.MonoImageSettings_ForceChanges(self, force)

    def SetJBIG2Threshold(self, jbig2_threshold):
        return _PDFNetPython.MonoImageSettings_SetJBIG2Threshold(self, jbig2_threshold)
    __swig_destroy__ = _PDFNetPython.delete_MonoImageSettings
    __del__ = lambda self: None
MonoImageSettings_swigregister = _PDFNetPython.MonoImageSettings_swigregister
MonoImageSettings_swigregister(MonoImageSettings)

class TextSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextSettings, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_TextSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SubsetFonts(self, subset):
        return _PDFNetPython.TextSettings_SubsetFonts(self, subset)

    def EmbedFonts(self, embed):
        return _PDFNetPython.TextSettings_EmbedFonts(self, embed)
    __swig_destroy__ = _PDFNetPython.delete_TextSettings
    __del__ = lambda self: None
TextSettings_swigregister = _PDFNetPython.TextSettings_swigregister
TextSettings_swigregister(TextSettings)

class OptimizerSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizerSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizerSettings, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_OptimizerSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetColorImageSettings(self, settings):
        return _PDFNetPython.OptimizerSettings_SetColorImageSettings(self, settings)

    def SetGrayscaleImageSettings(self, settings):
        return _PDFNetPython.OptimizerSettings_SetGrayscaleImageSettings(self, settings)

    def SetMonoImageSettings(self, settings):
        return _PDFNetPython.OptimizerSettings_SetMonoImageSettings(self, settings)

    def SetTextSettings(self, settings):
        return _PDFNetPython.OptimizerSettings_SetTextSettings(self, settings)

    def RemoveCustomEntries(self, should_remove):
        return _PDFNetPython.OptimizerSettings_RemoveCustomEntries(self, should_remove)
    __swig_setmethods__["m_color_image_settings"] = _PDFNetPython.OptimizerSettings_m_color_image_settings_set
    __swig_getmethods__["m_color_image_settings"] = _PDFNetPython.OptimizerSettings_m_color_image_settings_get
    if _newclass:
        m_color_image_settings = _swig_property(_PDFNetPython.OptimizerSettings_m_color_image_settings_get, _PDFNetPython.OptimizerSettings_m_color_image_settings_set)
    __swig_setmethods__["m_grayscale_image_settings"] = _PDFNetPython.OptimizerSettings_m_grayscale_image_settings_set
    __swig_getmethods__["m_grayscale_image_settings"] = _PDFNetPython.OptimizerSettings_m_grayscale_image_settings_get
    if _newclass:
        m_grayscale_image_settings = _swig_property(_PDFNetPython.OptimizerSettings_m_grayscale_image_settings_get, _PDFNetPython.OptimizerSettings_m_grayscale_image_settings_set)
    __swig_setmethods__["m_mono_image_settings"] = _PDFNetPython.OptimizerSettings_m_mono_image_settings_set
    __swig_getmethods__["m_mono_image_settings"] = _PDFNetPython.OptimizerSettings_m_mono_image_settings_get
    if _newclass:
        m_mono_image_settings = _swig_property(_PDFNetPython.OptimizerSettings_m_mono_image_settings_get, _PDFNetPython.OptimizerSettings_m_mono_image_settings_set)
    __swig_setmethods__["m_text_settings"] = _PDFNetPython.OptimizerSettings_m_text_settings_set
    __swig_getmethods__["m_text_settings"] = _PDFNetPython.OptimizerSettings_m_text_settings_get
    if _newclass:
        m_text_settings = _swig_property(_PDFNetPython.OptimizerSettings_m_text_settings_get, _PDFNetPython.OptimizerSettings_m_text_settings_set)
    __swig_setmethods__["m_remove_custom"] = _PDFNetPython.OptimizerSettings_m_remove_custom_set
    __swig_getmethods__["m_remove_custom"] = _PDFNetPython.OptimizerSettings_m_remove_custom_get
    if _newclass:
        m_remove_custom = _swig_property(_PDFNetPython.OptimizerSettings_m_remove_custom_get, _PDFNetPython.OptimizerSettings_m_remove_custom_set)
    __swig_destroy__ = _PDFNetPython.delete_OptimizerSettings
    __del__ = lambda self: None
OptimizerSettings_swigregister = _PDFNetPython.OptimizerSettings_swigregister
OptimizerSettings_swigregister(OptimizerSettings)

class BitmapInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitmapInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitmapInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _PDFNetPython.BitmapInfo_width_set
    __swig_getmethods__["width"] = _PDFNetPython.BitmapInfo_width_get
    if _newclass:
        width = _swig_property(_PDFNetPython.BitmapInfo_width_get, _PDFNetPython.BitmapInfo_width_set)
    __swig_setmethods__["height"] = _PDFNetPython.BitmapInfo_height_set
    __swig_getmethods__["height"] = _PDFNetPython.BitmapInfo_height_get
    if _newclass:
        height = _swig_property(_PDFNetPython.BitmapInfo_height_get, _PDFNetPython.BitmapInfo_height_set)
    __swig_setmethods__["stride"] = _PDFNetPython.BitmapInfo_stride_set
    __swig_getmethods__["stride"] = _PDFNetPython.BitmapInfo_stride_get
    if _newclass:
        stride = _swig_property(_PDFNetPython.BitmapInfo_stride_get, _PDFNetPython.BitmapInfo_stride_set)
    __swig_setmethods__["dpi"] = _PDFNetPython.BitmapInfo_dpi_set
    __swig_getmethods__["dpi"] = _PDFNetPython.BitmapInfo_dpi_get
    if _newclass:
        dpi = _swig_property(_PDFNetPython.BitmapInfo_dpi_get, _PDFNetPython.BitmapInfo_dpi_set)

    def __init__(self, *args):
        this = _PDFNetPython.new_BitmapInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetBuffer(self):
        return _PDFNetPython.BitmapInfo_GetBuffer(self)
    __swig_destroy__ = _PDFNetPython.delete_BitmapInfo
    __del__ = lambda self: None
BitmapInfo_swigregister = _PDFNetPython.BitmapInfo_swigregister
BitmapInfo_swigregister(BitmapInfo)

class PDFDraw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFDraw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFDraw, name)
    __repr__ = _swig_repr

    def __init__(self, dpi=92):
        this = _PDFNetPython.new_PDFDraw(dpi)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDFDraw
    __del__ = lambda self: None

    def SetRasterizerType(self, type):
        return _PDFNetPython.PDFDraw_SetRasterizerType(self, type)

    def SetDPI(self, dpi):
        return _PDFNetPython.PDFDraw_SetDPI(self, dpi)

    def SetImageSize(self, width, height, preserve_aspect_ratio=True):
        return _PDFNetPython.PDFDraw_SetImageSize(self, width, height, preserve_aspect_ratio)

    def SetPageBox(self, region):
        return _PDFNetPython.PDFDraw_SetPageBox(self, region)

    def SetClipRect(self, clip_rect):
        return _PDFNetPython.PDFDraw_SetClipRect(self, clip_rect)

    def SetFlipYAxis(self, flip_y):
        return _PDFNetPython.PDFDraw_SetFlipYAxis(self, flip_y)

    def SetRotate(self, r):
        return _PDFNetPython.PDFDraw_SetRotate(self, r)

    def SetDrawAnnotations(self, render_annots):
        return _PDFNetPython.PDFDraw_SetDrawAnnotations(self, render_annots)

    def SetHighlightFields(self, highlight_fields):
        return _PDFNetPython.PDFDraw_SetHighlightFields(self, highlight_fields)

    def SetAntiAliasing(self, enable_aa):
        return _PDFNetPython.PDFDraw_SetAntiAliasing(self, enable_aa)

    def SetPathHinting(self, enable_hinting):
        return _PDFNetPython.PDFDraw_SetPathHinting(self, enable_hinting)

    def SetThinLineAdjustment(self, pixel_grid_fit, stroke_adjust):
        return _PDFNetPython.PDFDraw_SetThinLineAdjustment(self, pixel_grid_fit, stroke_adjust)

    def SetImageSmoothing(self, smoothing_enabled=True, hq_image_resampling=False):
        return _PDFNetPython.PDFDraw_SetImageSmoothing(self, smoothing_enabled, hq_image_resampling)

    def SetCaching(self, enabled=True):
        return _PDFNetPython.PDFDraw_SetCaching(self, enabled)

    def SetGamma(self, exp):
        return _PDFNetPython.PDFDraw_SetGamma(self, exp)

    def SetOCGContext(self, ctx):
        return _PDFNetPython.PDFDraw_SetOCGContext(self, ctx)

    def SetPrintMode(self, is_printing):
        return _PDFNetPython.PDFDraw_SetPrintMode(self, is_printing)

    def SetDefaultPageColor(self, r, g, b):
        return _PDFNetPython.PDFDraw_SetDefaultPageColor(self, r, g, b)

    def SetPageTransparent(self, is_transparent):
        return _PDFNetPython.PDFDraw_SetPageTransparent(self, is_transparent)

    def SetOverprint(self, op):
        return _PDFNetPython.PDFDraw_SetOverprint(self, op)

    def Export(self, *args):
        return _PDFNetPython.PDFDraw_Export(self, *args)
    e_rgba = _PDFNetPython.PDFDraw_e_rgba
    e_bgra = _PDFNetPython.PDFDraw_e_bgra
    e_rgb = _PDFNetPython.PDFDraw_e_rgb
    e_bgr = _PDFNetPython.PDFDraw_e_bgr
    e_gray = _PDFNetPython.PDFDraw_e_gray
    e_gray_alpha = _PDFNetPython.PDFDraw_e_gray_alpha
    e_cmyk = _PDFNetPython.PDFDraw_e_cmyk

    def GetBitmap(self, *args):
        return _PDFNetPython.PDFDraw_GetBitmap(self, *args)

    def GetSeparationBitmaps(self, page):
        return _PDFNetPython.PDFDraw_GetSeparationBitmaps(self, page)

    def SetErrorReportProc(self, instance):
        return _PDFNetPython.PDFDraw_SetErrorReportProc(self, instance)

    def SetColorPostProcessMode(self, mode):
        return _PDFNetPython.PDFDraw_SetColorPostProcessMode(self, mode)

    def Destroy(self):
        return _PDFNetPython.PDFDraw_Destroy(self)
    __swig_setmethods__["mp_draw"] = _PDFNetPython.PDFDraw_mp_draw_set
    __swig_getmethods__["mp_draw"] = _PDFNetPython.PDFDraw_mp_draw_get
    if _newclass:
        mp_draw = _swig_property(_PDFNetPython.PDFDraw_mp_draw_get, _PDFNetPython.PDFDraw_mp_draw_set)
PDFDraw_swigregister = _PDFNetPython.PDFDraw_swigregister
PDFDraw_swigregister(PDFDraw)

class WebFontDownloader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WebFontDownloader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WebFontDownloader, name)
    __repr__ = _swig_repr
    if _newclass:
        IsAvailable = staticmethod(_PDFNetPython.WebFontDownloader_IsAvailable)
    else:
        IsAvailable = _PDFNetPython.WebFontDownloader_IsAvailable
    if _newclass:
        EnableDownloads = staticmethod(_PDFNetPython.WebFontDownloader_EnableDownloads)
    else:
        EnableDownloads = _PDFNetPython.WebFontDownloader_EnableDownloads
    if _newclass:
        DisableDownloads = staticmethod(_PDFNetPython.WebFontDownloader_DisableDownloads)
    else:
        DisableDownloads = _PDFNetPython.WebFontDownloader_DisableDownloads
    if _newclass:
        PreCacheAsync = staticmethod(_PDFNetPython.WebFontDownloader_PreCacheAsync)
    else:
        PreCacheAsync = _PDFNetPython.WebFontDownloader_PreCacheAsync
    if _newclass:
        ClearCache = staticmethod(_PDFNetPython.WebFontDownloader_ClearCache)
    else:
        ClearCache = _PDFNetPython.WebFontDownloader_ClearCache
    if _newclass:
        SetCustomWebFontURL = staticmethod(_PDFNetPython.WebFontDownloader_SetCustomWebFontURL)
    else:
        SetCustomWebFontURL = _PDFNetPython.WebFontDownloader_SetCustomWebFontURL

    def __init__(self):
        this = _PDFNetPython.new_WebFontDownloader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_WebFontDownloader
    __del__ = lambda self: None
WebFontDownloader_swigregister = _PDFNetPython.WebFontDownloader_swigregister
WebFontDownloader_swigregister(WebFontDownloader)

def WebFontDownloader_IsAvailable():
    return _PDFNetPython.WebFontDownloader_IsAvailable()
WebFontDownloader_IsAvailable = _PDFNetPython.WebFontDownloader_IsAvailable

def WebFontDownloader_EnableDownloads():
    return _PDFNetPython.WebFontDownloader_EnableDownloads()
WebFontDownloader_EnableDownloads = _PDFNetPython.WebFontDownloader_EnableDownloads

def WebFontDownloader_DisableDownloads():
    return _PDFNetPython.WebFontDownloader_DisableDownloads()
WebFontDownloader_DisableDownloads = _PDFNetPython.WebFontDownloader_DisableDownloads

def WebFontDownloader_PreCacheAsync():
    return _PDFNetPython.WebFontDownloader_PreCacheAsync()
WebFontDownloader_PreCacheAsync = _PDFNetPython.WebFontDownloader_PreCacheAsync

def WebFontDownloader_ClearCache():
    return _PDFNetPython.WebFontDownloader_ClearCache()
WebFontDownloader_ClearCache = _PDFNetPython.WebFontDownloader_ClearCache

def WebFontDownloader_SetCustomWebFontURL(url):
    return _PDFNetPython.WebFontDownloader_SetCustomWebFontURL(url)
WebFontDownloader_SetCustomWebFontURL = _PDFNetPython.WebFontDownloader_SetCustomWebFontURL

class PDFNet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFNet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFNet, name)
    __repr__ = _swig_repr
    if _newclass:
        EnableJavaScript = staticmethod(_PDFNetPython.PDFNet_EnableJavaScript)
    else:
        EnableJavaScript = _PDFNetPython.PDFNet_EnableJavaScript
    if _newclass:
        IsJavaScriptEnabled = staticmethod(_PDFNetPython.PDFNet_IsJavaScriptEnabled)
    else:
        IsJavaScriptEnabled = _PDFNetPython.PDFNet_IsJavaScriptEnabled
    if _newclass:
        SetResourcesPath = staticmethod(_PDFNetPython.PDFNet_SetResourcesPath)
    else:
        SetResourcesPath = _PDFNetPython.PDFNet_SetResourcesPath
    if _newclass:
        GetResourcesPath = staticmethod(_PDFNetPython.PDFNet_GetResourcesPath)
    else:
        GetResourcesPath = _PDFNetPython.PDFNet_GetResourcesPath
    if _newclass:
        AddResourceSearchPath = staticmethod(_PDFNetPython.PDFNet_AddResourceSearchPath)
    else:
        AddResourceSearchPath = _PDFNetPython.PDFNet_AddResourceSearchPath
    if _newclass:
        GetVersion = staticmethod(_PDFNetPython.PDFNet_GetVersion)
    else:
        GetVersion = _PDFNetPython.PDFNet_GetVersion
    e_lcms = _PDFNetPython.PDFNet_e_lcms
    e_icm = _PDFNetPython.PDFNet_e_icm
    e_no_cms = _PDFNetPython.PDFNet_e_no_cms
    if _newclass:
        SetColorManagement = staticmethod(_PDFNetPython.PDFNet_SetColorManagement)
    else:
        SetColorManagement = _PDFNetPython.PDFNet_SetColorManagement
    if _newclass:
        SetDefaultDeviceCMYKProfile = staticmethod(_PDFNetPython.PDFNet_SetDefaultDeviceCMYKProfile)
    else:
        SetDefaultDeviceCMYKProfile = _PDFNetPython.PDFNet_SetDefaultDeviceCMYKProfile
    if _newclass:
        SetDefaultDeviceRGBProfile = staticmethod(_PDFNetPython.PDFNet_SetDefaultDeviceRGBProfile)
    else:
        SetDefaultDeviceRGBProfile = _PDFNetPython.PDFNet_SetDefaultDeviceRGBProfile
    if _newclass:
        SetDefaultDiskCachingEnabled = staticmethod(_PDFNetPython.PDFNet_SetDefaultDiskCachingEnabled)
    else:
        SetDefaultDiskCachingEnabled = _PDFNetPython.PDFNet_SetDefaultDiskCachingEnabled
    e_Z_DEFAULT_COMPRESSION = _PDFNetPython.PDFNet_e_Z_DEFAULT_COMPRESSION
    e_Z_NO_COMPRESSION = _PDFNetPython.PDFNet_e_Z_NO_COMPRESSION
    e_Z_BEST_SPEED = _PDFNetPython.PDFNet_e_Z_BEST_SPEED
    e_Z_BEST_COMPRESSION = _PDFNetPython.PDFNet_e_Z_BEST_COMPRESSION
    if _newclass:
        SetDefaultFlateCompressionLevel = staticmethod(_PDFNetPython.PDFNet_SetDefaultFlateCompressionLevel)
    else:
        SetDefaultFlateCompressionLevel = _PDFNetPython.PDFNet_SetDefaultFlateCompressionLevel
    if _newclass:
        SetViewerCache = staticmethod(_PDFNetPython.PDFNet_SetViewerCache)
    else:
        SetViewerCache = _PDFNetPython.PDFNet_SetViewerCache
    e_Identity = _PDFNetPython.PDFNet_e_Identity
    e_Japan1 = _PDFNetPython.PDFNet_e_Japan1
    e_Japan2 = _PDFNetPython.PDFNet_e_Japan2
    e_GB1 = _PDFNetPython.PDFNet_e_GB1
    e_CNS1 = _PDFNetPython.PDFNet_e_CNS1
    e_Korea1 = _PDFNetPython.PDFNet_e_Korea1
    if _newclass:
        AddFontSubst = staticmethod(_PDFNetPython.PDFNet_AddFontSubst)
    else:
        AddFontSubst = _PDFNetPython.PDFNet_AddFontSubst
    if _newclass:
        SetTempPath = staticmethod(_PDFNetPython.PDFNet_SetTempPath)
    else:
        SetTempPath = _PDFNetPython.PDFNet_SetTempPath
    if _newclass:
        SetPersistentCachePath = staticmethod(_PDFNetPython.PDFNet_SetPersistentCachePath)
    else:
        SetPersistentCachePath = _PDFNetPython.PDFNet_SetPersistentCachePath
    if _newclass:
        GetSystemFontList = staticmethod(_PDFNetPython.PDFNet_GetSystemFontList)
    else:
        GetSystemFontList = _PDFNetPython.PDFNet_GetSystemFontList
    e_LogLevel_Off = _PDFNetPython.PDFNet_e_LogLevel_Off
    e_LogLevel_Fatal = _PDFNetPython.PDFNet_e_LogLevel_Fatal
    e_LogLevel_Error = _PDFNetPython.PDFNet_e_LogLevel_Error
    e_LogLevel_Warning = _PDFNetPython.PDFNet_e_LogLevel_Warning
    e_LogLevel_Info = _PDFNetPython.PDFNet_e_LogLevel_Info
    e_LogLevel_Trace = _PDFNetPython.PDFNet_e_LogLevel_Trace
    e_LogLevel_Debug = _PDFNetPython.PDFNet_e_LogLevel_Debug
    if _newclass:
        SetLogLevel = staticmethod(_PDFNetPython.PDFNet_SetLogLevel)
    else:
        SetLogLevel = _PDFNetPython.PDFNet_SetLogLevel
    if _newclass:
        AddPDFTronCustomHandler = staticmethod(_PDFNetPython.PDFNet_AddPDFTronCustomHandler)
    else:
        AddPDFTronCustomHandler = _PDFNetPython.PDFNet_AddPDFTronCustomHandler
    if _newclass:
        GetVersionString = staticmethod(_PDFNetPython.PDFNet_GetVersionString)
    else:
        GetVersionString = _PDFNetPython.PDFNet_GetVersionString
    if _newclass:
        SetWriteAPIUsageLocally = staticmethod(_PDFNetPython.PDFNet_SetWriteAPIUsageLocally)
    else:
        SetWriteAPIUsageLocally = _PDFNetPython.PDFNet_SetWriteAPIUsageLocally
    e_continue = _PDFNetPython.PDFNet_e_continue
    e_continue_unless_switching_to_demo = _PDFNetPython.PDFNet_e_continue_unless_switching_to_demo
    e_stop = _PDFNetPython.PDFNet_e_stop
    if _newclass:
        SetConnectionErrorHandlingMode = staticmethod(_PDFNetPython.PDFNet_SetConnectionErrorHandlingMode)
    else:
        SetConnectionErrorHandlingMode = _PDFNetPython.PDFNet_SetConnectionErrorHandlingMode
    if _newclass:
        SetConnectionErrorProc = staticmethod(_PDFNetPython.PDFNet_SetConnectionErrorProc)
    else:
        SetConnectionErrorProc = _PDFNetPython.PDFNet_SetConnectionErrorProc
    if _newclass:
        Initialize = staticmethod(_PDFNetPython.PDFNet_Initialize)
    else:
        Initialize = _PDFNetPython.PDFNet_Initialize
    if _newclass:
        Terminate = staticmethod(_PDFNetPython.PDFNet_Terminate)
    else:
        Terminate = _PDFNetPython.PDFNet_Terminate

    def __init__(self):
        this = _PDFNetPython.new_PDFNet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDFNet
    __del__ = lambda self: None
PDFNet_swigregister = _PDFNetPython.PDFNet_swigregister
PDFNet_swigregister(PDFNet)

def PDFNet_EnableJavaScript(enable):
    return _PDFNetPython.PDFNet_EnableJavaScript(enable)
PDFNet_EnableJavaScript = _PDFNetPython.PDFNet_EnableJavaScript

def PDFNet_IsJavaScriptEnabled():
    return _PDFNetPython.PDFNet_IsJavaScriptEnabled()
PDFNet_IsJavaScriptEnabled = _PDFNetPython.PDFNet_IsJavaScriptEnabled

def PDFNet_SetResourcesPath(path):
    return _PDFNetPython.PDFNet_SetResourcesPath(path)
PDFNet_SetResourcesPath = _PDFNetPython.PDFNet_SetResourcesPath

def PDFNet_GetResourcesPath():
    return _PDFNetPython.PDFNet_GetResourcesPath()
PDFNet_GetResourcesPath = _PDFNetPython.PDFNet_GetResourcesPath

def PDFNet_AddResourceSearchPath(path):
    return _PDFNetPython.PDFNet_AddResourceSearchPath(path)
PDFNet_AddResourceSearchPath = _PDFNetPython.PDFNet_AddResourceSearchPath

def PDFNet_GetVersion():
    return _PDFNetPython.PDFNet_GetVersion()
PDFNet_GetVersion = _PDFNetPython.PDFNet_GetVersion

def PDFNet_SetColorManagement(*args):
    return _PDFNetPython.PDFNet_SetColorManagement(*args)
PDFNet_SetColorManagement = _PDFNetPython.PDFNet_SetColorManagement

def PDFNet_SetDefaultDeviceCMYKProfile(*args):
    return _PDFNetPython.PDFNet_SetDefaultDeviceCMYKProfile(*args)
PDFNet_SetDefaultDeviceCMYKProfile = _PDFNetPython.PDFNet_SetDefaultDeviceCMYKProfile

def PDFNet_SetDefaultDeviceRGBProfile(*args):
    return _PDFNetPython.PDFNet_SetDefaultDeviceRGBProfile(*args)
PDFNet_SetDefaultDeviceRGBProfile = _PDFNetPython.PDFNet_SetDefaultDeviceRGBProfile

def PDFNet_SetDefaultDiskCachingEnabled(use_disk):
    return _PDFNetPython.PDFNet_SetDefaultDiskCachingEnabled(use_disk)
PDFNet_SetDefaultDiskCachingEnabled = _PDFNetPython.PDFNet_SetDefaultDiskCachingEnabled

def PDFNet_SetDefaultFlateCompressionLevel(level):
    return _PDFNetPython.PDFNet_SetDefaultFlateCompressionLevel(level)
PDFNet_SetDefaultFlateCompressionLevel = _PDFNetPython.PDFNet_SetDefaultFlateCompressionLevel

def PDFNet_SetViewerCache(max_cache_size, on_disk):
    return _PDFNetPython.PDFNet_SetViewerCache(max_cache_size, on_disk)
PDFNet_SetViewerCache = _PDFNetPython.PDFNet_SetViewerCache

def PDFNet_AddFontSubst(*args):
    return _PDFNetPython.PDFNet_AddFontSubst(*args)
PDFNet_AddFontSubst = _PDFNetPython.PDFNet_AddFontSubst

def PDFNet_SetTempPath(temp_path):
    return _PDFNetPython.PDFNet_SetTempPath(temp_path)
PDFNet_SetTempPath = _PDFNetPython.PDFNet_SetTempPath

def PDFNet_SetPersistentCachePath(persistent_path):
    return _PDFNetPython.PDFNet_SetPersistentCachePath(persistent_path)
PDFNet_SetPersistentCachePath = _PDFNetPython.PDFNet_SetPersistentCachePath

def PDFNet_GetSystemFontList():
    return _PDFNetPython.PDFNet_GetSystemFontList()
PDFNet_GetSystemFontList = _PDFNetPython.PDFNet_GetSystemFontList

def PDFNet_SetLogLevel(*args):
    return _PDFNetPython.PDFNet_SetLogLevel(*args)
PDFNet_SetLogLevel = _PDFNetPython.PDFNet_SetLogLevel

def PDFNet_AddPDFTronCustomHandler(custom_id):
    return _PDFNetPython.PDFNet_AddPDFTronCustomHandler(custom_id)
PDFNet_AddPDFTronCustomHandler = _PDFNetPython.PDFNet_AddPDFTronCustomHandler

def PDFNet_GetVersionString():
    return _PDFNetPython.PDFNet_GetVersionString()
PDFNet_GetVersionString = _PDFNetPython.PDFNet_GetVersionString

def PDFNet_SetWriteAPIUsageLocally(write_usage):
    return _PDFNetPython.PDFNet_SetWriteAPIUsageLocally(write_usage)
PDFNet_SetWriteAPIUsageLocally = _PDFNetPython.PDFNet_SetWriteAPIUsageLocally

def PDFNet_SetConnectionErrorHandlingMode(mode):
    return _PDFNetPython.PDFNet_SetConnectionErrorHandlingMode(mode)
PDFNet_SetConnectionErrorHandlingMode = _PDFNetPython.PDFNet_SetConnectionErrorHandlingMode

def PDFNet_SetConnectionErrorProc(instance):
    return _PDFNetPython.PDFNet_SetConnectionErrorProc(instance)
PDFNet_SetConnectionErrorProc = _PDFNetPython.PDFNet_SetConnectionErrorProc

def PDFNet_Initialize(*args):
    return _PDFNetPython.PDFNet_Initialize(*args)
PDFNet_Initialize = _PDFNetPython.PDFNet_Initialize

def PDFNet_Terminate(*args):
    return _PDFNetPython.PDFNet_Terminate(*args)
PDFNet_Terminate = _PDFNetPython.PDFNet_Terminate

class PDFView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFView, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_PDFView()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PDFView
    __del__ = lambda self: None

    def SetDoc(self, doc):
        return _PDFNetPython.PDFView_SetDoc(self, doc)

    def OpenUniversalDoc(self, conversion):
        return _PDFNetPython.PDFView_OpenUniversalDoc(self, conversion)

    def CloseDoc(self):
        return _PDFNetPython.PDFView_CloseDoc(self)

    def GetDoc(self):
        return _PDFNetPython.PDFView_GetDoc(self)

    def DocLock(self, cancel_threads):
        return _PDFNetPython.PDFView_DocLock(self, cancel_threads)

    def DocUnlock(self):
        return _PDFNetPython.PDFView_DocUnlock(self)

    def DocTryLock(self, milliseconds=0):
        return _PDFNetPython.PDFView_DocTryLock(self, milliseconds)

    def DocLockRead(self):
        return _PDFNetPython.PDFView_DocLockRead(self)

    def DocUnlockRead(self):
        return _PDFNetPython.PDFView_DocUnlockRead(self)

    def DocTryLockRead(self, milliseconds=0):
        return _PDFNetPython.PDFView_DocTryLockRead(self, milliseconds)
    e_single_page = _PDFNetPython.PDFView_e_single_page
    e_single_continuous = _PDFNetPython.PDFView_e_single_continuous
    e_facing = _PDFNetPython.PDFView_e_facing
    e_facing_continuous = _PDFNetPython.PDFView_e_facing_continuous
    e_facing_cover = _PDFNetPython.PDFView_e_facing_cover
    e_facing_continuous_cover = _PDFNetPython.PDFView_e_facing_continuous_cover

    def SetPagePresentationMode(self, mode):
        return _PDFNetPython.PDFView_SetPagePresentationMode(self, mode)

    def GetPagePresentationMode(self):
        return _PDFNetPython.PDFView_GetPagePresentationMode(self)

    def SetColorPostProcessMode(self, mode):
        return _PDFNetPython.PDFView_SetColorPostProcessMode(self, mode)

    def SetColorPostProcessMapFile(self, image_file_contents):
        return _PDFNetPython.PDFView_SetColorPostProcessMapFile(self, image_file_contents)

    def GetPostProcessedColor(self, color):
        return _PDFNetPython.PDFView_GetPostProcessedColor(self, color)

    def SetColorPostProcessColors(self, white_color, black_color):
        return _PDFNetPython.PDFView_SetColorPostProcessColors(self, white_color, black_color)

    def GetColorPostProcessMode(self):
        return _PDFNetPython.PDFView_GetColorPostProcessMode(self)

    def GetCurrentPage(self):
        return _PDFNetPython.PDFView_GetCurrentPage(self)

    def GetPageCount(self):
        return _PDFNetPython.PDFView_GetPageCount(self)

    def GotoFirstPage(self):
        return _PDFNetPython.PDFView_GotoFirstPage(self)

    def GotoLastPage(self):
        return _PDFNetPython.PDFView_GotoLastPage(self)

    def GotoNextPage(self):
        return _PDFNetPython.PDFView_GotoNextPage(self)

    def GotoPreviousPage(self):
        return _PDFNetPython.PDFView_GotoPreviousPage(self)

    def SetCurrentPage(self, page_num):
        return _PDFNetPython.PDFView_SetCurrentPage(self, page_num)

    def ShowRect(self, page_num, rect):
        return _PDFNetPython.PDFView_ShowRect(self, page_num, rect)

    def GetVisiblePages(self):
        return _PDFNetPython.PDFView_GetVisiblePages(self)

    def GetZoom(self):
        return _PDFNetPython.PDFView_GetZoom(self)

    def SetZoom(self, *args):
        return _PDFNetPython.PDFView_SetZoom(self, *args)

    def SmartZoom(self, x, y):
        return _PDFNetPython.PDFView_SmartZoom(self, x, y)

    def RotateClockwise(self):
        return _PDFNetPython.PDFView_RotateClockwise(self)

    def RotateCounterClockwise(self):
        return _PDFNetPython.PDFView_RotateCounterClockwise(self)

    def GetRotation(self):
        return _PDFNetPython.PDFView_GetRotation(self)

    def GetPageNumberFromScreenPt(self, x, y):
        return _PDFNetPython.PDFView_GetPageNumberFromScreenPt(self, x, y)

    def ConvScreenPtToCanvasPt(self, pt):
        return _PDFNetPython.PDFView_ConvScreenPtToCanvasPt(self, pt)

    def ConvCanvasPtToScreenPt(self, pt):
        return _PDFNetPython.PDFView_ConvCanvasPtToScreenPt(self, pt)

    def ConvCanvasPtToPagePt(self, pt, page_num=-1):
        return _PDFNetPython.PDFView_ConvCanvasPtToPagePt(self, pt, page_num)

    def ConvPagePtToCanvasPt(self, pt, page_num=-1):
        return _PDFNetPython.PDFView_ConvPagePtToCanvasPt(self, pt, page_num)

    def ConvScreenPtToPagePt(self, pt, page_num=-1):
        return _PDFNetPython.PDFView_ConvScreenPtToPagePt(self, pt, page_num)

    def ConvPagePtToScreenPt(self, pt, page_num=-1):
        return _PDFNetPython.PDFView_ConvPagePtToScreenPt(self, pt, page_num)

    def SnapToNearestInDoc(self, screen_pt):
        return _PDFNetPython.PDFView_SnapToNearestInDoc(self, screen_pt)

    def SetSnappingMode(self, mode_flags):
        return _PDFNetPython.PDFView_SetSnappingMode(self, mode_flags)

    def GetDeviceTransform(self, page_num=-1):
        return _PDFNetPython.PDFView_GetDeviceTransform(self, page_num)

    def SetErrorReportProc(self, instance):
        return _PDFNetPython.PDFView_SetErrorReportProc(self, instance)

    def SetCurrentPageProc(self, instance):
        return _PDFNetPython.PDFView_SetCurrentPageProc(self, instance)

    def SetJavaScriptEventCallBack(self, instance):
        return _PDFNetPython.PDFView_SetJavaScriptEventCallBack(self, instance)

    def SetCurrentZoomProc(self, instance):
        return _PDFNetPython.PDFView_SetCurrentZoomProc(self, instance)

    def ExecuteAction(self, *args):
        return _PDFNetPython.PDFView_ExecuteAction(self, *args)

    def GetCanvasWidth(self):
        return _PDFNetPython.PDFView_GetCanvasWidth(self)

    def GetCanvasHeight(self):
        return _PDFNetPython.PDFView_GetCanvasHeight(self)

    def GetHScrollPos(self):
        return _PDFNetPython.PDFView_GetHScrollPos(self)

    def GetVScrollPos(self):
        return _PDFNetPython.PDFView_GetVScrollPos(self)

    def OnScroll(self, pix_dx, pix_dy):
        return _PDFNetPython.PDFView_OnScroll(self, pix_dx, pix_dy)

    def SetHScrollPos(self, pos):
        return _PDFNetPython.PDFView_SetHScrollPos(self, pos)

    def SetVScrollPos(self, pos):
        return _PDFNetPython.PDFView_SetVScrollPos(self, pos)

    def OnSize(self, width, height):
        return _PDFNetPython.PDFView_OnSize(self, width, height)

    def IsFinishedRendering(self, visible_region_only):
        return _PDFNetPython.PDFView_IsFinishedRendering(self, visible_region_only)

    def CancelRendering(self):
        return _PDFNetPython.PDFView_CancelRendering(self)

    def Update(self, *args):
        return _PDFNetPython.PDFView_Update(self, *args)

    def UpdatePageLayout(self):
        return _PDFNetPython.PDFView_UpdatePageLayout(self)

    def GetBuffer(self):
        return _PDFNetPython.PDFView_GetBuffer(self)

    def UpdateBuffer(self):
        return _PDFNetPython.PDFView_UpdateBuffer(self)

    def GetBufferWidth(self):
        return _PDFNetPython.PDFView_GetBufferWidth(self)

    def GetBufferHeight(self):
        return _PDFNetPython.PDFView_GetBufferHeight(self)

    def GetBufferStride(self):
        return _PDFNetPython.PDFView_GetBufferStride(self)

    def HideAnnotation(self, annot):
        return _PDFNetPython.PDFView_HideAnnotation(self, annot)

    def ShowAnnotation(self, annot):
        return _PDFNetPython.PDFView_ShowAnnotation(self, annot)

    def SetDrawAnnotations(self, render_annots):
        return _PDFNetPython.PDFView_SetDrawAnnotations(self, render_annots)

    def SetUrlExtraction(self, enabled):
        return _PDFNetPython.PDFView_SetUrlExtraction(self, enabled)

    def GetLinkAt(self, x, y):
        return _PDFNetPython.PDFView_GetLinkAt(self, x, y)

    def SetHighlightFields(self, highlight_fields):
        return _PDFNetPython.PDFView_SetHighlightFields(self, highlight_fields)

    def SetRequiredFieldBorderColor(self, new_border_color):
        return _PDFNetPython.PDFView_SetRequiredFieldBorderColor(self, new_border_color)

    def SetAntiAliasing(self, enable_aa):
        return _PDFNetPython.PDFView_SetAntiAliasing(self, enable_aa)

    def SetPathHinting(self, enable_hinting):
        return _PDFNetPython.PDFView_SetPathHinting(self, enable_hinting)

    def SetThinLineAdjustment(self, pixel_grid_fit, stroke_adjust):
        return _PDFNetPython.PDFView_SetThinLineAdjustment(self, pixel_grid_fit, stroke_adjust)

    def SetImageSmoothing(self, smoothing_enabled=True):
        return _PDFNetPython.PDFView_SetImageSmoothing(self, smoothing_enabled)

    def SetCaching(self, enabled):
        return _PDFNetPython.PDFView_SetCaching(self, enabled)

    def SetRasterizerType(self, type):
        return _PDFNetPython.PDFView_SetRasterizerType(self, type)

    def SetGamma(self, exp):
        return _PDFNetPython.PDFView_SetGamma(self, exp)

    def SetOverprint(self, op):
        return _PDFNetPython.PDFView_SetOverprint(self, op)

    def SetOCGContext(self, ctx):
        return _PDFNetPython.PDFView_SetOCGContext(self, ctx)

    def GetOCGContext(self):
        return _PDFNetPython.PDFView_GetOCGContext(self)

    def UpdateOCGContext(self):
        return _PDFNetPython.PDFView_UpdateOCGContext(self)

    def SetRenderBeginProc(self, instance):
        return _PDFNetPython.PDFView_SetRenderBeginProc(self, instance)

    def SetRenderFinishProc(self, instance):
        return _PDFNetPython.PDFView_SetRenderFinishProc(self, instance)
    e_structural = _PDFNetPython.PDFView_e_structural
    e_rectangular = _PDFNetPython.PDFView_e_rectangular
    e_structural_algorithm_2 = _PDFNetPython.PDFView_e_structural_algorithm_2

    def SetTextSelectionMode(self, tm):
        return _PDFNetPython.PDFView_SetTextSelectionMode(self, tm)

    def SelectWithSnapping(self, *args):
        return _PDFNetPython.PDFView_SelectWithSnapping(self, *args)

    def SelectWithSmartSnapping(self, *args):
        return _PDFNetPython.PDFView_SelectWithSmartSnapping(self, *args)

    def Select(self, *args):
        return _PDFNetPython.PDFView_Select(self, *args)

    def CancelFindText(self):
        return _PDFNetPython.PDFView_CancelFindText(self)

    def SelectAll(self):
        return _PDFNetPython.PDFView_SelectAll(self)

    def HasSelection(self):
        return _PDFNetPython.PDFView_HasSelection(self)

    def ClearSelection(self):
        return _PDFNetPython.PDFView_ClearSelection(self)

    def GetSelection(self, pagenum=-1):
        return _PDFNetPython.PDFView_GetSelection(self, pagenum)

    def GetSelectionBeginPage(self):
        return _PDFNetPython.PDFView_GetSelectionBeginPage(self)

    def GetSelectionEndPage(self):
        return _PDFNetPython.PDFView_GetSelectionEndPage(self)

    def HasSelectionOnPage(self, ipage):
        return _PDFNetPython.PDFView_HasSelectionOnPage(self, ipage)

    def PrepareWords(self, page_num):
        return _PDFNetPython.PDFView_PrepareWords(self, page_num)

    def WereWordsPrepared(self, page_num):
        return _PDFNetPython.PDFView_WereWordsPrepared(self, page_num)

    def IsThereTextInRect(self, x1, y1, x2, y2):
        return _PDFNetPython.PDFView_IsThereTextInRect(self, x1, y1, x2, y2)

    def PrepareAnnotsForMouse(self, page_num, distance_threshold, minimum_line_weight):
        return _PDFNetPython.PDFView_PrepareAnnotsForMouse(self, page_num, distance_threshold, minimum_line_weight)

    def WereAnnotsForMousePrepared(self, page_num):
        return _PDFNetPython.PDFView_WereAnnotsForMousePrepared(self, page_num)

    def GetAnnotTypeUnder(self, x, y):
        return _PDFNetPython.PDFView_GetAnnotTypeUnder(self, x, y)

    def SetPageBorderVisibility(self, border_visible):
        return _PDFNetPython.PDFView_SetPageBorderVisibility(self, border_visible)

    def SetPageTransparencyGrid(self, trans_grid_visible):
        return _PDFNetPython.PDFView_SetPageTransparencyGrid(self, trans_grid_visible)

    def SetDefaultPageColor(self, r, g, b):
        return _PDFNetPython.PDFView_SetDefaultPageColor(self, r, g, b)

    def SetBackgroundColor(self, r, g, b, a=255):
        return _PDFNetPython.PDFView_SetBackgroundColor(self, r, g, b, a)

    def SetHorizontalAlign(self, align):
        return _PDFNetPython.PDFView_SetHorizontalAlign(self, align)

    def SetVerticalAlign(self, align):
        return _PDFNetPython.PDFView_SetVerticalAlign(self, align)

    def SetPageSpacing(self, horiz_col_space, vert_col_space, horiz_pad, vert_pad):
        return _PDFNetPython.PDFView_SetPageSpacing(self, horiz_col_space, vert_col_space, horiz_pad, vert_pad)
    if _newclass:
        SetViewerCache = staticmethod(_PDFNetPython.PDFView_SetViewerCache)
    else:
        SetViewerCache = _PDFNetPython.PDFView_SetViewerCache

    def Destroy(self):
        return _PDFNetPython.PDFView_Destroy(self)

    def SetDevicePixelDensity(self, dpi, scale_factor):
        return _PDFNetPython.PDFView_SetDevicePixelDensity(self, dpi, scale_factor)

    def GetScreenRectForAnnot(self, annot, page_num=-1):
        return _PDFNetPython.PDFView_GetScreenRectForAnnot(self, annot, page_num)

    def GetAnnotationAt(self, x, y, distanceThreshold, minimumLineWeight):
        return _PDFNetPython.PDFView_GetAnnotationAt(self, x, y, distanceThreshold, minimumLineWeight)
    e_fit_page = _PDFNetPython.PDFView_e_fit_page
    e_fit_width = _PDFNetPython.PDFView_e_fit_width
    e_fit_height = _PDFNetPython.PDFView_e_fit_height
    e_zoom = _PDFNetPython.PDFView_e_zoom
    PVM_SIZE = _PDFNetPython.PDFView_PVM_SIZE

    def SetPageViewMode(self, mode):
        return _PDFNetPython.PDFView_SetPageViewMode(self, mode)

    def GetPageViewMode(self):
        return _PDFNetPython.PDFView_GetPageViewMode(self)

    def RefreshAndUpdate(self, view_change):
        return _PDFNetPython.PDFView_RefreshAndUpdate(self, view_change)

    def SetPageRefViewMode(self, mode):
        return _PDFNetPython.PDFView_SetPageRefViewMode(self, mode)

    def GetPageRefViewMode(self):
        return _PDFNetPython.PDFView_GetPageRefViewMode(self)

    def SetupThumbnails(self, use_embedded, generate_at_runtime, use_disk_cache, thumb_max_side_length, max_abs_cache_size, max_perc_cache_size):
        return _PDFNetPython.PDFView_SetupThumbnails(self, use_embedded, generate_at_runtime, use_disk_cache, thumb_max_side_length, max_abs_cache_size, max_perc_cache_size)

    def ClearThumbCache(self):
        return _PDFNetPython.PDFView_ClearThumbCache(self)

    def GetThumbAsync(self, page_num, instance):
        return _PDFNetPython.PDFView_GetThumbAsync(self, page_num, instance)

    def GetThumbInCacheSize(self, page_num):
        return _PDFNetPython.PDFView_GetThumbInCacheSize(self, page_num)

    def GetThumbInCache(self, page_num, buf, out_width, out_height):
        return _PDFNetPython.PDFView_GetThumbInCache(self, page_num, buf, out_width, out_height)

    def CancelAllThumbRequests(self):
        return _PDFNetPython.PDFView_CancelAllThumbRequests(self)

    def SetRequestRenderInWorkerThreadProc(self, instance):
        return _PDFNetPython.PDFView_SetRequestRenderInWorkerThreadProc(self, instance)

    def SetFindTextHandler(self, instance):
        return _PDFNetPython.PDFView_SetFindTextHandler(self, instance)

    def FindTextAsync(self, search_str, match_case, match_whole_word, search_up, reg_exp):
        return _PDFNetPython.PDFView_FindTextAsync(self, search_str, match_case, match_whole_word, search_up, reg_exp)

    def GetAnnotationsOnPage(self, page_num):
        return _PDFNetPython.PDFView_GetAnnotationsOnPage(self, page_num)

    def GetAnnotationListAt(self, x1, y1, x2, y2):
        return _PDFNetPython.PDFView_GetAnnotationListAt(self, x1, y1, x2, y2)

    def EnableUndoRedo(self):
        return _PDFNetPython.PDFView_EnableUndoRedo(self)

    def Undo(self):
        return _PDFNetPython.PDFView_Undo(self)

    def Redo(self):
        return _PDFNetPython.PDFView_Redo(self)

    def TakeSnapshot(self, meta_info):
        return _PDFNetPython.PDFView_TakeSnapshot(self, meta_info)

    def GetNextUndoInfo(self):
        return _PDFNetPython.PDFView_GetNextUndoInfo(self)

    def GetNextRedoInfo(self):
        return _PDFNetPython.PDFView_GetNextRedoInfo(self)

    def CanUndo(self):
        return _PDFNetPython.PDFView_CanUndo(self)

    def CanRedo(self):
        return _PDFNetPython.PDFView_CanRedo(self)

    def RevertAllChanges(self):
        return _PDFNetPython.PDFView_RevertAllChanges(self)

    def GetExternalAnnotManager(self, *args):
        return _PDFNetPython.PDFView_GetExternalAnnotManager(self, *args)
PDFView_swigregister = _PDFNetPython.PDFView_swigregister
PDFView_swigregister(PDFView)

def PDFView_SetViewerCache(document, max_cache_size, on_disk):
    return _PDFNetPython.PDFView_SetViewerCache(document, max_cache_size, on_disk)
PDFView_SetViewerCache = _PDFNetPython.PDFView_SetViewerCache

class Print(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Print, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Print, name)
    __repr__ = _swig_repr
    if _newclass:
        StartPrintJob = staticmethod(_PDFNetPython.Print_StartPrintJob)
    else:
        StartPrintJob = _PDFNetPython.Print_StartPrintJob

    def __init__(self):
        this = _PDFNetPython.new_Print()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Print
    __del__ = lambda self: None
Print_swigregister = _PDFNetPython.Print_swigregister
Print_swigregister(Print)

def Print_StartPrintJob(*args):
    return _PDFNetPython.Print_StartPrintJob(*args)
Print_StartPrintJob = _PDFNetPython.Print_StartPrintJob

class PrinterMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrinterMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrinterMode, name)
    __repr__ = _swig_repr
    e_custom = _PDFNetPython.PrinterMode_e_custom
    e_letter = _PDFNetPython.PrinterMode_e_letter
    e_letter_small = _PDFNetPython.PrinterMode_e_letter_small
    e_tabloid = _PDFNetPython.PrinterMode_e_tabloid
    e_ledger = _PDFNetPython.PrinterMode_e_ledger
    e_legal = _PDFNetPython.PrinterMode_e_legal
    e_statement = _PDFNetPython.PrinterMode_e_statement
    e_executive = _PDFNetPython.PrinterMode_e_executive
    e_a3 = _PDFNetPython.PrinterMode_e_a3
    e_a4 = _PDFNetPython.PrinterMode_e_a4
    e_a4_small = _PDFNetPython.PrinterMode_e_a4_small
    e_a5 = _PDFNetPython.PrinterMode_e_a5
    e_b4_jis = _PDFNetPython.PrinterMode_e_b4_jis
    e_b5_jis = _PDFNetPython.PrinterMode_e_b5_jis
    e_folio = _PDFNetPython.PrinterMode_e_folio
    e_quarto = _PDFNetPython.PrinterMode_e_quarto
    e_10x14 = _PDFNetPython.PrinterMode_e_10x14
    e_11x17 = _PDFNetPython.PrinterMode_e_11x17
    e_note = _PDFNetPython.PrinterMode_e_note
    e_envelope_9 = _PDFNetPython.PrinterMode_e_envelope_9
    e_envelope_10 = _PDFNetPython.PrinterMode_e_envelope_10
    e_envelope_11 = _PDFNetPython.PrinterMode_e_envelope_11
    e_envelope_12 = _PDFNetPython.PrinterMode_e_envelope_12
    e_envelope_14 = _PDFNetPython.PrinterMode_e_envelope_14
    e_c_size_sheet = _PDFNetPython.PrinterMode_e_c_size_sheet
    e_d_size_sheet = _PDFNetPython.PrinterMode_e_d_size_sheet
    e_e_size_sheet = _PDFNetPython.PrinterMode_e_e_size_sheet
    e_envelope_dl = _PDFNetPython.PrinterMode_e_envelope_dl
    e_envelope_c5 = _PDFNetPython.PrinterMode_e_envelope_c5
    e_envelope_c3 = _PDFNetPython.PrinterMode_e_envelope_c3
    e_envelope_c4 = _PDFNetPython.PrinterMode_e_envelope_c4
    e_envelope_c6 = _PDFNetPython.PrinterMode_e_envelope_c6
    e_envelope_c65 = _PDFNetPython.PrinterMode_e_envelope_c65
    e_envelope_b4 = _PDFNetPython.PrinterMode_e_envelope_b4
    e_envelope_b5 = _PDFNetPython.PrinterMode_e_envelope_b5
    e_envelope_b6 = _PDFNetPython.PrinterMode_e_envelope_b6
    e_envelope_italy = _PDFNetPython.PrinterMode_e_envelope_italy
    e_envelope_monarch = _PDFNetPython.PrinterMode_e_envelope_monarch
    e_6_3_quarters_envelope = _PDFNetPython.PrinterMode_e_6_3_quarters_envelope
    e_us_std_fanfold = _PDFNetPython.PrinterMode_e_us_std_fanfold
    e_german_std_fanfold = _PDFNetPython.PrinterMode_e_german_std_fanfold
    e_german_legal_fanfold = _PDFNetPython.PrinterMode_e_german_legal_fanfold
    e_b4_iso = _PDFNetPython.PrinterMode_e_b4_iso
    e_japanese_postcard = _PDFNetPython.PrinterMode_e_japanese_postcard
    e_9x11 = _PDFNetPython.PrinterMode_e_9x11
    e_10x11 = _PDFNetPython.PrinterMode_e_10x11
    e_15x11 = _PDFNetPython.PrinterMode_e_15x11
    e_envelope_invite = _PDFNetPython.PrinterMode_e_envelope_invite
    e_reserved_48 = _PDFNetPython.PrinterMode_e_reserved_48
    e_reserved_49 = _PDFNetPython.PrinterMode_e_reserved_49
    e_letter_extra = _PDFNetPython.PrinterMode_e_letter_extra
    e_legal_extra = _PDFNetPython.PrinterMode_e_legal_extra
    e_tabloid_extra = _PDFNetPython.PrinterMode_e_tabloid_extra
    e_a4_extra = _PDFNetPython.PrinterMode_e_a4_extra
    e_letter_transverse = _PDFNetPython.PrinterMode_e_letter_transverse
    e_a4_transverse = _PDFNetPython.PrinterMode_e_a4_transverse
    e_letter_extra_transverse = _PDFNetPython.PrinterMode_e_letter_extra_transverse
    e_supera_supera_a4 = _PDFNetPython.PrinterMode_e_supera_supera_a4
    e_Superb_Superb_a3 = _PDFNetPython.PrinterMode_e_Superb_Superb_a3
    e_letter_plus = _PDFNetPython.PrinterMode_e_letter_plus
    e_a4_plus = _PDFNetPython.PrinterMode_e_a4_plus
    e_a5_transverse = _PDFNetPython.PrinterMode_e_a5_transverse
    e_b5_jis_transverse = _PDFNetPython.PrinterMode_e_b5_jis_transverse
    e_a3_extra = _PDFNetPython.PrinterMode_e_a3_extra
    e_a5_extra = _PDFNetPython.PrinterMode_e_a5_extra
    e_b5_iso_extra = _PDFNetPython.PrinterMode_e_b5_iso_extra
    e_a2 = _PDFNetPython.PrinterMode_e_a2
    e_a3_transverse = _PDFNetPython.PrinterMode_e_a3_transverse
    e_a3_extra_transverse = _PDFNetPython.PrinterMode_e_a3_extra_transverse
    e_japanese_double_postcard = _PDFNetPython.PrinterMode_e_japanese_double_postcard
    e_a6 = _PDFNetPython.PrinterMode_e_a6
    e_japanese_envelope_kaku_2 = _PDFNetPython.PrinterMode_e_japanese_envelope_kaku_2
    e_japanese_envelope_kaku_3 = _PDFNetPython.PrinterMode_e_japanese_envelope_kaku_3
    e_japanese_envelope_chou_3 = _PDFNetPython.PrinterMode_e_japanese_envelope_chou_3
    e_japanese_envelope_chou_4 = _PDFNetPython.PrinterMode_e_japanese_envelope_chou_4
    e_letter_rotated = _PDFNetPython.PrinterMode_e_letter_rotated
    e_a3_rotated = _PDFNetPython.PrinterMode_e_a3_rotated
    e_a4_rotated = _PDFNetPython.PrinterMode_e_a4_rotated
    e_a5_rotated = _PDFNetPython.PrinterMode_e_a5_rotated
    e_b4_jis_rotated = _PDFNetPython.PrinterMode_e_b4_jis_rotated
    e_b5_jis_rotated = _PDFNetPython.PrinterMode_e_b5_jis_rotated
    e_japanese_postcard_rotated = _PDFNetPython.PrinterMode_e_japanese_postcard_rotated
    e_double_japanese_postcard_rotated = _PDFNetPython.PrinterMode_e_double_japanese_postcard_rotated
    e_a6_rotated = _PDFNetPython.PrinterMode_e_a6_rotated
    e_japanese_envelope_kaku_2_rotated = _PDFNetPython.PrinterMode_e_japanese_envelope_kaku_2_rotated
    e_japanese_envelope_kaku_3_rotated = _PDFNetPython.PrinterMode_e_japanese_envelope_kaku_3_rotated
    e_japanese_envelope_chou_3_rotated = _PDFNetPython.PrinterMode_e_japanese_envelope_chou_3_rotated
    e_japanese_envelope_chou_4_rotated = _PDFNetPython.PrinterMode_e_japanese_envelope_chou_4_rotated
    e_b6_jis = _PDFNetPython.PrinterMode_e_b6_jis
    e_b6_jis_rotated = _PDFNetPython.PrinterMode_e_b6_jis_rotated
    e_12x11 = _PDFNetPython.PrinterMode_e_12x11
    e_japanese_envelope_you_4 = _PDFNetPython.PrinterMode_e_japanese_envelope_you_4
    e_japanese_envelope_you_4_rotated = _PDFNetPython.PrinterMode_e_japanese_envelope_you_4_rotated
    e_prc_16k = _PDFNetPython.PrinterMode_e_prc_16k
    e_prc_32k = _PDFNetPython.PrinterMode_e_prc_32k
    e_prc_32k_big = _PDFNetPython.PrinterMode_e_prc_32k_big
    e_prc_envelop_1 = _PDFNetPython.PrinterMode_e_prc_envelop_1
    e_prc_envelop_2 = _PDFNetPython.PrinterMode_e_prc_envelop_2
    e_prc_envelop_3 = _PDFNetPython.PrinterMode_e_prc_envelop_3
    e_prc_envelop_4 = _PDFNetPython.PrinterMode_e_prc_envelop_4
    e_prc_envelop_5 = _PDFNetPython.PrinterMode_e_prc_envelop_5
    e_prc_envelop_6 = _PDFNetPython.PrinterMode_e_prc_envelop_6
    e_prc_envelop_7 = _PDFNetPython.PrinterMode_e_prc_envelop_7
    e_prc_envelop_8 = _PDFNetPython.PrinterMode_e_prc_envelop_8
    e_prc_envelop_9 = _PDFNetPython.PrinterMode_e_prc_envelop_9
    e_prc_envelop_10 = _PDFNetPython.PrinterMode_e_prc_envelop_10
    e_prc_16k_rotated = _PDFNetPython.PrinterMode_e_prc_16k_rotated
    e_prc_32k_rotated = _PDFNetPython.PrinterMode_e_prc_32k_rotated
    e_prc_32k_big__rotated = _PDFNetPython.PrinterMode_e_prc_32k_big__rotated
    e_prc_envelop_1_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_1_rotated
    e_prc_envelop_2_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_2_rotated
    e_prc_envelop_3_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_3_rotated
    e_prc_envelop_4_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_4_rotated
    e_prc_envelop_5_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_5_rotated
    e_prc_envelop_6_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_6_rotated
    e_prc_envelop_7_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_7_rotated
    e_prc_envelop_8_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_8_rotated
    e_prc_envelop_9_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_9_rotated
    e_prc_envelop_10_rotated = _PDFNetPython.PrinterMode_e_prc_envelop_10_rotated
    e_Duplex_Auto = _PDFNetPython.PrinterMode_e_Duplex_Auto
    e_Duplex_None = _PDFNetPython.PrinterMode_e_Duplex_None
    e_Duplex_LongSide = _PDFNetPython.PrinterMode_e_Duplex_LongSide
    e_Duplex_ShortSide = _PDFNetPython.PrinterMode_e_Duplex_ShortSide
    e_OutputQuality_Draft = _PDFNetPython.PrinterMode_e_OutputQuality_Draft
    e_OutputQuality_Low = _PDFNetPython.PrinterMode_e_OutputQuality_Low
    e_OutputQuality_Medium = _PDFNetPython.PrinterMode_e_OutputQuality_Medium
    e_OutputQuality_High = _PDFNetPython.PrinterMode_e_OutputQuality_High
    e_OutputColor_Color = _PDFNetPython.PrinterMode_e_OutputColor_Color
    e_OutputColor_Grayscale = _PDFNetPython.PrinterMode_e_OutputColor_Grayscale
    e_OutputColor_Monochrome = _PDFNetPython.PrinterMode_e_OutputColor_Monochrome
    e_Orientation_Portrait = _PDFNetPython.PrinterMode_e_Orientation_Portrait
    e_Orientation_Landscape = _PDFNetPython.PrinterMode_e_Orientation_Landscape
    e_ScaleType_None = _PDFNetPython.PrinterMode_e_ScaleType_None
    e_ScaleType_FitToOutputPage = _PDFNetPython.PrinterMode_e_ScaleType_FitToOutputPage
    e_ScaleType_ReduceToOutputPage = _PDFNetPython.PrinterMode_e_ScaleType_ReduceToOutputPage
    e_NUp_1_1 = _PDFNetPython.PrinterMode_e_NUp_1_1
    e_NUp_2_1 = _PDFNetPython.PrinterMode_e_NUp_2_1
    e_NUp_2_2 = _PDFNetPython.PrinterMode_e_NUp_2_2
    e_NUp_3_2 = _PDFNetPython.PrinterMode_e_NUp_3_2
    e_NUp_3_3 = _PDFNetPython.PrinterMode_e_NUp_3_3
    e_NUp_4_4 = _PDFNetPython.PrinterMode_e_NUp_4_4
    e_PageOrder_LeftToRightThenTopToBottom = _PDFNetPython.PrinterMode_e_PageOrder_LeftToRightThenTopToBottom
    e_PageOrder_RightToLeftThenTopToBottom = _PDFNetPython.PrinterMode_e_PageOrder_RightToLeftThenTopToBottom
    e_PageOrder_TopToBottomThenLeftToRight = _PDFNetPython.PrinterMode_e_PageOrder_TopToBottomThenLeftToRight
    e_PageOrder_BottomToTopThenLeftToRight = _PDFNetPython.PrinterMode_e_PageOrder_BottomToTopThenLeftToRight
    e_PrintContent_DocumentOnly = _PDFNetPython.PrinterMode_e_PrintContent_DocumentOnly
    e_PrintContent_DocumentAndAnnotations = _PDFNetPython.PrinterMode_e_PrintContent_DocumentAndAnnotations
    e_PrintContent_DocumentAnnotationsAndComments = _PDFNetPython.PrinterMode_e_PrintContent_DocumentAnnotationsAndComments

    def __init__(self):
        this = _PDFNetPython.new_PrinterMode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_PrinterMode
    __del__ = lambda self: None

    def SetAutoCenter(self, autoCenter):
        return _PDFNetPython.PrinterMode_SetAutoCenter(self, autoCenter)

    def SetAutoRotate(self, autoRotate):
        return _PDFNetPython.PrinterMode_SetAutoRotate(self, autoRotate)

    def SetCollation(self, collation):
        return _PDFNetPython.PrinterMode_SetCollation(self, collation)

    def SetCopyCount(self, copyCount):
        return _PDFNetPython.PrinterMode_SetCopyCount(self, copyCount)

    def SetDPI(self, dpi):
        return _PDFNetPython.PrinterMode_SetDPI(self, dpi)

    def SetDuplexing(self, mode):
        return _PDFNetPython.PrinterMode_SetDuplexing(self, mode)

    def SetNUp(self, *args):
        return _PDFNetPython.PrinterMode_SetNUp(self, *args)

    def SetOrientation(self, orientation):
        return _PDFNetPython.PrinterMode_SetOrientation(self, orientation)

    def SetOutputAnnot(self, printContent):
        return _PDFNetPython.PrinterMode_SetOutputAnnot(self, printContent)

    def SetOutputColor(self, color):
        return _PDFNetPython.PrinterMode_SetOutputColor(self, color)

    def SetOutputQuality(self, quality):
        return _PDFNetPython.PrinterMode_SetOutputQuality(self, quality)

    def SetOutputPageBorder(self, printBorder):
        return _PDFNetPython.PrinterMode_SetOutputPageBorder(self, printBorder)

    def SetPaperSize(self, *args):
        return _PDFNetPython.PrinterMode_SetPaperSize(self, *args)

    def SetScale(self, scale):
        return _PDFNetPython.PrinterMode_SetScale(self, scale)

    def SetScaleType(self, scaleType):
        return _PDFNetPython.PrinterMode_SetScaleType(self, scaleType)

    def SetUseRleImageCompression(self, useRleImageCompression):
        return _PDFNetPython.PrinterMode_SetUseRleImageCompression(self, useRleImageCompression)
    __swig_setmethods__["m_printerMode"] = _PDFNetPython.PrinterMode_m_printerMode_set
    __swig_getmethods__["m_printerMode"] = _PDFNetPython.PrinterMode_m_printerMode_get
    if _newclass:
        m_printerMode = _swig_property(_PDFNetPython.PrinterMode_m_printerMode_get, _PDFNetPython.PrinterMode_m_printerMode_set)
PrinterMode_swigregister = _PDFNetPython.PrinterMode_swigregister
PrinterMode_swigregister(PrinterMode)

class HTML2PDF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTML2PDF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTML2PDF, name)
    __repr__ = _swig_repr

    def InsertFromURL(self, *args):
        return _PDFNetPython.HTML2PDF_InsertFromURL(self, *args)

    def InsertFromHtmlString(self, *args):
        return _PDFNetPython.HTML2PDF_InsertFromHtmlString(self, *args)

    def InsertTOC(self, *args):
        return _PDFNetPython.HTML2PDF_InsertTOC(self, *args)

    def Convert(self, doc):
        return _PDFNetPython.HTML2PDF_Convert(self, doc)

    def GetHTTPErrorCode(self):
        return _PDFNetPython.HTML2PDF_GetHTTPErrorCode(self)

    def SetQuiet(self, quiet):
        return _PDFNetPython.HTML2PDF_SetQuiet(self, quiet)

    def GetLog(self):
        return _PDFNetPython.HTML2PDF_GetLog(self)
    if _newclass:
        SetModulePath = staticmethod(_PDFNetPython.HTML2PDF_SetModulePath)
    else:
        SetModulePath = _PDFNetPython.HTML2PDF_SetModulePath
    if _newclass:
        IsModuleAvailable = staticmethod(_PDFNetPython.HTML2PDF_IsModuleAvailable)
    else:
        IsModuleAvailable = _PDFNetPython.HTML2PDF_IsModuleAvailable

    def __init__(self):
        this = _PDFNetPython.new_HTML2PDF()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_HTML2PDF
    __del__ = lambda self: None

    def SetPaperSize(self, *args):
        return _PDFNetPython.HTML2PDF_SetPaperSize(self, *args)

    def SetLandscape(self, enable):
        return _PDFNetPython.HTML2PDF_SetLandscape(self, enable)

    def SetDPI(self, dpi):
        return _PDFNetPython.HTML2PDF_SetDPI(self, dpi)

    def SetOutline(self, enable, depth=4):
        return _PDFNetPython.HTML2PDF_SetOutline(self, enable, depth)

    def DumpOutline(self, xml_file):
        return _PDFNetPython.HTML2PDF_DumpOutline(self, xml_file)

    def SetPDFCompression(self, enable):
        return _PDFNetPython.HTML2PDF_SetPDFCompression(self, enable)

    def SetMargins(self, top, bottom, left, right):
        return _PDFNetPython.HTML2PDF_SetMargins(self, top, bottom, left, right)

    def SetHeader(self, header):
        return _PDFNetPython.HTML2PDF_SetHeader(self, header)

    def SetFooter(self, footer):
        return _PDFNetPython.HTML2PDF_SetFooter(self, footer)

    def SetImageDPI(self, dpi):
        return _PDFNetPython.HTML2PDF_SetImageDPI(self, dpi)

    def SetImageQuality(self, quality):
        return _PDFNetPython.HTML2PDF_SetImageQuality(self, quality)

    def SetCookieJar(self, path):
        return _PDFNetPython.HTML2PDF_SetCookieJar(self, path)

    def AddCookie(self, name, value):
        return _PDFNetPython.HTML2PDF_AddCookie(self, name, value)

    def Destroy(self):
        return _PDFNetPython.HTML2PDF_Destroy(self)
    __swig_setmethods__["mp_html2pdf"] = _PDFNetPython.HTML2PDF_mp_html2pdf_set
    __swig_getmethods__["mp_html2pdf"] = _PDFNetPython.HTML2PDF_mp_html2pdf_get
    if _newclass:
        mp_html2pdf = _swig_property(_PDFNetPython.HTML2PDF_mp_html2pdf_get, _PDFNetPython.HTML2PDF_mp_html2pdf_set)
HTML2PDF_swigregister = _PDFNetPython.HTML2PDF_swigregister
HTML2PDF_swigregister(HTML2PDF)

def HTML2PDF_SetModulePath(path):
    return _PDFNetPython.HTML2PDF_SetModulePath(path)
HTML2PDF_SetModulePath = _PDFNetPython.HTML2PDF_SetModulePath

def HTML2PDF_IsModuleAvailable():
    return _PDFNetPython.HTML2PDF_IsModuleAvailable()
HTML2PDF_IsModuleAvailable = _PDFNetPython.HTML2PDF_IsModuleAvailable

class Proxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Proxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Proxy, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_Proxy()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Proxy
    __del__ = lambda self: None
    e_default = _PDFNetPython.Proxy_e_default
    e_none = _PDFNetPython.Proxy_e_none
    e_http = _PDFNetPython.Proxy_e_http
    e_socks5 = _PDFNetPython.Proxy_e_socks5

    def SetType(self, type):
        return _PDFNetPython.Proxy_SetType(self, type)

    def SetHost(self, host):
        return _PDFNetPython.Proxy_SetHost(self, host)

    def SetPort(self, port):
        return _PDFNetPython.Proxy_SetPort(self, port)

    def SetUsername(self, username):
        return _PDFNetPython.Proxy_SetUsername(self, username)

    def SetPassword(self, password):
        return _PDFNetPython.Proxy_SetPassword(self, password)

    def Destroy(self):
        return _PDFNetPython.Proxy_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython.Proxy_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.Proxy_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.Proxy_mp_impl_get, _PDFNetPython.Proxy_mp_impl_set)
Proxy_swigregister = _PDFNetPython.Proxy_swigregister
Proxy_swigregister(Proxy)

class WebPageSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WebPageSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WebPageSettings, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_WebPageSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_WebPageSettings
    __del__ = lambda self: None

    def SetPrintBackground(self, background):
        return _PDFNetPython.WebPageSettings_SetPrintBackground(self, background)

    def SetLoadImages(self, load):
        return _PDFNetPython.WebPageSettings_SetLoadImages(self, load)

    def SetAllowJavaScript(self, enable):
        return _PDFNetPython.WebPageSettings_SetAllowJavaScript(self, enable)

    def SetSmartShrinking(self, enable):
        return _PDFNetPython.WebPageSettings_SetSmartShrinking(self, enable)

    def SetMinimumFontSize(self, size):
        return _PDFNetPython.WebPageSettings_SetMinimumFontSize(self, size)

    def SetDefaultEncoding(self, encoding):
        return _PDFNetPython.WebPageSettings_SetDefaultEncoding(self, encoding)

    def SetUserStyleSheet(self, url):
        return _PDFNetPython.WebPageSettings_SetUserStyleSheet(self, url)

    def SetAllowPlugins(self, enable):
        return _PDFNetPython.WebPageSettings_SetAllowPlugins(self, enable)

    def SetPrintMediaType(self, arg2):
        return _PDFNetPython.WebPageSettings_SetPrintMediaType(self, arg2)

    def SetIncludeInOutline(self, include):
        return _PDFNetPython.WebPageSettings_SetIncludeInOutline(self, include)

    def SetUsername(self, username):
        return _PDFNetPython.WebPageSettings_SetUsername(self, username)

    def SetPassword(self, password):
        return _PDFNetPython.WebPageSettings_SetPassword(self, password)

    def SetJavaScriptDelay(self, msec):
        return _PDFNetPython.WebPageSettings_SetJavaScriptDelay(self, msec)

    def SetTimeout(self, msec):
        return _PDFNetPython.WebPageSettings_SetTimeout(self, msec)

    def SetZoom(self, zoom):
        return _PDFNetPython.WebPageSettings_SetZoom(self, zoom)

    def SetBlockLocalFileAccess(self, block):
        return _PDFNetPython.WebPageSettings_SetBlockLocalFileAccess(self, block)

    def SetStopSlowScripts(self, stop):
        return _PDFNetPython.WebPageSettings_SetStopSlowScripts(self, stop)

    def SetDebugJavaScriptOutput(self, forward):
        return _PDFNetPython.WebPageSettings_SetDebugJavaScriptOutput(self, forward)
    e_abort = _PDFNetPython.WebPageSettings_e_abort
    e_skip = _PDFNetPython.WebPageSettings_e_skip
    e_ignore = _PDFNetPython.WebPageSettings_e_ignore

    def SetLoadErrorHandling(self, type):
        return _PDFNetPython.WebPageSettings_SetLoadErrorHandling(self, type)

    def SetExternalLinks(self, convert):
        return _PDFNetPython.WebPageSettings_SetExternalLinks(self, convert)

    def SetInternalLinks(self, convert):
        return _PDFNetPython.WebPageSettings_SetInternalLinks(self, convert)

    def SetProduceForms(self, forms):
        return _PDFNetPython.WebPageSettings_SetProduceForms(self, forms)

    def SetProxy(self, proxy):
        return _PDFNetPython.WebPageSettings_SetProxy(self, proxy)

    def Destroy(self):
        return _PDFNetPython.WebPageSettings_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython.WebPageSettings_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.WebPageSettings_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.WebPageSettings_mp_impl_get, _PDFNetPython.WebPageSettings_mp_impl_set)
WebPageSettings_swigregister = _PDFNetPython.WebPageSettings_swigregister
WebPageSettings_swigregister(WebPageSettings)

class TOCSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOCSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TOCSettings, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_TOCSettings()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TOCSettings
    __del__ = lambda self: None

    def SetDottedLines(self, enable):
        return _PDFNetPython.TOCSettings_SetDottedLines(self, enable)

    def SetLinks(self, enable):
        return _PDFNetPython.TOCSettings_SetLinks(self, enable)

    def SetCaptionText(self, caption):
        return _PDFNetPython.TOCSettings_SetCaptionText(self, caption)

    def SetLevelIndentation(self, indentation):
        return _PDFNetPython.TOCSettings_SetLevelIndentation(self, indentation)

    def SetTextSizeShrink(self, shrink):
        return _PDFNetPython.TOCSettings_SetTextSizeShrink(self, shrink)

    def SetXsl(self, style_sheet):
        return _PDFNetPython.TOCSettings_SetXsl(self, style_sheet)

    def Destroy(self):
        return _PDFNetPython.TOCSettings_Destroy(self)
    __swig_setmethods__["mp_impl"] = _PDFNetPython.TOCSettings_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.TOCSettings_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.TOCSettings_mp_impl_get, _PDFNetPython.TOCSettings_mp_impl_set)
TOCSettings_swigregister = _PDFNetPython.TOCSettings_swigregister
TOCSettings_swigregister(TOCSettings)

class Stamper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stamper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stamper, name)
    __repr__ = _swig_repr
    e_relative_scale = _PDFNetPython.Stamper_e_relative_scale
    e_absolute_size = _PDFNetPython.Stamper_e_absolute_size
    e_font_size = _PDFNetPython.Stamper_e_font_size
    e_horizontal_left = _PDFNetPython.Stamper_e_horizontal_left
    e_horizontal_center = _PDFNetPython.Stamper_e_horizontal_center
    e_horizontal_right = _PDFNetPython.Stamper_e_horizontal_right
    e_vertical_bottom = _PDFNetPython.Stamper_e_vertical_bottom
    e_vertical_center = _PDFNetPython.Stamper_e_vertical_center
    e_vertical_top = _PDFNetPython.Stamper_e_vertical_top
    e_align_left = _PDFNetPython.Stamper_e_align_left
    e_align_center = _PDFNetPython.Stamper_e_align_center
    e_align_right = _PDFNetPython.Stamper_e_align_right
    __swig_destroy__ = _PDFNetPython.delete_Stamper
    __del__ = lambda self: None

    def StampImage(self, dest_doc, src_img, dest_pages):
        return _PDFNetPython.Stamper_StampImage(self, dest_doc, src_img, dest_pages)

    def StampPage(self, dest_doc, src_page, dest_pages):
        return _PDFNetPython.Stamper_StampPage(self, dest_doc, src_page, dest_pages)

    def StampText(self, dest_doc, src_txt, dest_pages):
        return _PDFNetPython.Stamper_StampText(self, dest_doc, src_txt, dest_pages)

    def SetFont(self, font):
        return _PDFNetPython.Stamper_SetFont(self, font)

    def SetFontColor(self, color):
        return _PDFNetPython.Stamper_SetFontColor(self, color)

    def SetOpacity(self, opacity):
        return _PDFNetPython.Stamper_SetOpacity(self, opacity)

    def SetRotation(self, rotation):
        return _PDFNetPython.Stamper_SetRotation(self, rotation)

    def SetAsBackground(self, background):
        return _PDFNetPython.Stamper_SetAsBackground(self, background)

    def SetAsAnnotation(self, annotation):
        return _PDFNetPython.Stamper_SetAsAnnotation(self, annotation)

    def ShowsOnScreen(self, on_screen):
        return _PDFNetPython.Stamper_ShowsOnScreen(self, on_screen)

    def ShowsOnPrint(self, on_print):
        return _PDFNetPython.Stamper_ShowsOnPrint(self, on_print)

    def SetPosition(self, horizontal_distance, vertical_distance, use_percentage=False):
        return _PDFNetPython.Stamper_SetPosition(self, horizontal_distance, vertical_distance, use_percentage)

    def SetAlignment(self, horizontal_alignment, vertical_alignment):
        return _PDFNetPython.Stamper_SetAlignment(self, horizontal_alignment, vertical_alignment)

    def SetTextAlignment(self, text_alignment):
        return _PDFNetPython.Stamper_SetTextAlignment(self, text_alignment)

    def SetSize(self, size_type, a, b):
        return _PDFNetPython.Stamper_SetSize(self, size_type, a, b)
    if _newclass:
        DeleteStamps = staticmethod(_PDFNetPython.Stamper_DeleteStamps)
    else:
        DeleteStamps = _PDFNetPython.Stamper_DeleteStamps
    if _newclass:
        HasStamps = staticmethod(_PDFNetPython.Stamper_HasStamps)
    else:
        HasStamps = _PDFNetPython.Stamper_HasStamps

    def Destroy(self):
        return _PDFNetPython.Stamper_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Stamper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_impl"] = _PDFNetPython.Stamper_mp_impl_set
    __swig_getmethods__["mp_impl"] = _PDFNetPython.Stamper_mp_impl_get
    if _newclass:
        mp_impl = _swig_property(_PDFNetPython.Stamper_mp_impl_get, _PDFNetPython.Stamper_mp_impl_set)
Stamper_swigregister = _PDFNetPython.Stamper_swigregister
Stamper_swigregister(Stamper)

def Stamper_DeleteStamps(doc, page_set):
    return _PDFNetPython.Stamper_DeleteStamps(doc, page_set)
Stamper_DeleteStamps = _PDFNetPython.Stamper_DeleteStamps

def Stamper_HasStamps(doc, page_set):
    return _PDFNetPython.Stamper_HasStamps(doc, page_set)
Stamper_HasStamps = _PDFNetPython.Stamper_HasStamps

class CharRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharRange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _PDFNetPython.CharRange_index_set
    __swig_getmethods__["index"] = _PDFNetPython.CharRange_index_get
    if _newclass:
        index = _swig_property(_PDFNetPython.CharRange_index_get, _PDFNetPython.CharRange_index_set)
    __swig_setmethods__["length"] = _PDFNetPython.CharRange_length_set
    __swig_getmethods__["length"] = _PDFNetPython.CharRange_length_get
    if _newclass:
        length = _swig_property(_PDFNetPython.CharRange_length_get, _PDFNetPython.CharRange_length_set)

    def __init__(self):
        this = _PDFNetPython.new_CharRange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_CharRange
    __del__ = lambda self: None
CharRange_swigregister = _PDFNetPython.CharRange_swigregister
CharRange_swigregister(CharRange)

class TextExtractor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextExtractor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextExtractor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_TextExtractor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TextExtractor
    __del__ = lambda self: None
    e_no_ligature_exp = _PDFNetPython.TextExtractor_e_no_ligature_exp
    e_no_dup_remove = _PDFNetPython.TextExtractor_e_no_dup_remove
    e_punct_break = _PDFNetPython.TextExtractor_e_punct_break
    e_remove_hidden_text = _PDFNetPython.TextExtractor_e_remove_hidden_text
    e_no_invisible_text = _PDFNetPython.TextExtractor_e_no_invisible_text
    e_no_watermarks = _PDFNetPython.TextExtractor_e_no_watermarks
    e_extract_using_zorder = _PDFNetPython.TextExtractor_e_extract_using_zorder

    def Begin(self, page, clip_ptr=None, flags=0):
        return _PDFNetPython.TextExtractor_Begin(self, page, clip_ptr, flags)

    def SetOCGContext(self, ctx):
        return _PDFNetPython.TextExtractor_SetOCGContext(self, ctx)

    def GetWordCount(self):
        return _PDFNetPython.TextExtractor_GetWordCount(self)

    def SetRightToLeftLanguage(self, rtl):
        return _PDFNetPython.TextExtractor_SetRightToLeftLanguage(self, rtl)

    def GetRightToLeftLanguage(self):
        return _PDFNetPython.TextExtractor_GetRightToLeftLanguage(self)

    def GetAsText(self, dehyphen=True):
        return _PDFNetPython.TextExtractor_GetAsText(self, dehyphen)

    def GetTextUnderAnnot(self, annot):
        return _PDFNetPython.TextExtractor_GetTextUnderAnnot(self, annot)
    e_words_as_elements = _PDFNetPython.TextExtractor_e_words_as_elements
    e_output_bbox = _PDFNetPython.TextExtractor_e_output_bbox
    e_output_style_info = _PDFNetPython.TextExtractor_e_output_style_info

    def GetAsXML(self, xml_output_flags=0):
        return _PDFNetPython.TextExtractor_GetAsXML(self, xml_output_flags)

    def GetHighlights(self, char_ranges):
        return _PDFNetPython.TextExtractor_GetHighlights(self, char_ranges)

    def GetNumLines(self):
        return _PDFNetPython.TextExtractor_GetNumLines(self)

    def GetFirstLine(self):
        return _PDFNetPython.TextExtractor_GetFirstLine(self)

    def Destroy(self):
        return _PDFNetPython.TextExtractor_Destroy(self)
TextExtractor_swigregister = _PDFNetPython.TextExtractor_swigregister
TextExtractor_swigregister(TextExtractor)

class Style(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Style, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Style, name)
    __repr__ = _swig_repr

    def GetFont(self):
        return _PDFNetPython.Style_GetFont(self)

    def GetFontName(self):
        return _PDFNetPython.Style_GetFontName(self)

    def GetFontSize(self):
        return _PDFNetPython.Style_GetFontSize(self)

    def GetWeight(self):
        return _PDFNetPython.Style_GetWeight(self)

    def IsItalic(self):
        return _PDFNetPython.Style_IsItalic(self)

    def IsSerif(self):
        return _PDFNetPython.Style_IsSerif(self)

    def GetColor(self):
        return _PDFNetPython.Style_GetColor(self)

    def __eq__(self, s):
        return _PDFNetPython.Style___eq__(self, s)

    def __ne__(self, s):
        return _PDFNetPython.Style___ne__(self, s)

    def __init__(self, *args):
        this = _PDFNetPython.new_Style(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_style"] = _PDFNetPython.Style_mp_style_set
    __swig_getmethods__["mp_style"] = _PDFNetPython.Style_mp_style_get
    if _newclass:
        mp_style = _swig_property(_PDFNetPython.Style_mp_style_get, _PDFNetPython.Style_mp_style_set)
    __swig_destroy__ = _PDFNetPython.delete_Style
    __del__ = lambda self: None
Style_swigregister = _PDFNetPython.Style_swigregister
Style_swigregister(Style)

class Word(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Word, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Word, name)
    __repr__ = _swig_repr

    def GetNumGlyphs(self):
        return _PDFNetPython.Word_GetNumGlyphs(self)

    def GetBBox(self):
        return _PDFNetPython.Word_GetBBox(self)

    def GetQuad(self):
        return _PDFNetPython.Word_GetQuad(self)

    def GetGlyphQuad(self, glyph_idx):
        return _PDFNetPython.Word_GetGlyphQuad(self, glyph_idx)

    def GetCharStyle(self, char_idx):
        return _PDFNetPython.Word_GetCharStyle(self, char_idx)

    def GetStyle(self):
        return _PDFNetPython.Word_GetStyle(self)

    def GetStringLen(self):
        return _PDFNetPython.Word_GetStringLen(self)

    def GetString(self):
        return _PDFNetPython.Word_GetString(self)

    def GetNextWord(self):
        return _PDFNetPython.Word_GetNextWord(self)

    def GetCurrentNum(self):
        return _PDFNetPython.Word_GetCurrentNum(self)

    def IsValid(self):
        return _PDFNetPython.Word_IsValid(self)

    def __eq__(self, arg2):
        return _PDFNetPython.Word___eq__(self, arg2)

    def __ne__(self, arg2):
        return _PDFNetPython.Word___ne__(self, arg2)

    def __init__(self, *args):
        this = _PDFNetPython.new_Word(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_word"] = _PDFNetPython.Word_mp_word_set
    __swig_getmethods__["mp_word"] = _PDFNetPython.Word_mp_word_get
    if _newclass:
        mp_word = _swig_property(_PDFNetPython.Word_mp_word_get, _PDFNetPython.Word_mp_word_set)
    __swig_destroy__ = _PDFNetPython.delete_Word
    __del__ = lambda self: None
Word_swigregister = _PDFNetPython.Word_swigregister
Word_swigregister(Word)

class Line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr

    def GetNumWords(self):
        return _PDFNetPython.Line_GetNumWords(self)

    def IsSimpleLine(self):
        return _PDFNetPython.Line_IsSimpleLine(self)

    def GetBBox(self):
        return _PDFNetPython.Line_GetBBox(self)

    def GetQuad(self):
        return _PDFNetPython.Line_GetQuad(self)

    def GetFirstWord(self):
        return _PDFNetPython.Line_GetFirstWord(self)

    def GetWord(self, word_idx):
        return _PDFNetPython.Line_GetWord(self, word_idx)

    def GetNextLine(self):
        return _PDFNetPython.Line_GetNextLine(self)

    def GetCurrentNum(self):
        return _PDFNetPython.Line_GetCurrentNum(self)

    def GetStyle(self):
        return _PDFNetPython.Line_GetStyle(self)

    def GetParagraphID(self):
        return _PDFNetPython.Line_GetParagraphID(self)

    def GetFlowID(self):
        return _PDFNetPython.Line_GetFlowID(self)

    def EndsWithHyphen(self):
        return _PDFNetPython.Line_EndsWithHyphen(self)

    def IsValid(self):
        return _PDFNetPython.Line_IsValid(self)

    def __eq__(self, arg2):
        return _PDFNetPython.Line___eq__(self, arg2)

    def __ne__(self, arg2):
        return _PDFNetPython.Line___ne__(self, arg2)

    def __init__(self, *args):
        this = _PDFNetPython.new_Line(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_line"] = _PDFNetPython.Line_mp_line_set
    __swig_getmethods__["mp_line"] = _PDFNetPython.Line_mp_line_get
    if _newclass:
        mp_line = _swig_property(_PDFNetPython.Line_mp_line_get, _PDFNetPython.Line_mp_line_set)
    __swig_destroy__ = _PDFNetPython.delete_Line
    __del__ = lambda self: None
Line_swigregister = _PDFNetPython.Line_swigregister
Line_swigregister(Line)

class SearchResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchResult, name)
    __repr__ = _swig_repr

    def __nonzero__(self):
        return _PDFNetPython.SearchResult___nonzero__(self)
    __bool__ = __nonzero__



    def IsFound(self):
        return _PDFNetPython.SearchResult_IsFound(self)

    def IsDocEnd(self):
        return _PDFNetPython.SearchResult_IsDocEnd(self)

    def IsPageEnd(self):
        return _PDFNetPython.SearchResult_IsPageEnd(self)

    def GetPageNumber(self):
        return _PDFNetPython.SearchResult_GetPageNumber(self)

    def GetMatch(self):
        return _PDFNetPython.SearchResult_GetMatch(self)

    def GetAmbientString(self):
        return _PDFNetPython.SearchResult_GetAmbientString(self)

    def GetHighlights(self):
        return _PDFNetPython.SearchResult_GetHighlights(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_SearchResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_SearchResult
    __del__ = lambda self: None
SearchResult_swigregister = _PDFNetPython.SearchResult_swigregister
SearchResult_swigregister(SearchResult)

class TextSearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextSearch, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_TextSearch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_TextSearch
    __del__ = lambda self: None
    e_reg_expression = _PDFNetPython.TextSearch_e_reg_expression
    e_case_sensitive = _PDFNetPython.TextSearch_e_case_sensitive
    e_whole_word = _PDFNetPython.TextSearch_e_whole_word
    e_search_up = _PDFNetPython.TextSearch_e_search_up
    e_page_stop = _PDFNetPython.TextSearch_e_page_stop
    e_highlight = _PDFNetPython.TextSearch_e_highlight
    e_ambient_string = _PDFNetPython.TextSearch_e_ambient_string
    e_raw_text_search = _PDFNetPython.TextSearch_e_raw_text_search
    e_search_using_zorder = _PDFNetPython.TextSearch_e_search_using_zorder

    def Begin(self, doc, pattern, mode, start_page=-1, end_page=-1):
        return _PDFNetPython.TextSearch_Begin(self, doc, pattern, mode, start_page, end_page)

    def Run(self):
        return _PDFNetPython.TextSearch_Run(self)

    def SetPattern(self, pattern):
        return _PDFNetPython.TextSearch_SetPattern(self, pattern)

    def GetMode(self):
        return _PDFNetPython.TextSearch_GetMode(self)

    def SetMode(self, mode):
        return _PDFNetPython.TextSearch_SetMode(self, mode)

    def SetRightToLeftLanguage(self, flag):
        return _PDFNetPython.TextSearch_SetRightToLeftLanguage(self, flag)

    def GetCurrentPage(self):
        return _PDFNetPython.TextSearch_GetCurrentPage(self)

    def SetOCGContext(self, context):
        return _PDFNetPython.TextSearch_SetOCGContext(self, context)

    def Destroy(self):
        return _PDFNetPython.TextSearch_Destroy(self)
    __swig_setmethods__["mp_textsearch"] = _PDFNetPython.TextSearch_mp_textsearch_set
    __swig_getmethods__["mp_textsearch"] = _PDFNetPython.TextSearch_mp_textsearch_get
    if _newclass:
        mp_textsearch = _swig_property(_PDFNetPython.TextSearch_mp_textsearch_get, _PDFNetPython.TextSearch_mp_textsearch_set)
TextSearch_swigregister = _PDFNetPython.TextSearch_swigregister
TextSearch_swigregister(TextSearch)

class Redactor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Redactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Redactor, name)
    __repr__ = _swig_repr
    if _newclass:
        Redact = staticmethod(_PDFNetPython.Redactor_Redact)
    else:
        Redact = _PDFNetPython.Redactor_Redact

    def __init__(self):
        this = _PDFNetPython.new_Redactor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PDFNetPython.delete_Redactor
    __del__ = lambda self: None
Redactor_swigregister = _PDFNetPython.Redactor_swigregister
Redactor_swigregister(Redactor)

def Redactor_Redact(*args):
    return _PDFNetPython.Redactor_Redact(*args)
Redactor_Redact = _PDFNetPython.Redactor_Redact

class Redaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Redaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Redaction, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _PDFNetPython.delete_Redaction
    __del__ = lambda self: None

    def Destroy(self):
        return _PDFNetPython.Redaction_Destroy(self)

    def __init__(self, *args):
        this = _PDFNetPython.new_Redaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mp_imp"] = _PDFNetPython.Redaction_mp_imp_set
    __swig_getmethods__["mp_imp"] = _PDFNetPython.Redaction_mp_imp_get
    if _newclass:
        mp_imp = _swig_property(_PDFNetPython.Redaction_mp_imp_get, _PDFNetPython.Redaction_mp_imp_set)
Redaction_swigregister = _PDFNetPython.Redaction_swigregister
Redaction_swigregister(Redaction)

class Appearance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Appearance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Appearance, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PDFNetPython.new_Appearance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["RedactionOverlay"] = _PDFNetPython.Appearance_RedactionOverlay_set
    __swig_getmethods__["RedactionOverlay"] = _PDFNetPython.Appearance_RedactionOverlay_get
    if _newclass:
        RedactionOverlay = _swig_property(_PDFNetPython.Appearance_RedactionOverlay_get, _PDFNetPython.Appearance_RedactionOverlay_set)
    __swig_setmethods__["PositiveOverlayColor"] = _PDFNetPython.Appearance_PositiveOverlayColor_set
    __swig_getmethods__["PositiveOverlayColor"] = _PDFNetPython.Appearance_PositiveOverlayColor_get
    if _newclass:
        PositiveOverlayColor = _swig_property(_PDFNetPython.Appearance_PositiveOverlayColor_get, _PDFNetPython.Appearance_PositiveOverlayColor_set)
    __swig_setmethods__["NegativeOverlayColor"] = _PDFNetPython.Appearance_NegativeOverlayColor_set
    __swig_getmethods__["NegativeOverlayColor"] = _PDFNetPython.Appearance_NegativeOverlayColor_get
    if _newclass:
        NegativeOverlayColor = _swig_property(_PDFNetPython.Appearance_NegativeOverlayColor_get, _PDFNetPython.Appearance_NegativeOverlayColor_set)
    __swig_setmethods__["Border"] = _PDFNetPython.Appearance_Border_set
    __swig_getmethods__["Border"] = _PDFNetPython.Appearance_Border_get
    if _newclass:
        Border = _swig_property(_PDFNetPython.Appearance_Border_get, _PDFNetPython.Appearance_Border_set)
    __swig_setmethods__["UseOverlayText"] = _PDFNetPython.Appearance_UseOverlayText_set
    __swig_getmethods__["UseOverlayText"] = _PDFNetPython.Appearance_UseOverlayText_get
    if _newclass:
        UseOverlayText = _swig_property(_PDFNetPython.Appearance_UseOverlayText_get, _PDFNetPython.Appearance_UseOverlayText_set)
    __swig_setmethods__["TextFont"] = _PDFNetPython.Appearance_TextFont_set
    __swig_getmethods__["TextFont"] = _PDFNetPython.Appearance_TextFont_get
    if _newclass:
        TextFont = _swig_property(_PDFNetPython.Appearance_TextFont_get, _PDFNetPython.Appearance_TextFont_set)
    __swig_setmethods__["MinFontSize"] = _PDFNetPython.Appearance_MinFontSize_set
    __swig_getmethods__["MinFontSize"] = _PDFNetPython.Appearance_MinFontSize_get
    if _newclass:
        MinFontSize = _swig_property(_PDFNetPython.Appearance_MinFontSize_get, _PDFNetPython.Appearance_MinFontSize_set)
    __swig_setmethods__["MaxFontSize"] = _PDFNetPython.Appearance_MaxFontSize_set
    __swig_getmethods__["MaxFontSize"] = _PDFNetPython.Appearance_MaxFontSize_get
    if _newclass:
        MaxFontSize = _swig_property(_PDFNetPython.Appearance_MaxFontSize_get, _PDFNetPython.Appearance_MaxFontSize_set)
    __swig_setmethods__["TextColor"] = _PDFNetPython.Appearance_TextColor_set
    __swig_getmethods__["TextColor"] = _PDFNetPython.Appearance_TextColor_get
    if _newclass:
        TextColor = _swig_property(_PDFNetPython.Appearance_TextColor_get, _PDFNetPython.Appearance_TextColor_set)
    __swig_setmethods__["HorizTextAlignment"] = _PDFNetPython.Appearance_HorizTextAlignment_set
    __swig_getmethods__["HorizTextAlignment"] = _PDFNetPython.Appearance_HorizTextAlignment_get
    if _newclass:
        HorizTextAlignment = _swig_property(_PDFNetPython.Appearance_HorizTextAlignment_get, _PDFNetPython.Appearance_HorizTextAlignment_set)
    __swig_setmethods__["VertTextAlignment"] = _PDFNetPython.Appearance_VertTextAlignment_set
    __swig_getmethods__["VertTextAlignment"] = _PDFNetPython.Appearance_VertTextAlignment_get
    if _newclass:
        VertTextAlignment = _swig_property(_PDFNetPython.Appearance_VertTextAlignment_get, _PDFNetPython.Appearance_VertTextAlignment_set)
    __swig_setmethods__["ShowRedactedContentRegions"] = _PDFNetPython.Appearance_ShowRedactedContentRegions_set
    __swig_getmethods__["ShowRedactedContentRegions"] = _PDFNetPython.Appearance_ShowRedactedContentRegions_get
    if _newclass:
        ShowRedactedContentRegions = _swig_property(_PDFNetPython.Appearance_ShowRedactedContentRegions_get, _PDFNetPython.Appearance_ShowRedactedContentRegions_set)
    __swig_setmethods__["RedactedContentColor"] = _PDFNetPython.Appearance_RedactedContentColor_set
    __swig_getmethods__["RedactedContentColor"] = _PDFNetPython.Appearance_RedactedContentColor_get
    if _newclass:
        RedactedContentColor = _swig_property(_PDFNetPython.Appearance_RedactedContentColor_get, _PDFNetPython.Appearance_RedactedContentColor_set)
    __swig_destroy__ = _PDFNetPython.delete_Appearance
    __del__ = lambda self: None
Appearance_swigregister = _PDFNetPython.Appearance_swigregister
Appearance_swigregister(Appearance)

# This file is compatible with both classic and new-style classes.


